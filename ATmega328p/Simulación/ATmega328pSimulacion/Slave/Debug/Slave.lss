
Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000650  00800100  00002d54  00002de8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002d54  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000043  00800750  00800750  00003438  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003438  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003494  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002e8  00000000  00000000  000034d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003980  00000000  00000000  000037bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001251  00000000  00000000  0000713c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001efa  00000000  00000000  0000838d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a30  00000000  00000000  0000a288  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c72  00000000  00000000  0000acb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002aef  00000000  00000000  0000b92a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000270  00000000  00000000  0000e419  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 44 00 	jmp	0x88	; 0x88 <__ctors_end>
       4:	0c 94 75 00 	jmp	0xea	; 0xea <__vector_1>
       8:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__vector_2>
       c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      10:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      14:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      18:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      1c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      20:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      24:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      28:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      2c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      30:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      34:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      38:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      3c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      40:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      44:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      48:	0c 94 89 0c 	jmp	0x1912	; 0x1912 <__vector_18>
      4c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      50:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      54:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      58:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      5c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      60:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__vector_24>
      64:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      68:	fc 07       	cpc	r31, r28
      6a:	7c 07       	cpc	r23, r28
      6c:	82 07       	cpc	r24, r18
      6e:	88 07       	cpc	r24, r24
      70:	8e 07       	cpc	r24, r30
      72:	94 07       	cpc	r25, r20
      74:	9f 07       	cpc	r25, r31
      76:	aa 07       	cpc	r26, r26
      78:	b5 07       	cpc	r27, r21
      7a:	bb 07       	cpc	r27, r27
      7c:	c6 07       	cpc	r28, r22
      7e:	d1 07       	cpc	r29, r17
      80:	dc 07       	cpc	r29, r28
      82:	f8 07       	cpc	r31, r24
      84:	e2 07       	cpc	r30, r18
      86:	ed 07       	cpc	r30, r29

00000088 <__ctors_end>:
      88:	11 24       	eor	r1, r1
      8a:	1f be       	out	0x3f, r1	; 63
      8c:	cf ef       	ldi	r28, 0xFF	; 255
      8e:	d8 e0       	ldi	r29, 0x08	; 8
      90:	de bf       	out	0x3e, r29	; 62
      92:	cd bf       	out	0x3d, r28	; 61

00000094 <__do_copy_data>:
      94:	17 e0       	ldi	r17, 0x07	; 7
      96:	a0 e0       	ldi	r26, 0x00	; 0
      98:	b1 e0       	ldi	r27, 0x01	; 1
      9a:	e4 e5       	ldi	r30, 0x54	; 84
      9c:	fd e2       	ldi	r31, 0x2D	; 45
      9e:	02 c0       	rjmp	.+4      	; 0xa4 <__do_copy_data+0x10>
      a0:	05 90       	lpm	r0, Z+
      a2:	0d 92       	st	X+, r0
      a4:	a0 35       	cpi	r26, 0x50	; 80
      a6:	b1 07       	cpc	r27, r17
      a8:	d9 f7       	brne	.-10     	; 0xa0 <__do_copy_data+0xc>

000000aa <__do_clear_bss>:
      aa:	27 e0       	ldi	r18, 0x07	; 7
      ac:	a0 e5       	ldi	r26, 0x50	; 80
      ae:	b7 e0       	ldi	r27, 0x07	; 7
      b0:	01 c0       	rjmp	.+2      	; 0xb4 <.do_clear_bss_start>

000000b2 <.do_clear_bss_loop>:
      b2:	1d 92       	st	X+, r1

000000b4 <.do_clear_bss_start>:
      b4:	a3 39       	cpi	r26, 0x93	; 147
      b6:	b2 07       	cpc	r27, r18
      b8:	e1 f7       	brne	.-8      	; 0xb2 <.do_clear_bss_loop>
      ba:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <main>
      be:	0c 94 a8 16 	jmp	0x2d50	; 0x2d50 <_exit>

000000c2 <__bad_interrupt>:
      c2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c6 <configuracion_INT0>:
	EICRA &=~ (3<<ISC10);
	EICRA |=  (evento<<ISC10);
	// Apagado del flag
	EIFR  |=  (1<<INTF1);
	// Habilitar interrupciones en INT0
	EIMSK |=  (1<<INT1);
      c6:	9a b1       	in	r25, 0x0a	; 10
      c8:	9b 7f       	andi	r25, 0xFB	; 251
      ca:	9a b9       	out	0x0a, r25	; 10
      cc:	e9 e6       	ldi	r30, 0x69	; 105
      ce:	f0 e0       	ldi	r31, 0x00	; 0
      d0:	90 81       	ld	r25, Z
      d2:	9c 7f       	andi	r25, 0xFC	; 252
      d4:	90 83       	st	Z, r25
      d6:	90 81       	ld	r25, Z
      d8:	89 2b       	or	r24, r25
      da:	80 83       	st	Z, r24
      dc:	8c b3       	in	r24, 0x1c	; 28
      de:	81 60       	ori	r24, 0x01	; 1
      e0:	8c bb       	out	0x1c, r24	; 28
      e2:	8d b3       	in	r24, 0x1d	; 29
      e4:	81 60       	ori	r24, 0x01	; 1
      e6:	8d bb       	out	0x1d, r24	; 29
      e8:	08 95       	ret

000000ea <__vector_1>:
}

// Rutina de servicio interrupcion externa INT0
ISR(INT0_vect)
{
      ea:	1f 92       	push	r1
      ec:	0f 92       	push	r0
      ee:	0f b6       	in	r0, 0x3f	; 63
      f0:	0f 92       	push	r0
      f2:	11 24       	eor	r1, r1
      f4:	2f 93       	push	r18
      f6:	3f 93       	push	r19
      f8:	4f 93       	push	r20
      fa:	5f 93       	push	r21
      fc:	6f 93       	push	r22
      fe:	7f 93       	push	r23
     100:	8f 93       	push	r24
     102:	9f 93       	push	r25
     104:	af 93       	push	r26
     106:	bf 93       	push	r27
     108:	ef 93       	push	r30
     10a:	ff 93       	push	r31
	if(PIND   &  (1<<PIND2)){  // verificación para filtrar ruidos
     10c:	4a 9b       	sbis	0x09, 2	; 9
     10e:	0a c0       	rjmp	.+20     	; 0x124 <__vector_1+0x3a>
		hand_degree(init_degree);
     110:	60 91 60 07 	lds	r22, 0x0760	; 0x800760 <init_degree>
     114:	70 91 61 07 	lds	r23, 0x0761	; 0x800761 <init_degree+0x1>
     118:	80 91 62 07 	lds	r24, 0x0762	; 0x800762 <init_degree+0x2>
     11c:	90 91 63 07 	lds	r25, 0x0763	; 0x800763 <init_degree+0x3>
     120:	0e 94 b0 00 	call	0x160	; 0x160 <hand_degree>
	}
	// Apagado del flag
	EIFR  |=  (1<<INTF0);
     124:	8c b3       	in	r24, 0x1c	; 28
     126:	81 60       	ori	r24, 0x01	; 1
     128:	8c bb       	out	0x1c, r24	; 28
	
}
     12a:	ff 91       	pop	r31
     12c:	ef 91       	pop	r30
     12e:	bf 91       	pop	r27
     130:	af 91       	pop	r26
     132:	9f 91       	pop	r25
     134:	8f 91       	pop	r24
     136:	7f 91       	pop	r23
     138:	6f 91       	pop	r22
     13a:	5f 91       	pop	r21
     13c:	4f 91       	pop	r20
     13e:	3f 91       	pop	r19
     140:	2f 91       	pop	r18
     142:	0f 90       	pop	r0
     144:	0f be       	out	0x3f, r0	; 63
     146:	0f 90       	pop	r0
     148:	1f 90       	pop	r1
     14a:	18 95       	reti

0000014c <__vector_2>:

// Rutina de interrupcion externa INT1
ISR(INT1_vect)
{	
     14c:	1f 92       	push	r1
     14e:	0f 92       	push	r0
     150:	0f b6       	in	r0, 0x3f	; 63
     152:	0f 92       	push	r0
     154:	11 24       	eor	r1, r1
     156:	0f 90       	pop	r0
     158:	0f be       	out	0x3f, r0	; 63
     15a:	0f 90       	pop	r0
     15c:	1f 90       	pop	r1
     15e:	18 95       	reti

00000160 <hand_degree>:
	finger1_flexion(flexion);
	finger2_flexion(flexion);
	finger3_flexion(flexion);
	finger4_flexion(flexion);
	finger5_flexion(flexion);
}
     160:	cf 92       	push	r12
     162:	df 92       	push	r13
     164:	ef 92       	push	r14
     166:	ff 92       	push	r15
     168:	6b 01       	movw	r12, r22
     16a:	7c 01       	movw	r14, r24
     16c:	9b 01       	movw	r18, r22
     16e:	ac 01       	movw	r20, r24
     170:	0e 94 2b 04 	call	0x856	; 0x856 <set_degrees_TC1>
     174:	a7 01       	movw	r20, r14
     176:	96 01       	movw	r18, r12
     178:	c7 01       	movw	r24, r14
     17a:	b6 01       	movw	r22, r12
     17c:	0e 94 61 03 	call	0x6c2	; 0x6c2 <set_degrees_TC0>
     180:	20 e0       	ldi	r18, 0x00	; 0
     182:	30 e0       	ldi	r19, 0x00	; 0
     184:	44 e3       	ldi	r20, 0x34	; 52
     186:	53 ec       	ldi	r21, 0xC3	; 195
     188:	c7 01       	movw	r24, r14
     18a:	b6 01       	movw	r22, r12
     18c:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <set_degrees_TC2>
     190:	ff 90       	pop	r15
     192:	ef 90       	pop	r14
     194:	df 90       	pop	r13
     196:	cf 90       	pop	r12
     198:	08 95       	ret

0000019a <init_hand>:
     19a:	80 e0       	ldi	r24, 0x00	; 0
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	a4 eb       	ldi	r26, 0xB4	; 180
     1a0:	b2 e4       	ldi	r27, 0x42	; 66
     1a2:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <max_degree>
     1a6:	90 93 65 07 	sts	0x0765, r25	; 0x800765 <max_degree+0x1>
     1aa:	a0 93 66 07 	sts	0x0766, r26	; 0x800766 <max_degree+0x2>
     1ae:	b0 93 67 07 	sts	0x0767, r27	; 0x800767 <max_degree+0x3>
     1b2:	80 e0       	ldi	r24, 0x00	; 0
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	a4 eb       	ldi	r26, 0xB4	; 180
     1b8:	b2 ec       	ldi	r27, 0xC2	; 194
     1ba:	80 93 55 07 	sts	0x0755, r24	; 0x800755 <min_degree>
     1be:	90 93 56 07 	sts	0x0756, r25	; 0x800756 <min_degree+0x1>
     1c2:	a0 93 57 07 	sts	0x0757, r26	; 0x800757 <min_degree+0x2>
     1c6:	b0 93 58 07 	sts	0x0758, r27	; 0x800758 <min_degree+0x3>
     1ca:	0e 94 43 03 	call	0x686	; 0x686 <set_TC0_for_servomotors>
     1ce:	0e 94 03 04 	call	0x806	; 0x806 <set_TC1_for_servomotors>
     1d2:	0e 94 cd 04 	call	0x99a	; 0x99a <set_TC2_for_servomotors>
     1d6:	60 e0       	ldi	r22, 0x00	; 0
     1d8:	70 e0       	ldi	r23, 0x00	; 0
     1da:	cb 01       	movw	r24, r22
     1dc:	0e 94 b0 00 	call	0x160	; 0x160 <hand_degree>
     1e0:	08 95       	ret

000001e2 <flexion_to_degree>:
     1e2:	8f 92       	push	r8
     1e4:	9f 92       	push	r9
     1e6:	af 92       	push	r10
     1e8:	bf 92       	push	r11
     1ea:	cf 92       	push	r12
     1ec:	df 92       	push	r13
     1ee:	ef 92       	push	r14
     1f0:	ff 92       	push	r15
     1f2:	cf 93       	push	r28
     1f4:	c8 2f       	mov	r28, r24
     1f6:	c0 90 55 07 	lds	r12, 0x0755	; 0x800755 <min_degree>
     1fa:	d0 90 56 07 	lds	r13, 0x0756	; 0x800756 <min_degree+0x1>
     1fe:	e0 90 57 07 	lds	r14, 0x0757	; 0x800757 <min_degree+0x2>
     202:	f0 90 58 07 	lds	r15, 0x0758	; 0x800758 <min_degree+0x3>
     206:	a7 01       	movw	r20, r14
     208:	96 01       	movw	r18, r12
     20a:	60 91 64 07 	lds	r22, 0x0764	; 0x800764 <max_degree>
     20e:	70 91 65 07 	lds	r23, 0x0765	; 0x800765 <max_degree+0x1>
     212:	80 91 66 07 	lds	r24, 0x0766	; 0x800766 <max_degree+0x2>
     216:	90 91 67 07 	lds	r25, 0x0767	; 0x800767 <max_degree+0x3>
     21a:	0e 94 ef 10 	call	0x21de	; 0x21de <__subsf3>
     21e:	20 e0       	ldi	r18, 0x00	; 0
     220:	30 e0       	ldi	r19, 0x00	; 0
     222:	48 ec       	ldi	r20, 0xC8	; 200
     224:	52 e4       	ldi	r21, 0x42	; 66
     226:	0e 94 61 11 	call	0x22c2	; 0x22c2 <__divsf3>
     22a:	4b 01       	movw	r8, r22
     22c:	5c 01       	movw	r10, r24
     22e:	6c 2f       	mov	r22, r28
     230:	70 e0       	ldi	r23, 0x00	; 0
     232:	80 e0       	ldi	r24, 0x00	; 0
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	0e 94 0b 12 	call	0x2416	; 0x2416 <__floatsisf>
     23a:	a5 01       	movw	r20, r10
     23c:	94 01       	movw	r18, r8
     23e:	0e 94 c0 12 	call	0x2580	; 0x2580 <__mulsf3>
     242:	9b 01       	movw	r18, r22
     244:	ac 01       	movw	r20, r24
     246:	c7 01       	movw	r24, r14
     248:	b6 01       	movw	r22, r12
     24a:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <__addsf3>
     24e:	cf 91       	pop	r28
     250:	ff 90       	pop	r15
     252:	ef 90       	pop	r14
     254:	df 90       	pop	r13
     256:	cf 90       	pop	r12
     258:	bf 90       	pop	r11
     25a:	af 90       	pop	r10
     25c:	9f 90       	pop	r9
     25e:	8f 90       	pop	r8
     260:	08 95       	ret

00000262 <finger1_flexion>:
     262:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <flexion_to_degree>
     266:	20 e0       	ldi	r18, 0x00	; 0
     268:	30 e0       	ldi	r19, 0x00	; 0
     26a:	44 e3       	ldi	r20, 0x34	; 52
     26c:	53 ec       	ldi	r21, 0xC3	; 195
     26e:	0e 94 2b 04 	call	0x856	; 0x856 <set_degrees_TC1>
     272:	08 95       	ret

00000274 <finger1_degree>:
     274:	20 e0       	ldi	r18, 0x00	; 0
     276:	30 e0       	ldi	r19, 0x00	; 0
     278:	44 e3       	ldi	r20, 0x34	; 52
     27a:	53 ec       	ldi	r21, 0xC3	; 195
     27c:	0e 94 2b 04 	call	0x856	; 0x856 <set_degrees_TC1>
     280:	08 95       	ret

00000282 <finger2_flexion>:
     282:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <flexion_to_degree>
     286:	9b 01       	movw	r18, r22
     288:	ac 01       	movw	r20, r24
     28a:	60 e0       	ldi	r22, 0x00	; 0
     28c:	70 e0       	ldi	r23, 0x00	; 0
     28e:	84 e3       	ldi	r24, 0x34	; 52
     290:	93 ec       	ldi	r25, 0xC3	; 195
     292:	0e 94 2b 04 	call	0x856	; 0x856 <set_degrees_TC1>
     296:	08 95       	ret

00000298 <finger2_degree>:
     298:	9b 01       	movw	r18, r22
     29a:	ac 01       	movw	r20, r24
     29c:	60 e0       	ldi	r22, 0x00	; 0
     29e:	70 e0       	ldi	r23, 0x00	; 0
     2a0:	84 e3       	ldi	r24, 0x34	; 52
     2a2:	93 ec       	ldi	r25, 0xC3	; 195
     2a4:	0e 94 2b 04 	call	0x856	; 0x856 <set_degrees_TC1>
     2a8:	08 95       	ret

000002aa <finger3_flexion>:
     2aa:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <flexion_to_degree>
     2ae:	20 e0       	ldi	r18, 0x00	; 0
     2b0:	30 e0       	ldi	r19, 0x00	; 0
     2b2:	44 e3       	ldi	r20, 0x34	; 52
     2b4:	53 ec       	ldi	r21, 0xC3	; 195
     2b6:	0e 94 61 03 	call	0x6c2	; 0x6c2 <set_degrees_TC0>
     2ba:	08 95       	ret

000002bc <finger3_degree>:
     2bc:	20 e0       	ldi	r18, 0x00	; 0
     2be:	30 e0       	ldi	r19, 0x00	; 0
     2c0:	44 e3       	ldi	r20, 0x34	; 52
     2c2:	53 ec       	ldi	r21, 0xC3	; 195
     2c4:	0e 94 61 03 	call	0x6c2	; 0x6c2 <set_degrees_TC0>
     2c8:	08 95       	ret

000002ca <finger4_flexion>:
     2ca:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <flexion_to_degree>
     2ce:	9b 01       	movw	r18, r22
     2d0:	ac 01       	movw	r20, r24
     2d2:	60 e0       	ldi	r22, 0x00	; 0
     2d4:	70 e0       	ldi	r23, 0x00	; 0
     2d6:	84 e3       	ldi	r24, 0x34	; 52
     2d8:	93 ec       	ldi	r25, 0xC3	; 195
     2da:	0e 94 61 03 	call	0x6c2	; 0x6c2 <set_degrees_TC0>
     2de:	08 95       	ret

000002e0 <finger4_degree>:
     2e0:	9b 01       	movw	r18, r22
     2e2:	ac 01       	movw	r20, r24
     2e4:	60 e0       	ldi	r22, 0x00	; 0
     2e6:	70 e0       	ldi	r23, 0x00	; 0
     2e8:	84 e3       	ldi	r24, 0x34	; 52
     2ea:	93 ec       	ldi	r25, 0xC3	; 195
     2ec:	0e 94 61 03 	call	0x6c2	; 0x6c2 <set_degrees_TC0>
     2f0:	08 95       	ret

000002f2 <finger5_flexion>:
     2f2:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <flexion_to_degree>
     2f6:	20 e0       	ldi	r18, 0x00	; 0
     2f8:	30 e0       	ldi	r19, 0x00	; 0
     2fa:	44 e3       	ldi	r20, 0x34	; 52
     2fc:	53 ec       	ldi	r21, 0xC3	; 195
     2fe:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <set_degrees_TC2>
     302:	08 95       	ret

00000304 <finger5_degree>:
void finger5_flexion(uint8_t flexion){
	set_degrees_TC2(flexion_to_degree(flexion), -180.0);
}

void finger5_degree(float degree){
	set_degrees_TC2(degree, -180.0);
     304:	20 e0       	ldi	r18, 0x00	; 0
     306:	30 e0       	ldi	r19, 0x00	; 0
     308:	44 e3       	ldi	r20, 0x34	; 52
     30a:	53 ec       	ldi	r21, 0xC3	; 195
     30c:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <set_degrees_TC2>
     310:	08 95       	ret

00000312 <I2C_init_slave>:
/*
	Transmit STOP condition
*/
void I2C_STOPcond(){
	// Enable TWI interface; transmit a STOP condition; clear TWINT flag
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//(1<<TWEN)|(1<<TWSTO)|(1<<TWINT);
     312:	60 93 6a 07 	sts	0x076A, r22	; 0x80076a <inter>
     316:	88 0f       	add	r24, r24
     318:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
     31c:	80 91 6a 07 	lds	r24, 0x076A	; 0x80076a <inter>
     320:	84 6c       	ori	r24, 0xC4	; 196
     322:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     326:	08 95       	ret

00000328 <I2C_write_data>:
	The TWEA bit must be written to one to enable the
	acknowledgement of the devices own slave address
*/
uint8_t I2C_write_data(uint8_t data, uint8_t TWEA_val, uint8_t cond){
	// write data byte to TWDR
	TWDR = data;
     328:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	// Clear TWINT;  get ACK; enable TWI interface; set interruptions on or off
	TWCR = (1<<TWINT)|(TWEA_val<<TWEA)|(1<<TWEN)|(inter<<TWIE);
     32c:	80 e4       	ldi	r24, 0x40	; 64
     32e:	68 9f       	mul	r22, r24
     330:	b0 01       	movw	r22, r0
     332:	11 24       	eor	r1, r1
     334:	80 91 6a 07 	lds	r24, 0x076A	; 0x80076a <inter>
     338:	68 2b       	or	r22, r24
     33a:	64 68       	ori	r22, 0x84	; 132
     33c:	60 93 bc 00 	sts	0x00BC, r22	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	// Wait for hardware action: TWINT Flag set
	while (!(TWCR &	(1<<TWINT)));
     340:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     344:	88 23       	and	r24, r24
     346:	e4 f7       	brge	.-8      	; 0x340 <I2C_write_data+0x18>
	// Check if data sent and AKC received
	if(TW_STATUS != cond) return 0;		// if not, NACK
     348:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     34c:	88 7f       	andi	r24, 0xF8	; 248
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	50 e0       	ldi	r21, 0x00	; 0
     352:	84 17       	cp	r24, r20
     354:	95 07       	cpc	r25, r21
     356:	11 f0       	breq	.+4      	; 0x35c <I2C_write_data+0x34>
     358:	80 e0       	ldi	r24, 0x00	; 0
     35a:	08 95       	ret
	return 1;
     35c:	81 e0       	ldi	r24, 0x01	; 1
}
     35e:	08 95       	ret

00000360 <I2C_read_data>:
	The TWEA bit must be written to one to enable the
	acknowledgement of the devices own slave address
*/
void I2C_read_data(uint8_t TWEA_val, uint8_t cond){
	// Clear TWINT;  get ACK; enable TWI interface; set interruptions on or off
	TWCR = (1<<TWINT)|(TWEA_val<<TWEA)|(1<<TWEN)|(inter<<TWIE);
     360:	20 e4       	ldi	r18, 0x40	; 64
     362:	82 9f       	mul	r24, r18
     364:	c0 01       	movw	r24, r0
     366:	11 24       	eor	r1, r1
     368:	90 91 6a 07 	lds	r25, 0x076A	; 0x80076a <inter>
     36c:	89 2b       	or	r24, r25
     36e:	84 68       	ori	r24, 0x84	; 132
     370:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	// Wait for hardware action: TWINT Flag set
	while (!(TWCR &	(1<<TWINT)));
     374:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     378:	88 23       	and	r24, r24
     37a:	e4 f7       	brge	.-8      	; 0x374 <I2C_read_data+0x14>
	// Check if data received and AKC returned -> 		// Put in buffer the value from TWDR
	if(TW_STATUS == cond){
     37c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     380:	88 7f       	andi	r24, 0xF8	; 248
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	70 e0       	ldi	r23, 0x00	; 0
     386:	86 17       	cp	r24, r22
     388:	97 07       	cpc	r25, r23
     38a:	a9 f5       	brne	.+106    	; 0x3f6 <I2C_read_data+0x96>
		switch(TWDR){
     38c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     390:	8a 30       	cpi	r24, 0x0A	; 10
     392:	71 f0       	breq	.+28     	; 0x3b0 <I2C_read_data+0x50>
     394:	18 f4       	brcc	.+6      	; 0x39c <I2C_read_data+0x3c>
     396:	81 11       	cpse	r24, r1
     398:	1c c0       	rjmp	.+56     	; 0x3d2 <I2C_read_data+0x72>
     39a:	0a c0       	rjmp	.+20     	; 0x3b0 <I2C_read_data+0x50>
     39c:	8d 30       	cpi	r24, 0x0D	; 13
     39e:	41 f0       	breq	.+16     	; 0x3b0 <I2C_read_data+0x50>
     3a0:	8a 33       	cpi	r24, 0x3A	; 58
     3a2:	b9 f4       	brne	.+46     	; 0x3d2 <I2C_read_data+0x72>
			case ':':
				flagcom = 1;
     3a4:	81 e0       	ldi	r24, 0x01	; 1
     3a6:	80 93 89 07 	sts	0x0789, r24	; 0x800789 <flagcom>
				indcom = 0;
     3aa:	10 92 50 07 	sts	0x0750, r1	; 0x800750 <__data_end>
				break;
     3ae:	08 95       	ret
			case 0:
			case '\r':
			case '\n':
				if(flagcom){
     3b0:	80 91 89 07 	lds	r24, 0x0789	; 0x800789 <flagcom>
     3b4:	88 23       	and	r24, r24
     3b6:	51 f0       	breq	.+20     	; 0x3cc <I2C_read_data+0x6c>
					comando[indcom] = 0;
     3b8:	e0 91 50 07 	lds	r30, 0x0750	; 0x800750 <__data_end>
     3bc:	f0 e0       	ldi	r31, 0x00	; 0
     3be:	e5 59       	subi	r30, 0x95	; 149
     3c0:	f8 4f       	sbci	r31, 0xF8	; 248
     3c2:	10 82       	st	Z, r1
					indcom = 0;
     3c4:	10 92 50 07 	sts	0x0750, r1	; 0x800750 <__data_end>
					i2c_interpreter();
     3c8:	0e 94 81 02 	call	0x502	; 0x502 <i2c_interpreter>
				}
				flagcom = 0;
     3cc:	10 92 89 07 	sts	0x0789, r1	; 0x800789 <flagcom>
				break;
     3d0:	08 95       	ret
			default:
				if(flagcom && indcom<comSize)	comando[indcom++] = TWDR;
     3d2:	80 91 89 07 	lds	r24, 0x0789	; 0x800789 <flagcom>
     3d6:	88 23       	and	r24, r24
     3d8:	71 f0       	breq	.+28     	; 0x3f6 <I2C_read_data+0x96>
     3da:	e0 91 50 07 	lds	r30, 0x0750	; 0x800750 <__data_end>
     3de:	ee 31       	cpi	r30, 0x1E	; 30
     3e0:	50 f4       	brcc	.+20     	; 0x3f6 <I2C_read_data+0x96>
     3e2:	81 e0       	ldi	r24, 0x01	; 1
     3e4:	8e 0f       	add	r24, r30
     3e6:	80 93 50 07 	sts	0x0750, r24	; 0x800750 <__data_end>
     3ea:	f0 e0       	ldi	r31, 0x00	; 0
     3ec:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     3f0:	e5 59       	subi	r30, 0x95	; 149
     3f2:	f8 4f       	sbci	r31, 0xF8	; 248
     3f4:	80 83       	st	Z, r24
     3f6:	08 95       	ret

000003f8 <__vector_24>:

/*
	Interruption service rutine
*/
ISR(TWI_vect)
{
     3f8:	1f 92       	push	r1
     3fa:	0f 92       	push	r0
     3fc:	0f b6       	in	r0, 0x3f	; 63
     3fe:	0f 92       	push	r0
     400:	11 24       	eor	r1, r1
     402:	2f 93       	push	r18
     404:	3f 93       	push	r19
     406:	4f 93       	push	r20
     408:	5f 93       	push	r21
     40a:	6f 93       	push	r22
     40c:	7f 93       	push	r23
     40e:	8f 93       	push	r24
     410:	9f 93       	push	r25
     412:	af 93       	push	r26
     414:	bf 93       	push	r27
     416:	ef 93       	push	r30
     418:	ff 93       	push	r31
	switch(TW_STATUS)
     41a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     41e:	88 7f       	andi	r24, 0xF8	; 248
     420:	80 38       	cpi	r24, 0x80	; 128
     422:	a1 f0       	breq	.+40     	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
     424:	28 f4       	brcc	.+10     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
     426:	88 23       	and	r24, r24
     428:	81 f1       	breq	.+96     	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
     42a:	80 36       	cpi	r24, 0x60	; 96
     42c:	41 f0       	breq	.+16     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
     42e:	34 c0       	rjmp	.+104    	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
     430:	88 3a       	cpi	r24, 0xA8	; 168
     432:	c9 f0       	breq	.+50     	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
     434:	88 3b       	cpi	r24, 0xB8	; 184
     436:	01 f1       	breq	.+64     	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
     438:	80 3a       	cpi	r24, 0xA0	; 160
     43a:	71 f5       	brne	.+92     	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
     43c:	0e c0       	rjmp	.+28     	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
	{
		case TW_SR_SLA_ACK:
			I2C_read_data(TWEA_slave, TW_STATUS);
     43e:	60 91 b9 00 	lds	r22, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     442:	68 7f       	andi	r22, 0xF8	; 248
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	0e 94 b0 01 	call	0x360	; 0x360 <I2C_read_data>
			break;
     44a:	26 c0       	rjmp	.+76     	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
		case TW_SR_DATA_ACK:
			I2C_read_data(TWEA_slave, TW_STATUS);
     44c:	60 91 b9 00 	lds	r22, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     450:	68 7f       	andi	r22, 0xF8	; 248
     452:	81 e0       	ldi	r24, 0x01	; 1
     454:	0e 94 b0 01 	call	0x360	; 0x360 <I2C_read_data>
			break;
     458:	1f c0       	rjmp	.+62     	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
		case TW_SR_STOP:
			TWCR |= (1<<TWINT);		
     45a:	ec eb       	ldi	r30, 0xBC	; 188
     45c:	f0 e0       	ldi	r31, 0x00	; 0
     45e:	80 81       	ld	r24, Z
     460:	80 68       	ori	r24, 0x80	; 128
     462:	80 83       	st	Z, r24
			break;
     464:	19 c0       	rjmp	.+50     	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
		case TW_ST_SLA_ACK:
			I2C_write_data(TWDR, 1, TW_STATUS);
     466:	40 91 b9 00 	lds	r20, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     46a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     46e:	48 7f       	andi	r20, 0xF8	; 248
     470:	61 e0       	ldi	r22, 0x01	; 1
     472:	0e 94 94 01 	call	0x328	; 0x328 <I2C_write_data>
			break;
     476:	10 c0       	rjmp	.+32     	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
		case TW_ST_DATA_ACK:
			I2C_write_data(TWDR, 1, TW_STATUS);
     478:	40 91 b9 00 	lds	r20, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     47c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     480:	48 7f       	andi	r20, 0xF8	; 248
     482:	61 e0       	ldi	r22, 0x01	; 1
     484:	0e 94 94 01 	call	0x328	; 0x328 <I2C_write_data>
			break;
     488:	07 c0       	rjmp	.+14     	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
		case TW_BUS_ERROR:
			printf("ERROR!\r\n");
     48a:	8e e0       	ldi	r24, 0x0E	; 14
     48c:	91 e0       	ldi	r25, 0x01	; 1
     48e:	0e 94 b0 13 	call	0x2760	; 0x2760 <puts>
			// illegal start or stop condition
 			TWCR = (1 << TWIE) | (1 << TWINT) | (1 << TWEA) | (1 << TWEN);
     492:	85 ec       	ldi	r24, 0xC5	; 197
     494:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
			break;
		default:
			break;
	}
}
     498:	ff 91       	pop	r31
     49a:	ef 91       	pop	r30
     49c:	bf 91       	pop	r27
     49e:	af 91       	pop	r26
     4a0:	9f 91       	pop	r25
     4a2:	8f 91       	pop	r24
     4a4:	7f 91       	pop	r23
     4a6:	6f 91       	pop	r22
     4a8:	5f 91       	pop	r21
     4aa:	4f 91       	pop	r20
     4ac:	3f 91       	pop	r19
     4ae:	2f 91       	pop	r18
     4b0:	0f 90       	pop	r0
     4b2:	0f be       	out	0x3f, r0	; 63
     4b4:	0f 90       	pop	r0
     4b6:	1f 90       	pop	r1
     4b8:	18 95       	reti

000004ba <getVal>:

uint8_t getVal(uint8_t ind){
	// UINT8_MAX -> 255 (3 cifras)
	// Ademas, el servidor envia valores del 0 a 100
	uint8_t val = 0;
	for(int i=(ind+1); i<=(ind+4); i++){
     4ba:	68 2f       	mov	r22, r24
     4bc:	70 e0       	ldi	r23, 0x00	; 0
     4be:	9b 01       	movw	r18, r22
     4c0:	2f 5f       	subi	r18, 0xFF	; 255
     4c2:	3f 4f       	sbci	r19, 0xFF	; 255
#include "i2c_interpreter.h"

uint8_t getVal(uint8_t ind){
	// UINT8_MAX -> 255 (3 cifras)
	// Ademas, el servidor envia valores del 0 a 100
	uint8_t val = 0;
     4c4:	80 e0       	ldi	r24, 0x00	; 0
	for(int i=(ind+1); i<=(ind+4); i++){
     4c6:	16 c0       	rjmp	.+44     	; 0x4f4 <getVal+0x3a>
		indcom = i;
     4c8:	20 93 50 07 	sts	0x0750, r18	; 0x800750 <__data_end>
		if(!isdigit(comando[i]))	break;
     4cc:	f9 01       	movw	r30, r18
     4ce:	e5 59       	subi	r30, 0x95	; 149
     4d0:	f8 4f       	sbci	r31, 0xF8	; 248
     4d2:	90 81       	ld	r25, Z
     4d4:	49 2f       	mov	r20, r25
     4d6:	50 e0       	ldi	r21, 0x00	; 0
     4d8:	40 53       	subi	r20, 0x30	; 48
     4da:	51 09       	sbc	r21, r1
     4dc:	4a 30       	cpi	r20, 0x0A	; 10
     4de:	51 05       	cpc	r21, r1
     4e0:	78 f4       	brcc	.+30     	; 0x500 <getVal+0x46>
		val = val*10 + comando[i] - '0';
     4e2:	88 0f       	add	r24, r24
     4e4:	48 2f       	mov	r20, r24
     4e6:	44 0f       	add	r20, r20
     4e8:	44 0f       	add	r20, r20
     4ea:	84 0f       	add	r24, r20
     4ec:	89 0f       	add	r24, r25
     4ee:	80 53       	subi	r24, 0x30	; 48

uint8_t getVal(uint8_t ind){
	// UINT8_MAX -> 255 (3 cifras)
	// Ademas, el servidor envia valores del 0 a 100
	uint8_t val = 0;
	for(int i=(ind+1); i<=(ind+4); i++){
     4f0:	2f 5f       	subi	r18, 0xFF	; 255
     4f2:	3f 4f       	sbci	r19, 0xFF	; 255
     4f4:	ab 01       	movw	r20, r22
     4f6:	4c 5f       	subi	r20, 0xFC	; 252
     4f8:	5f 4f       	sbci	r21, 0xFF	; 255
     4fa:	42 17       	cp	r20, r18
     4fc:	53 07       	cpc	r21, r19
     4fe:	24 f7       	brge	.-56     	; 0x4c8 <getVal+0xe>
		indcom = i;
		if(!isdigit(comando[i]))	break;
		val = val*10 + comando[i] - '0';
	}
	return val;
}
     500:	08 95       	ret

00000502 <i2c_interpreter>:


void i2c_interpreter(){
	switch(comando[indcom]){
     502:	e0 91 50 07 	lds	r30, 0x0750	; 0x800750 <__data_end>
     506:	f0 e0       	ldi	r31, 0x00	; 0
     508:	e5 59       	subi	r30, 0x95	; 149
     50a:	f8 4f       	sbci	r31, 0xF8	; 248
     50c:	80 81       	ld	r24, Z
     50e:	82 34       	cpi	r24, 0x42	; 66
     510:	61 f1       	breq	.+88     	; 0x56a <i2c_interpreter+0x68>
     512:	30 f4       	brcc	.+12     	; 0x520 <i2c_interpreter+0x1e>
     514:	88 23       	and	r24, r24
     516:	09 f4       	brne	.+2      	; 0x51a <i2c_interpreter+0x18>
     518:	9c c0       	rjmp	.+312    	; 0x652 <i2c_interpreter+0x150>
     51a:	81 34       	cpi	r24, 0x41	; 65
     51c:	49 f0       	breq	.+18     	; 0x530 <i2c_interpreter+0x2e>
     51e:	ae c0       	rjmp	.+348    	; 0x67c <i2c_interpreter+0x17a>
     520:	84 34       	cpi	r24, 0x44	; 68
     522:	09 f4       	brne	.+2      	; 0x526 <i2c_interpreter+0x24>
     524:	5c c0       	rjmp	.+184    	; 0x5de <i2c_interpreter+0xdc>
     526:	f0 f1       	brcs	.+124    	; 0x5a4 <i2c_interpreter+0xa2>
     528:	85 34       	cpi	r24, 0x45	; 69
     52a:	09 f4       	brne	.+2      	; 0x52e <i2c_interpreter+0x2c>
     52c:	75 c0       	rjmp	.+234    	; 0x618 <i2c_interpreter+0x116>
     52e:	a6 c0       	rjmp	.+332    	; 0x67c <i2c_interpreter+0x17a>
		case 'A':						
			printf("Dedo 1 ");
     530:	86 e1       	ldi	r24, 0x16	; 22
     532:	91 e0       	ldi	r25, 0x01	; 1
     534:	9f 93       	push	r25
     536:	8f 93       	push	r24
     538:	0e 94 9a 13 	call	0x2734	; 0x2734 <printf>
			ff1 = getVal(indcom);
     53c:	80 91 50 07 	lds	r24, 0x0750	; 0x800750 <__data_end>
     540:	0e 94 5d 02 	call	0x4ba	; 0x4ba <getVal>
     544:	80 93 8a 07 	sts	0x078A, r24	; 0x80078a <ff1>
			printf("-> %d\r\n", ff1);
     548:	1f 92       	push	r1
     54a:	8f 93       	push	r24
     54c:	8e e1       	ldi	r24, 0x1E	; 30
     54e:	91 e0       	ldi	r25, 0x01	; 1
     550:	9f 93       	push	r25
     552:	8f 93       	push	r24
     554:	0e 94 9a 13 	call	0x2734	; 0x2734 <printf>
			i2c_interpreter();
     558:	0e 94 81 02 	call	0x502	; 0x502 <i2c_interpreter>
			break;
     55c:	0f 90       	pop	r0
     55e:	0f 90       	pop	r0
     560:	0f 90       	pop	r0
     562:	0f 90       	pop	r0
     564:	0f 90       	pop	r0
     566:	0f 90       	pop	r0
     568:	08 95       	ret
		case 'B':						
			printf("Dedo 2 ");
     56a:	86 e2       	ldi	r24, 0x26	; 38
     56c:	91 e0       	ldi	r25, 0x01	; 1
     56e:	9f 93       	push	r25
     570:	8f 93       	push	r24
     572:	0e 94 9a 13 	call	0x2734	; 0x2734 <printf>
			ff2 = getVal(indcom);
     576:	80 91 50 07 	lds	r24, 0x0750	; 0x800750 <__data_end>
     57a:	0e 94 5d 02 	call	0x4ba	; 0x4ba <getVal>
     57e:	80 93 5b 07 	sts	0x075B, r24	; 0x80075b <ff2>
			printf("-> %d\r\n", ff2);
     582:	1f 92       	push	r1
     584:	8f 93       	push	r24
     586:	8e e1       	ldi	r24, 0x1E	; 30
     588:	91 e0       	ldi	r25, 0x01	; 1
     58a:	9f 93       	push	r25
     58c:	8f 93       	push	r24
     58e:	0e 94 9a 13 	call	0x2734	; 0x2734 <printf>
			i2c_interpreter();
     592:	0e 94 81 02 	call	0x502	; 0x502 <i2c_interpreter>
			break;
     596:	0f 90       	pop	r0
     598:	0f 90       	pop	r0
     59a:	0f 90       	pop	r0
     59c:	0f 90       	pop	r0
     59e:	0f 90       	pop	r0
     5a0:	0f 90       	pop	r0
     5a2:	08 95       	ret
		case 'C':						
			printf("Dedo 3 ");
     5a4:	8e e2       	ldi	r24, 0x2E	; 46
     5a6:	91 e0       	ldi	r25, 0x01	; 1
     5a8:	9f 93       	push	r25
     5aa:	8f 93       	push	r24
     5ac:	0e 94 9a 13 	call	0x2734	; 0x2734 <printf>
			ff3 = getVal(indcom);
     5b0:	80 91 50 07 	lds	r24, 0x0750	; 0x800750 <__data_end>
     5b4:	0e 94 5d 02 	call	0x4ba	; 0x4ba <getVal>
     5b8:	80 93 52 07 	sts	0x0752, r24	; 0x800752 <ff3>
			printf("-> %d\r\n", ff3);
     5bc:	1f 92       	push	r1
     5be:	8f 93       	push	r24
     5c0:	8e e1       	ldi	r24, 0x1E	; 30
     5c2:	91 e0       	ldi	r25, 0x01	; 1
     5c4:	9f 93       	push	r25
     5c6:	8f 93       	push	r24
     5c8:	0e 94 9a 13 	call	0x2734	; 0x2734 <printf>
			i2c_interpreter();
     5cc:	0e 94 81 02 	call	0x502	; 0x502 <i2c_interpreter>
			break;
     5d0:	0f 90       	pop	r0
     5d2:	0f 90       	pop	r0
     5d4:	0f 90       	pop	r0
     5d6:	0f 90       	pop	r0
     5d8:	0f 90       	pop	r0
     5da:	0f 90       	pop	r0
     5dc:	08 95       	ret
		case 'D':						
			printf("Dedo 4 ");
     5de:	86 e3       	ldi	r24, 0x36	; 54
     5e0:	91 e0       	ldi	r25, 0x01	; 1
     5e2:	9f 93       	push	r25
     5e4:	8f 93       	push	r24
     5e6:	0e 94 9a 13 	call	0x2734	; 0x2734 <printf>
			ff4 = getVal(indcom);
     5ea:	80 91 50 07 	lds	r24, 0x0750	; 0x800750 <__data_end>
     5ee:	0e 94 5d 02 	call	0x4ba	; 0x4ba <getVal>
     5f2:	80 93 69 07 	sts	0x0769, r24	; 0x800769 <ff4>
			printf("-> %d\r\n", ff4);
     5f6:	1f 92       	push	r1
     5f8:	8f 93       	push	r24
     5fa:	8e e1       	ldi	r24, 0x1E	; 30
     5fc:	91 e0       	ldi	r25, 0x01	; 1
     5fe:	9f 93       	push	r25
     600:	8f 93       	push	r24
     602:	0e 94 9a 13 	call	0x2734	; 0x2734 <printf>
			i2c_interpreter();
     606:	0e 94 81 02 	call	0x502	; 0x502 <i2c_interpreter>
			break;
     60a:	0f 90       	pop	r0
     60c:	0f 90       	pop	r0
     60e:	0f 90       	pop	r0
     610:	0f 90       	pop	r0
     612:	0f 90       	pop	r0
     614:	0f 90       	pop	r0
     616:	08 95       	ret
		case 'E':						
			printf("Dedo 5 ");
     618:	8e e3       	ldi	r24, 0x3E	; 62
     61a:	91 e0       	ldi	r25, 0x01	; 1
     61c:	9f 93       	push	r25
     61e:	8f 93       	push	r24
     620:	0e 94 9a 13 	call	0x2734	; 0x2734 <printf>
			ff5 = getVal(indcom);
     624:	80 91 50 07 	lds	r24, 0x0750	; 0x800750 <__data_end>
     628:	0e 94 5d 02 	call	0x4ba	; 0x4ba <getVal>
     62c:	80 93 51 07 	sts	0x0751, r24	; 0x800751 <ff5>
			printf("-> %d\r\n", ff5);
     630:	1f 92       	push	r1
     632:	8f 93       	push	r24
     634:	8e e1       	ldi	r24, 0x1E	; 30
     636:	91 e0       	ldi	r25, 0x01	; 1
     638:	9f 93       	push	r25
     63a:	8f 93       	push	r24
     63c:	0e 94 9a 13 	call	0x2734	; 0x2734 <printf>
			i2c_interpreter();
     640:	0e 94 81 02 	call	0x502	; 0x502 <i2c_interpreter>
			break;
     644:	0f 90       	pop	r0
     646:	0f 90       	pop	r0
     648:	0f 90       	pop	r0
     64a:	0f 90       	pop	r0
     64c:	0f 90       	pop	r0
     64e:	0f 90       	pop	r0
     650:	08 95       	ret
		case 0:
			finger1_flexion(ff1);
     652:	80 91 8a 07 	lds	r24, 0x078A	; 0x80078a <ff1>
     656:	0e 94 31 01 	call	0x262	; 0x262 <finger1_flexion>
			finger2_flexion(ff2);
     65a:	80 91 5b 07 	lds	r24, 0x075B	; 0x80075b <ff2>
     65e:	0e 94 41 01 	call	0x282	; 0x282 <finger2_flexion>
			finger3_flexion(ff3);
     662:	80 91 52 07 	lds	r24, 0x0752	; 0x800752 <ff3>
     666:	0e 94 55 01 	call	0x2aa	; 0x2aa <finger3_flexion>
			finger4_flexion(ff4);
     66a:	80 91 69 07 	lds	r24, 0x0769	; 0x800769 <ff4>
     66e:	0e 94 65 01 	call	0x2ca	; 0x2ca <finger4_flexion>
			finger5_flexion(ff5);
     672:	80 91 51 07 	lds	r24, 0x0751	; 0x800751 <ff5>
     676:	0e 94 79 01 	call	0x2f2	; 0x2f2 <finger5_flexion>
			break;
     67a:	08 95       	ret
		default:
			printf("\r\nError de recepcion\r\n");
     67c:	86 e4       	ldi	r24, 0x46	; 70
     67e:	91 e0       	ldi	r25, 0x01	; 1
     680:	0e 94 b0 13 	call	0x2760	; 0x2760 <puts>
     684:	08 95       	ret

00000686 <set_TC0_for_servomotors>:

#include "servomotors.h"

// ======================= TIMER 0 =============================
void set_TC0_for_servomotors(){
	T_servo_ms = 16;								// [ms] periodo del PWM para controlar los servomotores
     686:	80 e0       	ldi	r24, 0x00	; 0
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	a0 e8       	ldi	r26, 0x80	; 128
     68c:	b1 e4       	ldi	r27, 0x41	; 65
     68e:	80 93 5c 07 	sts	0x075C, r24	; 0x80075c <T_servo_ms>
     692:	90 93 5d 07 	sts	0x075D, r25	; 0x80075d <T_servo_ms+0x1>
     696:	a0 93 5e 07 	sts	0x075E, r26	; 0x80075e <T_servo_ms+0x2>
     69a:	b0 93 5f 07 	sts	0x075F, r27	; 0x80075f <T_servo_ms+0x3>
	configuracion_modo_timer0(FAST_PWM_8b);			// Fast PWM con 0xFF (255) como TOP
     69e:	83 e0       	ldi	r24, 0x03	; 3
     6a0:	0e 94 8d 05 	call	0xb1a	; 0xb1a <configuracion_modo_timer0>
	seleccion_prescaler_ms_timer0(T_servo_ms);		// Prescaler de acuerdo al periodo requerido
     6a4:	60 91 5c 07 	lds	r22, 0x075C	; 0x80075c <T_servo_ms>
     6a8:	70 91 5d 07 	lds	r23, 0x075D	; 0x80075d <T_servo_ms+0x1>
     6ac:	80 91 5e 07 	lds	r24, 0x075E	; 0x80075e <T_servo_ms+0x2>
     6b0:	90 91 5f 07 	lds	r25, 0x075F	; 0x80075f <T_servo_ms+0x3>
     6b4:	0e 94 17 06 	call	0xc2e	; 0xc2e <seleccion_prescaler_ms_timer0>
	configuracion_modoSalidas_timer0(Clear, Clear);	// Salida OC0A en Clear, OC0B en Clear
     6b8:	62 e0       	ldi	r22, 0x02	; 2
     6ba:	82 e0       	ldi	r24, 0x02	; 2
     6bc:	0e 94 89 06 	call	0xd12	; 0xd12 <configuracion_modoSalidas_timer0>
     6c0:	08 95       	ret

000006c2 <set_degrees_TC0>:
}


void set_degrees_TC0(float degreesA, float degreesB){
     6c2:	4f 92       	push	r4
     6c4:	5f 92       	push	r5
     6c6:	6f 92       	push	r6
     6c8:	7f 92       	push	r7
     6ca:	8f 92       	push	r8
     6cc:	9f 92       	push	r9
     6ce:	af 92       	push	r10
     6d0:	bf 92       	push	r11
     6d2:	cf 92       	push	r12
     6d4:	df 92       	push	r13
     6d6:	ef 92       	push	r14
     6d8:	ff 92       	push	r15
     6da:	2b 01       	movw	r4, r22
     6dc:	3c 01       	movw	r6, r24
     6de:	49 01       	movw	r8, r18
     6e0:	5a 01       	movw	r10, r20
	float dutycicleB = -1.0;
	// Segun datasheet de SG90
	// -90ï¿½ --> 1ms
	// +90ï¿½ --> 2ms
	// Ecuacion de la recta dados dos puntos
	if(degreesA >= min_degree && degreesA <= max_degree)	dutycicleA = (1.0/180.0)*(degreesA + 90.0) + 1.0;
     6e2:	c0 90 55 07 	lds	r12, 0x0755	; 0x800755 <min_degree>
     6e6:	d0 90 56 07 	lds	r13, 0x0756	; 0x800756 <min_degree+0x1>
     6ea:	e0 90 57 07 	lds	r14, 0x0757	; 0x800757 <min_degree+0x2>
     6ee:	f0 90 58 07 	lds	r15, 0x0758	; 0x800758 <min_degree+0x3>
     6f2:	9b 01       	movw	r18, r22
     6f4:	ac 01       	movw	r20, r24
     6f6:	c7 01       	movw	r24, r14
     6f8:	b6 01       	movw	r22, r12
     6fa:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__cmpsf2>
     6fe:	18 16       	cp	r1, r24
     700:	2c f1       	brlt	.+74     	; 0x74c <set_degrees_TC0+0x8a>
     702:	20 91 64 07 	lds	r18, 0x0764	; 0x800764 <max_degree>
     706:	30 91 65 07 	lds	r19, 0x0765	; 0x800765 <max_degree+0x1>
     70a:	40 91 66 07 	lds	r20, 0x0766	; 0x800766 <max_degree+0x2>
     70e:	50 91 67 07 	lds	r21, 0x0767	; 0x800767 <max_degree+0x3>
     712:	c3 01       	movw	r24, r6
     714:	b2 01       	movw	r22, r4
     716:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__cmpsf2>
     71a:	18 16       	cp	r1, r24
     71c:	04 f1       	brlt	.+64     	; 0x75e <set_degrees_TC0+0x9c>
     71e:	20 e0       	ldi	r18, 0x00	; 0
     720:	30 e0       	ldi	r19, 0x00	; 0
     722:	44 eb       	ldi	r20, 0xB4	; 180
     724:	52 e4       	ldi	r21, 0x42	; 66
     726:	c3 01       	movw	r24, r6
     728:	b2 01       	movw	r22, r4
     72a:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <__addsf3>
     72e:	21 e6       	ldi	r18, 0x61	; 97
     730:	3b e0       	ldi	r19, 0x0B	; 11
     732:	46 eb       	ldi	r20, 0xB6	; 182
     734:	5b e3       	ldi	r21, 0x3B	; 59
     736:	0e 94 c0 12 	call	0x2580	; 0x2580 <__mulsf3>
     73a:	20 e0       	ldi	r18, 0x00	; 0
     73c:	30 e0       	ldi	r19, 0x00	; 0
     73e:	40 e8       	ldi	r20, 0x80	; 128
     740:	5f e3       	ldi	r21, 0x3F	; 63
     742:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <__addsf3>
     746:	2b 01       	movw	r4, r22
     748:	3c 01       	movw	r6, r24
     74a:	11 c0       	rjmp	.+34     	; 0x76e <set_degrees_TC0+0xac>
	configuracion_modoSalidas_timer0(Clear, Clear);	// Salida OC0A en Clear, OC0B en Clear
}


void set_degrees_TC0(float degreesA, float degreesB){
	float dutycicleA = -1.0;
     74c:	0f 2e       	mov	r0, r31
     74e:	41 2c       	mov	r4, r1
     750:	51 2c       	mov	r5, r1
     752:	f0 e8       	ldi	r31, 0x80	; 128
     754:	6f 2e       	mov	r6, r31
     756:	ff eb       	ldi	r31, 0xBF	; 191
     758:	7f 2e       	mov	r7, r31
     75a:	f0 2d       	mov	r31, r0
     75c:	08 c0       	rjmp	.+16     	; 0x76e <set_degrees_TC0+0xac>
     75e:	0f 2e       	mov	r0, r31
     760:	41 2c       	mov	r4, r1
     762:	51 2c       	mov	r5, r1
     764:	f0 e8       	ldi	r31, 0x80	; 128
     766:	6f 2e       	mov	r6, r31
     768:	ff eb       	ldi	r31, 0xBF	; 191
     76a:	7f 2e       	mov	r7, r31
     76c:	f0 2d       	mov	r31, r0
	// Segun datasheet de SG90
	// -90ï¿½ --> 1ms
	// +90ï¿½ --> 2ms
	// Ecuacion de la recta dados dos puntos
	if(degreesA >= min_degree && degreesA <= max_degree)	dutycicleA = (1.0/180.0)*(degreesA + 90.0) + 1.0;
	if(degreesB >= min_degree && degreesB <= max_degree)	dutycicleB = (1.0/180.0)*(degreesB + 90.0) + 1.0;
     76e:	a5 01       	movw	r20, r10
     770:	94 01       	movw	r18, r8
     772:	c7 01       	movw	r24, r14
     774:	b6 01       	movw	r22, r12
     776:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__cmpsf2>
     77a:	18 16       	cp	r1, r24
     77c:	2c f1       	brlt	.+74     	; 0x7c8 <set_degrees_TC0+0x106>
     77e:	20 91 64 07 	lds	r18, 0x0764	; 0x800764 <max_degree>
     782:	30 91 65 07 	lds	r19, 0x0765	; 0x800765 <max_degree+0x1>
     786:	40 91 66 07 	lds	r20, 0x0766	; 0x800766 <max_degree+0x2>
     78a:	50 91 67 07 	lds	r21, 0x0767	; 0x800767 <max_degree+0x3>
     78e:	c5 01       	movw	r24, r10
     790:	b4 01       	movw	r22, r8
     792:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__cmpsf2>
     796:	18 16       	cp	r1, r24
     798:	e4 f0       	brlt	.+56     	; 0x7d2 <set_degrees_TC0+0x110>
     79a:	20 e0       	ldi	r18, 0x00	; 0
     79c:	30 e0       	ldi	r19, 0x00	; 0
     79e:	44 eb       	ldi	r20, 0xB4	; 180
     7a0:	52 e4       	ldi	r21, 0x42	; 66
     7a2:	c5 01       	movw	r24, r10
     7a4:	b4 01       	movw	r22, r8
     7a6:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <__addsf3>
     7aa:	21 e6       	ldi	r18, 0x61	; 97
     7ac:	3b e0       	ldi	r19, 0x0B	; 11
     7ae:	46 eb       	ldi	r20, 0xB6	; 182
     7b0:	5b e3       	ldi	r21, 0x3B	; 59
     7b2:	0e 94 c0 12 	call	0x2580	; 0x2580 <__mulsf3>
     7b6:	20 e0       	ldi	r18, 0x00	; 0
     7b8:	30 e0       	ldi	r19, 0x00	; 0
     7ba:	40 e8       	ldi	r20, 0x80	; 128
     7bc:	5f e3       	ldi	r21, 0x3F	; 63
     7be:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <__addsf3>
     7c2:	9b 01       	movw	r18, r22
     7c4:	ac 01       	movw	r20, r24
     7c6:	09 c0       	rjmp	.+18     	; 0x7da <set_degrees_TC0+0x118>
}


void set_degrees_TC0(float degreesA, float degreesB){
	float dutycicleA = -1.0;
	float dutycicleB = -1.0;
     7c8:	20 e0       	ldi	r18, 0x00	; 0
     7ca:	30 e0       	ldi	r19, 0x00	; 0
     7cc:	40 e8       	ldi	r20, 0x80	; 128
     7ce:	5f eb       	ldi	r21, 0xBF	; 191
     7d0:	04 c0       	rjmp	.+8      	; 0x7da <set_degrees_TC0+0x118>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e8       	ldi	r20, 0x80	; 128
     7d8:	5f eb       	ldi	r21, 0xBF	; 191
	// +90ï¿½ --> 2ms
	// Ecuacion de la recta dados dos puntos
	if(degreesA >= min_degree && degreesA <= max_degree)	dutycicleA = (1.0/180.0)*(degreesA + 90.0) + 1.0;
	if(degreesB >= min_degree && degreesB <= max_degree)	dutycicleB = (1.0/180.0)*(degreesB + 90.0) + 1.0;
	
	set_dutycicle_ms_TC0(dutycicleA, dutycicleB);
     7da:	c3 01       	movw	r24, r6
     7dc:	b2 01       	movw	r22, r4
     7de:	0e 94 fe 06 	call	0xdfc	; 0xdfc <set_dutycicle_ms_TC0>
}
     7e2:	ff 90       	pop	r15
     7e4:	ef 90       	pop	r14
     7e6:	df 90       	pop	r13
     7e8:	cf 90       	pop	r12
     7ea:	bf 90       	pop	r11
     7ec:	af 90       	pop	r10
     7ee:	9f 90       	pop	r9
     7f0:	8f 90       	pop	r8
     7f2:	7f 90       	pop	r7
     7f4:	6f 90       	pop	r6
     7f6:	5f 90       	pop	r5
     7f8:	4f 90       	pop	r4
     7fa:	08 95       	ret

000007fc <get_degrees_TC0>:

void get_degrees_TC0(uint8_t F1, uint8_t F2){
	printf("Funcion get_degrees_TC0 no desarrollada\r\n");
     7fc:	8c e5       	ldi	r24, 0x5C	; 92
     7fe:	91 e0       	ldi	r25, 0x01	; 1
     800:	0e 94 b0 13 	call	0x2760	; 0x2760 <puts>
     804:	08 95       	ret

00000806 <set_TC1_for_servomotors>:
}


// ======================= TIMER 1 =============================
void set_TC1_for_servomotors(){
	T_servo_ms = 20;								// [ms] periodo del PWM para controlar los servomotores
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 ea       	ldi	r26, 0xA0	; 160
     80c:	b1 e4       	ldi	r27, 0x41	; 65
     80e:	80 93 5c 07 	sts	0x075C, r24	; 0x80075c <T_servo_ms>
     812:	90 93 5d 07 	sts	0x075D, r25	; 0x80075d <T_servo_ms+0x1>
     816:	a0 93 5e 07 	sts	0x075E, r26	; 0x80075e <T_servo_ms+0x2>
     81a:	b0 93 5f 07 	sts	0x075F, r27	; 0x80075f <T_servo_ms+0x3>
	configuracion_modo_timer1(FAST_PWM_ICRx);		// Fast PWM con ICR1 como TOP
     81e:	8e e0       	ldi	r24, 0x0E	; 14
     820:	0e 94 59 07 	call	0xeb2	; 0xeb2 <configuracion_modo_timer1>
	seleccion_prescaler_ms_timer1(T_servo_ms);		// Prescaler de acuerdo al periodo requerido
     824:	60 91 5c 07 	lds	r22, 0x075C	; 0x80075c <T_servo_ms>
     828:	70 91 5d 07 	lds	r23, 0x075D	; 0x80075d <T_servo_ms+0x1>
     82c:	80 91 5e 07 	lds	r24, 0x075E	; 0x80075e <T_servo_ms+0x2>
     830:	90 91 5f 07 	lds	r25, 0x075F	; 0x80075f <T_servo_ms+0x3>
     834:	0e 94 51 08 	call	0x10a2	; 0x10a2 <seleccion_prescaler_ms_timer1>
	set_ICR1_TOP(T_servo_ms);						// Configuracion de ICR1
     838:	60 91 5c 07 	lds	r22, 0x075C	; 0x80075c <T_servo_ms>
     83c:	70 91 5d 07 	lds	r23, 0x075D	; 0x80075d <T_servo_ms+0x1>
     840:	80 91 5e 07 	lds	r24, 0x075E	; 0x80075e <T_servo_ms+0x2>
     844:	90 91 5f 07 	lds	r25, 0x075F	; 0x80075f <T_servo_ms+0x3>
     848:	0e 94 3f 09 	call	0x127e	; 0x127e <set_ICR1_TOP>
	configuracion_modoSalidas_timer1(Clear, Clear);	// Salida OC1A en Clear, OC1B en Clear
     84c:	62 e0       	ldi	r22, 0x02	; 2
     84e:	82 e0       	ldi	r24, 0x02	; 2
     850:	0e 94 c3 08 	call	0x1186	; 0x1186 <configuracion_modoSalidas_timer1>
     854:	08 95       	ret

00000856 <set_degrees_TC1>:
}

void set_degrees_TC1(float degreesA, float degreesB){
     856:	4f 92       	push	r4
     858:	5f 92       	push	r5
     85a:	6f 92       	push	r6
     85c:	7f 92       	push	r7
     85e:	8f 92       	push	r8
     860:	9f 92       	push	r9
     862:	af 92       	push	r10
     864:	bf 92       	push	r11
     866:	cf 92       	push	r12
     868:	df 92       	push	r13
     86a:	ef 92       	push	r14
     86c:	ff 92       	push	r15
     86e:	2b 01       	movw	r4, r22
     870:	3c 01       	movw	r6, r24
     872:	49 01       	movw	r8, r18
     874:	5a 01       	movw	r10, r20
	float dutycicleB = -1.0;
	// Segun datasheet de SG90
	// -90ï¿½ --> 1ms
	// +90ï¿½ --> 2ms
	// Ecuacion de la recta dados dos puntos
	if(degreesA >= min_degree && degreesA <= max_degree)	dutycicleA = (1.0/180.0)*(degreesA + 90.0) + 1.0;
     876:	c0 90 55 07 	lds	r12, 0x0755	; 0x800755 <min_degree>
     87a:	d0 90 56 07 	lds	r13, 0x0756	; 0x800756 <min_degree+0x1>
     87e:	e0 90 57 07 	lds	r14, 0x0757	; 0x800757 <min_degree+0x2>
     882:	f0 90 58 07 	lds	r15, 0x0758	; 0x800758 <min_degree+0x3>
     886:	9b 01       	movw	r18, r22
     888:	ac 01       	movw	r20, r24
     88a:	c7 01       	movw	r24, r14
     88c:	b6 01       	movw	r22, r12
     88e:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__cmpsf2>
     892:	18 16       	cp	r1, r24
     894:	2c f1       	brlt	.+74     	; 0x8e0 <set_degrees_TC1+0x8a>
     896:	20 91 64 07 	lds	r18, 0x0764	; 0x800764 <max_degree>
     89a:	30 91 65 07 	lds	r19, 0x0765	; 0x800765 <max_degree+0x1>
     89e:	40 91 66 07 	lds	r20, 0x0766	; 0x800766 <max_degree+0x2>
     8a2:	50 91 67 07 	lds	r21, 0x0767	; 0x800767 <max_degree+0x3>
     8a6:	c3 01       	movw	r24, r6
     8a8:	b2 01       	movw	r22, r4
     8aa:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__cmpsf2>
     8ae:	18 16       	cp	r1, r24
     8b0:	04 f1       	brlt	.+64     	; 0x8f2 <set_degrees_TC1+0x9c>
     8b2:	20 e0       	ldi	r18, 0x00	; 0
     8b4:	30 e0       	ldi	r19, 0x00	; 0
     8b6:	44 eb       	ldi	r20, 0xB4	; 180
     8b8:	52 e4       	ldi	r21, 0x42	; 66
     8ba:	c3 01       	movw	r24, r6
     8bc:	b2 01       	movw	r22, r4
     8be:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <__addsf3>
     8c2:	21 e6       	ldi	r18, 0x61	; 97
     8c4:	3b e0       	ldi	r19, 0x0B	; 11
     8c6:	46 eb       	ldi	r20, 0xB6	; 182
     8c8:	5b e3       	ldi	r21, 0x3B	; 59
     8ca:	0e 94 c0 12 	call	0x2580	; 0x2580 <__mulsf3>
     8ce:	20 e0       	ldi	r18, 0x00	; 0
     8d0:	30 e0       	ldi	r19, 0x00	; 0
     8d2:	40 e8       	ldi	r20, 0x80	; 128
     8d4:	5f e3       	ldi	r21, 0x3F	; 63
     8d6:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <__addsf3>
     8da:	2b 01       	movw	r4, r22
     8dc:	3c 01       	movw	r6, r24
     8de:	11 c0       	rjmp	.+34     	; 0x902 <__stack+0x3>
	set_ICR1_TOP(T_servo_ms);						// Configuracion de ICR1
	configuracion_modoSalidas_timer1(Clear, Clear);	// Salida OC1A en Clear, OC1B en Clear
}

void set_degrees_TC1(float degreesA, float degreesB){
	float dutycicleA = -1.0;
     8e0:	0f 2e       	mov	r0, r31
     8e2:	41 2c       	mov	r4, r1
     8e4:	51 2c       	mov	r5, r1
     8e6:	f0 e8       	ldi	r31, 0x80	; 128
     8e8:	6f 2e       	mov	r6, r31
     8ea:	ff eb       	ldi	r31, 0xBF	; 191
     8ec:	7f 2e       	mov	r7, r31
     8ee:	f0 2d       	mov	r31, r0
     8f0:	08 c0       	rjmp	.+16     	; 0x902 <__stack+0x3>
     8f2:	0f 2e       	mov	r0, r31
     8f4:	41 2c       	mov	r4, r1
     8f6:	51 2c       	mov	r5, r1
     8f8:	f0 e8       	ldi	r31, 0x80	; 128
     8fa:	6f 2e       	mov	r6, r31
     8fc:	ff eb       	ldi	r31, 0xBF	; 191
     8fe:	7f 2e       	mov	r7, r31
     900:	f0 2d       	mov	r31, r0
	// Segun datasheet de SG90
	// -90ï¿½ --> 1ms
	// +90ï¿½ --> 2ms
	// Ecuacion de la recta dados dos puntos
	if(degreesA >= min_degree && degreesA <= max_degree)	dutycicleA = (1.0/180.0)*(degreesA + 90.0) + 1.0;
	if(degreesB >= min_degree && degreesB <= max_degree)	dutycicleB = (1.0/180.0)*(degreesB + 90.0) + 1.0;
     902:	a5 01       	movw	r20, r10
     904:	94 01       	movw	r18, r8
     906:	c7 01       	movw	r24, r14
     908:	b6 01       	movw	r22, r12
     90a:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__cmpsf2>
     90e:	18 16       	cp	r1, r24
     910:	2c f1       	brlt	.+74     	; 0x95c <__stack+0x5d>
     912:	20 91 64 07 	lds	r18, 0x0764	; 0x800764 <max_degree>
     916:	30 91 65 07 	lds	r19, 0x0765	; 0x800765 <max_degree+0x1>
     91a:	40 91 66 07 	lds	r20, 0x0766	; 0x800766 <max_degree+0x2>
     91e:	50 91 67 07 	lds	r21, 0x0767	; 0x800767 <max_degree+0x3>
     922:	c5 01       	movw	r24, r10
     924:	b4 01       	movw	r22, r8
     926:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__cmpsf2>
     92a:	18 16       	cp	r1, r24
     92c:	e4 f0       	brlt	.+56     	; 0x966 <__stack+0x67>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	44 eb       	ldi	r20, 0xB4	; 180
     934:	52 e4       	ldi	r21, 0x42	; 66
     936:	c5 01       	movw	r24, r10
     938:	b4 01       	movw	r22, r8
     93a:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <__addsf3>
     93e:	21 e6       	ldi	r18, 0x61	; 97
     940:	3b e0       	ldi	r19, 0x0B	; 11
     942:	46 eb       	ldi	r20, 0xB6	; 182
     944:	5b e3       	ldi	r21, 0x3B	; 59
     946:	0e 94 c0 12 	call	0x2580	; 0x2580 <__mulsf3>
     94a:	20 e0       	ldi	r18, 0x00	; 0
     94c:	30 e0       	ldi	r19, 0x00	; 0
     94e:	40 e8       	ldi	r20, 0x80	; 128
     950:	5f e3       	ldi	r21, 0x3F	; 63
     952:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <__addsf3>
     956:	9b 01       	movw	r18, r22
     958:	ac 01       	movw	r20, r24
     95a:	09 c0       	rjmp	.+18     	; 0x96e <__stack+0x6f>
	configuracion_modoSalidas_timer1(Clear, Clear);	// Salida OC1A en Clear, OC1B en Clear
}

void set_degrees_TC1(float degreesA, float degreesB){
	float dutycicleA = -1.0;
	float dutycicleB = -1.0;
     95c:	20 e0       	ldi	r18, 0x00	; 0
     95e:	30 e0       	ldi	r19, 0x00	; 0
     960:	40 e8       	ldi	r20, 0x80	; 128
     962:	5f eb       	ldi	r21, 0xBF	; 191
     964:	04 c0       	rjmp	.+8      	; 0x96e <__stack+0x6f>
     966:	20 e0       	ldi	r18, 0x00	; 0
     968:	30 e0       	ldi	r19, 0x00	; 0
     96a:	40 e8       	ldi	r20, 0x80	; 128
     96c:	5f eb       	ldi	r21, 0xBF	; 191
	// +90ï¿½ --> 2ms
	// Ecuacion de la recta dados dos puntos
	if(degreesA >= min_degree && degreesA <= max_degree)	dutycicleA = (1.0/180.0)*(degreesA + 90.0) + 1.0;
	if(degreesB >= min_degree && degreesB <= max_degree)	dutycicleB = (1.0/180.0)*(degreesB + 90.0) + 1.0;
		
	set_dutycicle_ms_TC1(dutycicleA, dutycicleB);
     96e:	c3 01       	movw	r24, r6
     970:	b2 01       	movw	r22, r4
     972:	0e 94 81 09 	call	0x1302	; 0x1302 <set_dutycicle_ms_TC1>
}
     976:	ff 90       	pop	r15
     978:	ef 90       	pop	r14
     97a:	df 90       	pop	r13
     97c:	cf 90       	pop	r12
     97e:	bf 90       	pop	r11
     980:	af 90       	pop	r10
     982:	9f 90       	pop	r9
     984:	8f 90       	pop	r8
     986:	7f 90       	pop	r7
     988:	6f 90       	pop	r6
     98a:	5f 90       	pop	r5
     98c:	4f 90       	pop	r4
     98e:	08 95       	ret

00000990 <get_degrees_TC1>:

void get_degrees_TC1(uint8_t F1, uint8_t F2){
	printf("Funcion get_degrees_TC1 no desarrollada\r\n");
     990:	85 e8       	ldi	r24, 0x85	; 133
     992:	91 e0       	ldi	r25, 0x01	; 1
     994:	0e 94 b0 13 	call	0x2760	; 0x2760 <puts>
     998:	08 95       	ret

0000099a <set_TC2_for_servomotors>:
}

// ======================= TIMER 2 =============================
void set_TC2_for_servomotors(){
	T_servo_ms = 16;									// [ms] periodo del PWM para controlar los servomotores
     99a:	80 e0       	ldi	r24, 0x00	; 0
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	a0 e8       	ldi	r26, 0x80	; 128
     9a0:	b1 e4       	ldi	r27, 0x41	; 65
     9a2:	80 93 5c 07 	sts	0x075C, r24	; 0x80075c <T_servo_ms>
     9a6:	90 93 5d 07 	sts	0x075D, r25	; 0x80075d <T_servo_ms+0x1>
     9aa:	a0 93 5e 07 	sts	0x075E, r26	; 0x80075e <T_servo_ms+0x2>
     9ae:	b0 93 5f 07 	sts	0x075F, r27	; 0x80075f <T_servo_ms+0x3>
	configuracion_modo_timer2(FAST_PWM_8b);				// Fast PWM con 0xFF (255) como TOP
     9b2:	83 e0       	ldi	r24, 0x03	; 3
     9b4:	0e 94 00 0a 	call	0x1400	; 0x1400 <configuracion_modo_timer2>
	seleccion_prescaler_ms_timer2(T_servo_ms);			// Prescaler de acuerdo al periodo requerido
     9b8:	60 91 5c 07 	lds	r22, 0x075C	; 0x80075c <T_servo_ms>
     9bc:	70 91 5d 07 	lds	r23, 0x075D	; 0x80075d <T_servo_ms+0x1>
     9c0:	80 91 5e 07 	lds	r24, 0x075E	; 0x80075e <T_servo_ms+0x2>
     9c4:	90 91 5f 07 	lds	r25, 0x075F	; 0x80075f <T_servo_ms+0x3>
     9c8:	0e 94 ba 0a 	call	0x1574	; 0x1574 <seleccion_prescaler_ms_timer2>
	configuracion_modoSalidas_timer2(Clear, Disconnected);		// Salida OC2A en Clear, OC2B en Off
     9cc:	60 e0       	ldi	r22, 0x00	; 0
     9ce:	82 e0       	ldi	r24, 0x02	; 2
     9d0:	0e 94 4e 0b 	call	0x169c	; 0x169c <configuracion_modoSalidas_timer2>
     9d4:	08 95       	ret

000009d6 <set_degrees_TC2>:
}



void set_degrees_TC2(float degreesA, float degreesB){
     9d6:	4f 92       	push	r4
     9d8:	5f 92       	push	r5
     9da:	6f 92       	push	r6
     9dc:	7f 92       	push	r7
     9de:	8f 92       	push	r8
     9e0:	9f 92       	push	r9
     9e2:	af 92       	push	r10
     9e4:	bf 92       	push	r11
     9e6:	cf 92       	push	r12
     9e8:	df 92       	push	r13
     9ea:	ef 92       	push	r14
     9ec:	ff 92       	push	r15
     9ee:	2b 01       	movw	r4, r22
     9f0:	3c 01       	movw	r6, r24
     9f2:	49 01       	movw	r8, r18
     9f4:	5a 01       	movw	r10, r20
	float dutycicleB = -1.0;
	// Segun datasheet de SG90
	// -90ï¿½ --> 1ms
	// +90ï¿½ --> 2ms
	// Ecuacion de la recta dados dos puntos
	if(degreesA >= min_degree && degreesA <= max_degree)	dutycicleA = (1.0/180.0)*(degreesA + 90.0) + 1.0;
     9f6:	c0 90 55 07 	lds	r12, 0x0755	; 0x800755 <min_degree>
     9fa:	d0 90 56 07 	lds	r13, 0x0756	; 0x800756 <min_degree+0x1>
     9fe:	e0 90 57 07 	lds	r14, 0x0757	; 0x800757 <min_degree+0x2>
     a02:	f0 90 58 07 	lds	r15, 0x0758	; 0x800758 <min_degree+0x3>
     a06:	9b 01       	movw	r18, r22
     a08:	ac 01       	movw	r20, r24
     a0a:	c7 01       	movw	r24, r14
     a0c:	b6 01       	movw	r22, r12
     a0e:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__cmpsf2>
     a12:	18 16       	cp	r1, r24
     a14:	2c f1       	brlt	.+74     	; 0xa60 <set_degrees_TC2+0x8a>
     a16:	20 91 64 07 	lds	r18, 0x0764	; 0x800764 <max_degree>
     a1a:	30 91 65 07 	lds	r19, 0x0765	; 0x800765 <max_degree+0x1>
     a1e:	40 91 66 07 	lds	r20, 0x0766	; 0x800766 <max_degree+0x2>
     a22:	50 91 67 07 	lds	r21, 0x0767	; 0x800767 <max_degree+0x3>
     a26:	c3 01       	movw	r24, r6
     a28:	b2 01       	movw	r22, r4
     a2a:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__cmpsf2>
     a2e:	18 16       	cp	r1, r24
     a30:	04 f1       	brlt	.+64     	; 0xa72 <set_degrees_TC2+0x9c>
     a32:	20 e0       	ldi	r18, 0x00	; 0
     a34:	30 e0       	ldi	r19, 0x00	; 0
     a36:	44 eb       	ldi	r20, 0xB4	; 180
     a38:	52 e4       	ldi	r21, 0x42	; 66
     a3a:	c3 01       	movw	r24, r6
     a3c:	b2 01       	movw	r22, r4
     a3e:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <__addsf3>
     a42:	21 e6       	ldi	r18, 0x61	; 97
     a44:	3b e0       	ldi	r19, 0x0B	; 11
     a46:	46 eb       	ldi	r20, 0xB6	; 182
     a48:	5b e3       	ldi	r21, 0x3B	; 59
     a4a:	0e 94 c0 12 	call	0x2580	; 0x2580 <__mulsf3>
     a4e:	20 e0       	ldi	r18, 0x00	; 0
     a50:	30 e0       	ldi	r19, 0x00	; 0
     a52:	40 e8       	ldi	r20, 0x80	; 128
     a54:	5f e3       	ldi	r21, 0x3F	; 63
     a56:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <__addsf3>
     a5a:	2b 01       	movw	r4, r22
     a5c:	3c 01       	movw	r6, r24
     a5e:	11 c0       	rjmp	.+34     	; 0xa82 <set_degrees_TC2+0xac>
}



void set_degrees_TC2(float degreesA, float degreesB){
	float dutycicleA = -1.0;
     a60:	0f 2e       	mov	r0, r31
     a62:	41 2c       	mov	r4, r1
     a64:	51 2c       	mov	r5, r1
     a66:	f0 e8       	ldi	r31, 0x80	; 128
     a68:	6f 2e       	mov	r6, r31
     a6a:	ff eb       	ldi	r31, 0xBF	; 191
     a6c:	7f 2e       	mov	r7, r31
     a6e:	f0 2d       	mov	r31, r0
     a70:	08 c0       	rjmp	.+16     	; 0xa82 <set_degrees_TC2+0xac>
     a72:	0f 2e       	mov	r0, r31
     a74:	41 2c       	mov	r4, r1
     a76:	51 2c       	mov	r5, r1
     a78:	f0 e8       	ldi	r31, 0x80	; 128
     a7a:	6f 2e       	mov	r6, r31
     a7c:	ff eb       	ldi	r31, 0xBF	; 191
     a7e:	7f 2e       	mov	r7, r31
     a80:	f0 2d       	mov	r31, r0
	// Segun datasheet de SG90
	// -90ï¿½ --> 1ms
	// +90ï¿½ --> 2ms
	// Ecuacion de la recta dados dos puntos
	if(degreesA >= min_degree && degreesA <= max_degree)	dutycicleA = (1.0/180.0)*(degreesA + 90.0) + 1.0;
	if(degreesB >= min_degree && degreesB <= max_degree)	dutycicleB = (1.0/180.0)*(degreesB + 90.0) + 1.0;
     a82:	a5 01       	movw	r20, r10
     a84:	94 01       	movw	r18, r8
     a86:	c7 01       	movw	r24, r14
     a88:	b6 01       	movw	r22, r12
     a8a:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__cmpsf2>
     a8e:	18 16       	cp	r1, r24
     a90:	2c f1       	brlt	.+74     	; 0xadc <set_degrees_TC2+0x106>
     a92:	20 91 64 07 	lds	r18, 0x0764	; 0x800764 <max_degree>
     a96:	30 91 65 07 	lds	r19, 0x0765	; 0x800765 <max_degree+0x1>
     a9a:	40 91 66 07 	lds	r20, 0x0766	; 0x800766 <max_degree+0x2>
     a9e:	50 91 67 07 	lds	r21, 0x0767	; 0x800767 <max_degree+0x3>
     aa2:	c5 01       	movw	r24, r10
     aa4:	b4 01       	movw	r22, r8
     aa6:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__cmpsf2>
     aaa:	18 16       	cp	r1, r24
     aac:	e4 f0       	brlt	.+56     	; 0xae6 <set_degrees_TC2+0x110>
     aae:	20 e0       	ldi	r18, 0x00	; 0
     ab0:	30 e0       	ldi	r19, 0x00	; 0
     ab2:	44 eb       	ldi	r20, 0xB4	; 180
     ab4:	52 e4       	ldi	r21, 0x42	; 66
     ab6:	c5 01       	movw	r24, r10
     ab8:	b4 01       	movw	r22, r8
     aba:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <__addsf3>
     abe:	21 e6       	ldi	r18, 0x61	; 97
     ac0:	3b e0       	ldi	r19, 0x0B	; 11
     ac2:	46 eb       	ldi	r20, 0xB6	; 182
     ac4:	5b e3       	ldi	r21, 0x3B	; 59
     ac6:	0e 94 c0 12 	call	0x2580	; 0x2580 <__mulsf3>
     aca:	20 e0       	ldi	r18, 0x00	; 0
     acc:	30 e0       	ldi	r19, 0x00	; 0
     ace:	40 e8       	ldi	r20, 0x80	; 128
     ad0:	5f e3       	ldi	r21, 0x3F	; 63
     ad2:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <__addsf3>
     ad6:	9b 01       	movw	r18, r22
     ad8:	ac 01       	movw	r20, r24
     ada:	09 c0       	rjmp	.+18     	; 0xaee <set_degrees_TC2+0x118>



void set_degrees_TC2(float degreesA, float degreesB){
	float dutycicleA = -1.0;
	float dutycicleB = -1.0;
     adc:	20 e0       	ldi	r18, 0x00	; 0
     ade:	30 e0       	ldi	r19, 0x00	; 0
     ae0:	40 e8       	ldi	r20, 0x80	; 128
     ae2:	5f eb       	ldi	r21, 0xBF	; 191
     ae4:	04 c0       	rjmp	.+8      	; 0xaee <set_degrees_TC2+0x118>
     ae6:	20 e0       	ldi	r18, 0x00	; 0
     ae8:	30 e0       	ldi	r19, 0x00	; 0
     aea:	40 e8       	ldi	r20, 0x80	; 128
     aec:	5f eb       	ldi	r21, 0xBF	; 191
	// +90ï¿½ --> 2ms
	// Ecuacion de la recta dados dos puntos
	if(degreesA >= min_degree && degreesA <= max_degree)	dutycicleA = (1.0/180.0)*(degreesA + 90.0) + 1.0;
	if(degreesB >= min_degree && degreesB <= max_degree)	dutycicleB = (1.0/180.0)*(degreesB + 90.0) + 1.0;
	
	set_dutycicle_ms_TC2(dutycicleA, dutycicleB);
     aee:	c3 01       	movw	r24, r6
     af0:	b2 01       	movw	r22, r4
     af2:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <set_dutycicle_ms_TC2>
}
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	df 90       	pop	r13
     afc:	cf 90       	pop	r12
     afe:	bf 90       	pop	r11
     b00:	af 90       	pop	r10
     b02:	9f 90       	pop	r9
     b04:	8f 90       	pop	r8
     b06:	7f 90       	pop	r7
     b08:	6f 90       	pop	r6
     b0a:	5f 90       	pop	r5
     b0c:	4f 90       	pop	r4
     b0e:	08 95       	ret

00000b10 <get_degrees_TC2>:

void get_degrees_TC2(uint8_t F1, uint8_t F2){
	printf("Funcion get_degrees_TC2 no desarrollada\r\n");
     b10:	8e ea       	ldi	r24, 0xAE	; 174
     b12:	91 e0       	ldi	r25, 0x01	; 1
     b14:	0e 94 b0 13 	call	0x2760	; 0x2760 <puts>
     b18:	08 95       	ret

00000b1a <configuracion_modo_timer0>:
		TIMSK2 |= (1<<OCIE2B);	// habilita la interrupcion
	}
	// Overflow
	if(overflow){
		TIFR2  |= (1<<TOV2);	// apaga el flag (se apagan con 1)
		TIMSK2 |= (1<<TOIE2);	// habilita la interrupcion
     b1a:	cf 93       	push	r28
     b1c:	c8 2f       	mov	r28, r24
     b1e:	1f 92       	push	r1
     b20:	8f 93       	push	r24
     b22:	87 ed       	ldi	r24, 0xD7	; 215
     b24:	91 e0       	ldi	r25, 0x01	; 1
     b26:	9f 93       	push	r25
     b28:	8f 93       	push	r24
     b2a:	0e 94 9a 13 	call	0x2734	; 0x2734 <printf>
     b2e:	84 b5       	in	r24, 0x24	; 36
     b30:	8c 7f       	andi	r24, 0xFC	; 252
     b32:	84 bd       	out	0x24, r24	; 36
     b34:	85 b5       	in	r24, 0x25	; 37
     b36:	87 7f       	andi	r24, 0xF7	; 247
     b38:	85 bd       	out	0x25, r24	; 37
     b3a:	0f 90       	pop	r0
     b3c:	0f 90       	pop	r0
     b3e:	0f 90       	pop	r0
     b40:	0f 90       	pop	r0
     b42:	c2 30       	cpi	r28, 0x02	; 2
     b44:	89 f0       	breq	.+34     	; 0xb68 <configuracion_modo_timer0+0x4e>
     b46:	28 f4       	brcc	.+10     	; 0xb52 <configuracion_modo_timer0+0x38>
     b48:	cc 23       	and	r28, r28
     b4a:	41 f1       	breq	.+80     	; 0xb9c <configuracion_modo_timer0+0x82>
     b4c:	c1 30       	cpi	r28, 0x01	; 1
     b4e:	41 f0       	breq	.+16     	; 0xb60 <configuracion_modo_timer0+0x46>
     b50:	21 c0       	rjmp	.+66     	; 0xb94 <configuracion_modo_timer0+0x7a>
     b52:	c5 30       	cpi	r28, 0x05	; 5
     b54:	89 f0       	breq	.+34     	; 0xb78 <configuracion_modo_timer0+0x5e>
     b56:	c7 30       	cpi	r28, 0x07	; 7
     b58:	b1 f0       	breq	.+44     	; 0xb86 <configuracion_modo_timer0+0x6c>
     b5a:	c3 30       	cpi	r28, 0x03	; 3
     b5c:	d9 f4       	brne	.+54     	; 0xb94 <configuracion_modo_timer0+0x7a>
     b5e:	08 c0       	rjmp	.+16     	; 0xb70 <configuracion_modo_timer0+0x56>
     b60:	84 b5       	in	r24, 0x24	; 36
     b62:	81 60       	ori	r24, 0x01	; 1
     b64:	84 bd       	out	0x24, r24	; 36
     b66:	1a c0       	rjmp	.+52     	; 0xb9c <configuracion_modo_timer0+0x82>
     b68:	84 b5       	in	r24, 0x24	; 36
     b6a:	82 60       	ori	r24, 0x02	; 2
     b6c:	84 bd       	out	0x24, r24	; 36
     b6e:	16 c0       	rjmp	.+44     	; 0xb9c <configuracion_modo_timer0+0x82>
     b70:	84 b5       	in	r24, 0x24	; 36
     b72:	83 60       	ori	r24, 0x03	; 3
     b74:	84 bd       	out	0x24, r24	; 36
     b76:	12 c0       	rjmp	.+36     	; 0xb9c <configuracion_modo_timer0+0x82>
     b78:	84 b5       	in	r24, 0x24	; 36
     b7a:	81 60       	ori	r24, 0x01	; 1
     b7c:	84 bd       	out	0x24, r24	; 36
     b7e:	85 b5       	in	r24, 0x25	; 37
     b80:	88 60       	ori	r24, 0x08	; 8
     b82:	85 bd       	out	0x25, r24	; 37
     b84:	0b c0       	rjmp	.+22     	; 0xb9c <configuracion_modo_timer0+0x82>
     b86:	84 b5       	in	r24, 0x24	; 36
     b88:	83 60       	ori	r24, 0x03	; 3
     b8a:	84 bd       	out	0x24, r24	; 36
     b8c:	85 b5       	in	r24, 0x25	; 37
     b8e:	88 60       	ori	r24, 0x08	; 8
     b90:	85 bd       	out	0x25, r24	; 37
     b92:	04 c0       	rjmp	.+8      	; 0xb9c <configuracion_modo_timer0+0x82>
     b94:	8c ee       	ldi	r24, 0xEC	; 236
     b96:	91 e0       	ldi	r25, 0x01	; 1
     b98:	0e 94 b0 13 	call	0x2760	; 0x2760 <puts>
     b9c:	cf 91       	pop	r28
     b9e:	08 95       	ret

00000ba0 <configuracion_prescaler_timer0>:
     ba0:	cf 93       	push	r28
     ba2:	df 93       	push	r29
     ba4:	ec 01       	movw	r28, r24
     ba6:	df 93       	push	r29
     ba8:	cf 93       	push	r28
     baa:	8a ef       	ldi	r24, 0xFA	; 250
     bac:	91 e0       	ldi	r25, 0x01	; 1
     bae:	9f 93       	push	r25
     bb0:	8f 93       	push	r24
     bb2:	0e 94 9a 13 	call	0x2734	; 0x2734 <printf>
     bb6:	85 b5       	in	r24, 0x25	; 37
     bb8:	88 7f       	andi	r24, 0xF8	; 248
     bba:	85 bd       	out	0x25, r24	; 37
     bbc:	0f 90       	pop	r0
     bbe:	0f 90       	pop	r0
     bc0:	0f 90       	pop	r0
     bc2:	0f 90       	pop	r0
     bc4:	c8 30       	cpi	r28, 0x08	; 8
     bc6:	d1 05       	cpc	r29, r1
     bc8:	d9 f0       	breq	.+54     	; 0xc00 <configuracion_prescaler_timer0+0x60>
     bca:	28 f4       	brcc	.+10     	; 0xbd6 <configuracion_prescaler_timer0+0x36>
     bcc:	20 97       	sbiw	r28, 0x00	; 0
     bce:	79 f0       	breq	.+30     	; 0xbee <configuracion_prescaler_timer0+0x4e>
     bd0:	21 97       	sbiw	r28, 0x01	; 1
     bd2:	91 f0       	breq	.+36     	; 0xbf8 <configuracion_prescaler_timer0+0x58>
     bd4:	25 c0       	rjmp	.+74     	; 0xc20 <configuracion_prescaler_timer0+0x80>
     bd6:	c1 15       	cp	r28, r1
     bd8:	81 e0       	ldi	r24, 0x01	; 1
     bda:	d8 07       	cpc	r29, r24
     bdc:	c9 f0       	breq	.+50     	; 0xc10 <configuracion_prescaler_timer0+0x70>
     bde:	c1 15       	cp	r28, r1
     be0:	84 e0       	ldi	r24, 0x04	; 4
     be2:	d8 07       	cpc	r29, r24
     be4:	c9 f0       	breq	.+50     	; 0xc18 <configuracion_prescaler_timer0+0x78>
     be6:	c0 34       	cpi	r28, 0x40	; 64
     be8:	d1 05       	cpc	r29, r1
     bea:	d1 f4       	brne	.+52     	; 0xc20 <configuracion_prescaler_timer0+0x80>
     bec:	0d c0       	rjmp	.+26     	; 0xc08 <configuracion_prescaler_timer0+0x68>
     bee:	8a e0       	ldi	r24, 0x0A	; 10
     bf0:	92 e0       	ldi	r25, 0x02	; 2
     bf2:	0e 94 b0 13 	call	0x2760	; 0x2760 <puts>
     bf6:	18 c0       	rjmp	.+48     	; 0xc28 <configuracion_prescaler_timer0+0x88>
     bf8:	85 b5       	in	r24, 0x25	; 37
     bfa:	81 60       	ori	r24, 0x01	; 1
     bfc:	85 bd       	out	0x25, r24	; 37
     bfe:	14 c0       	rjmp	.+40     	; 0xc28 <configuracion_prescaler_timer0+0x88>
     c00:	85 b5       	in	r24, 0x25	; 37
     c02:	82 60       	ori	r24, 0x02	; 2
     c04:	85 bd       	out	0x25, r24	; 37
     c06:	10 c0       	rjmp	.+32     	; 0xc28 <configuracion_prescaler_timer0+0x88>
     c08:	85 b5       	in	r24, 0x25	; 37
     c0a:	83 60       	ori	r24, 0x03	; 3
     c0c:	85 bd       	out	0x25, r24	; 37
     c0e:	0c c0       	rjmp	.+24     	; 0xc28 <configuracion_prescaler_timer0+0x88>
     c10:	85 b5       	in	r24, 0x25	; 37
     c12:	84 60       	ori	r24, 0x04	; 4
     c14:	85 bd       	out	0x25, r24	; 37
     c16:	08 c0       	rjmp	.+16     	; 0xc28 <configuracion_prescaler_timer0+0x88>
     c18:	85 b5       	in	r24, 0x25	; 37
     c1a:	85 60       	ori	r24, 0x05	; 5
     c1c:	85 bd       	out	0x25, r24	; 37
     c1e:	04 c0       	rjmp	.+8      	; 0xc28 <configuracion_prescaler_timer0+0x88>
     c20:	87 e1       	ldi	r24, 0x17	; 23
     c22:	92 e0       	ldi	r25, 0x02	; 2
     c24:	0e 94 b0 13 	call	0x2760	; 0x2760 <puts>
     c28:	df 91       	pop	r29
     c2a:	cf 91       	pop	r28
     c2c:	08 95       	ret

00000c2e <seleccion_prescaler_ms_timer0>:
     c2e:	cf 92       	push	r12
     c30:	df 92       	push	r13
     c32:	ef 92       	push	r14
     c34:	ff 92       	push	r15
     c36:	10 92 8c 07 	sts	0x078C, r1	; 0x80078c <prescaler_TC0+0x1>
     c3a:	10 92 8b 07 	sts	0x078B, r1	; 0x80078b <prescaler_TC0>
     c3e:	20 e0       	ldi	r18, 0x00	; 0
     c40:	30 e0       	ldi	r19, 0x00	; 0
     c42:	4a e7       	ldi	r20, 0x7A	; 122
     c44:	54 e4       	ldi	r21, 0x44	; 68
     c46:	0e 94 61 11 	call	0x22c2	; 0x22c2 <__divsf3>
     c4a:	6b 01       	movw	r12, r22
     c4c:	7c 01       	movw	r14, r24
     c4e:	2d eb       	ldi	r18, 0xBD	; 189
     c50:	37 e3       	ldi	r19, 0x37	; 55
     c52:	46 e8       	ldi	r20, 0x86	; 134
     c54:	57 e3       	ldi	r21, 0x37	; 55
     c56:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__cmpsf2>
     c5a:	18 16       	cp	r1, r24
     c5c:	3c f0       	brlt	.+14     	; 0xc6c <seleccion_prescaler_ms_timer0+0x3e>
     c5e:	81 e0       	ldi	r24, 0x01	; 1
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	90 93 8c 07 	sts	0x078C, r25	; 0x80078c <prescaler_TC0+0x1>
     c66:	80 93 8b 07 	sts	0x078B, r24	; 0x80078b <prescaler_TC0>
     c6a:	48 c0       	rjmp	.+144    	; 0xcfc <seleccion_prescaler_ms_timer0+0xce>
     c6c:	2d eb       	ldi	r18, 0xBD	; 189
     c6e:	37 e3       	ldi	r19, 0x37	; 55
     c70:	46 e0       	ldi	r20, 0x06	; 6
     c72:	59 e3       	ldi	r21, 0x39	; 57
     c74:	c7 01       	movw	r24, r14
     c76:	b6 01       	movw	r22, r12
     c78:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__cmpsf2>
     c7c:	18 16       	cp	r1, r24
     c7e:	3c f0       	brlt	.+14     	; 0xc8e <seleccion_prescaler_ms_timer0+0x60>
     c80:	88 e0       	ldi	r24, 0x08	; 8
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	90 93 8c 07 	sts	0x078C, r25	; 0x80078c <prescaler_TC0+0x1>
     c88:	80 93 8b 07 	sts	0x078B, r24	; 0x80078b <prescaler_TC0>
     c8c:	37 c0       	rjmp	.+110    	; 0xcfc <seleccion_prescaler_ms_timer0+0xce>
     c8e:	2d eb       	ldi	r18, 0xBD	; 189
     c90:	37 e3       	ldi	r19, 0x37	; 55
     c92:	46 e8       	ldi	r20, 0x86	; 134
     c94:	5a e3       	ldi	r21, 0x3A	; 58
     c96:	c7 01       	movw	r24, r14
     c98:	b6 01       	movw	r22, r12
     c9a:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__cmpsf2>
     c9e:	18 16       	cp	r1, r24
     ca0:	3c f0       	brlt	.+14     	; 0xcb0 <seleccion_prescaler_ms_timer0+0x82>
     ca2:	80 e4       	ldi	r24, 0x40	; 64
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	90 93 8c 07 	sts	0x078C, r25	; 0x80078c <prescaler_TC0+0x1>
     caa:	80 93 8b 07 	sts	0x078B, r24	; 0x80078b <prescaler_TC0>
     cae:	26 c0       	rjmp	.+76     	; 0xcfc <seleccion_prescaler_ms_timer0+0xce>
     cb0:	2d eb       	ldi	r18, 0xBD	; 189
     cb2:	37 e3       	ldi	r19, 0x37	; 55
     cb4:	46 e8       	ldi	r20, 0x86	; 134
     cb6:	5b e3       	ldi	r21, 0x3B	; 59
     cb8:	c7 01       	movw	r24, r14
     cba:	b6 01       	movw	r22, r12
     cbc:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__cmpsf2>
     cc0:	18 16       	cp	r1, r24
     cc2:	3c f0       	brlt	.+14     	; 0xcd2 <seleccion_prescaler_ms_timer0+0xa4>
     cc4:	80 e0       	ldi	r24, 0x00	; 0
     cc6:	91 e0       	ldi	r25, 0x01	; 1
     cc8:	90 93 8c 07 	sts	0x078C, r25	; 0x80078c <prescaler_TC0+0x1>
     ccc:	80 93 8b 07 	sts	0x078B, r24	; 0x80078b <prescaler_TC0>
     cd0:	15 c0       	rjmp	.+42     	; 0xcfc <seleccion_prescaler_ms_timer0+0xce>
     cd2:	2d eb       	ldi	r18, 0xBD	; 189
     cd4:	37 e3       	ldi	r19, 0x37	; 55
     cd6:	46 e8       	ldi	r20, 0x86	; 134
     cd8:	5c e3       	ldi	r21, 0x3C	; 60
     cda:	c7 01       	movw	r24, r14
     cdc:	b6 01       	movw	r22, r12
     cde:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__cmpsf2>
     ce2:	18 16       	cp	r1, r24
     ce4:	3c f0       	brlt	.+14     	; 0xcf4 <seleccion_prescaler_ms_timer0+0xc6>
     ce6:	80 e0       	ldi	r24, 0x00	; 0
     ce8:	94 e0       	ldi	r25, 0x04	; 4
     cea:	90 93 8c 07 	sts	0x078C, r25	; 0x80078c <prescaler_TC0+0x1>
     cee:	80 93 8b 07 	sts	0x078B, r24	; 0x80078b <prescaler_TC0>
     cf2:	04 c0       	rjmp	.+8      	; 0xcfc <seleccion_prescaler_ms_timer0+0xce>
     cf4:	84 e4       	ldi	r24, 0x44	; 68
     cf6:	92 e0       	ldi	r25, 0x02	; 2
     cf8:	0e 94 b0 13 	call	0x2760	; 0x2760 <puts>
     cfc:	80 91 8b 07 	lds	r24, 0x078B	; 0x80078b <prescaler_TC0>
     d00:	90 91 8c 07 	lds	r25, 0x078C	; 0x80078c <prescaler_TC0+0x1>
     d04:	0e 94 d0 05 	call	0xba0	; 0xba0 <configuracion_prescaler_timer0>
     d08:	ff 90       	pop	r15
     d0a:	ef 90       	pop	r14
     d0c:	df 90       	pop	r13
     d0e:	cf 90       	pop	r12
     d10:	08 95       	ret

00000d12 <configuracion_modoSalidas_timer0>:
     d12:	cf 93       	push	r28
     d14:	c6 2f       	mov	r28, r22
     d16:	94 b5       	in	r25, 0x24	; 36
     d18:	9f 73       	andi	r25, 0x3F	; 63
     d1a:	94 bd       	out	0x24, r25	; 36
     d1c:	9a b1       	in	r25, 0x0a	; 10
     d1e:	9f 7b       	andi	r25, 0xBF	; 191
     d20:	9a b9       	out	0x0a, r25	; 10
     d22:	81 30       	cpi	r24, 0x01	; 1
     d24:	59 f0       	breq	.+22     	; 0xd3c <configuracion_modoSalidas_timer0+0x2a>
     d26:	28 f0       	brcs	.+10     	; 0xd32 <configuracion_modoSalidas_timer0+0x20>
     d28:	82 30       	cpi	r24, 0x02	; 2
     d2a:	99 f0       	breq	.+38     	; 0xd52 <configuracion_modoSalidas_timer0+0x40>
     d2c:	83 30       	cpi	r24, 0x03	; 3
     d2e:	e1 f0       	breq	.+56     	; 0xd68 <configuracion_modoSalidas_timer0+0x56>
     d30:	26 c0       	rjmp	.+76     	; 0xd7e <configuracion_modoSalidas_timer0+0x6c>
     d32:	88 e5       	ldi	r24, 0x58	; 88
     d34:	92 e0       	ldi	r25, 0x02	; 2
     d36:	0e 94 b0 13 	call	0x2760	; 0x2760 <puts>
     d3a:	25 c0       	rjmp	.+74     	; 0xd86 <configuracion_modoSalidas_timer0+0x74>
     d3c:	82 e6       	ldi	r24, 0x62	; 98
     d3e:	92 e0       	ldi	r25, 0x02	; 2
     d40:	0e 94 b0 13 	call	0x2760	; 0x2760 <puts>
     d44:	8a b1       	in	r24, 0x0a	; 10
     d46:	80 64       	ori	r24, 0x40	; 64
     d48:	8a b9       	out	0x0a, r24	; 10
     d4a:	84 b5       	in	r24, 0x24	; 36
     d4c:	80 64       	ori	r24, 0x40	; 64
     d4e:	84 bd       	out	0x24, r24	; 36
     d50:	1a c0       	rjmp	.+52     	; 0xd86 <configuracion_modoSalidas_timer0+0x74>
     d52:	8f e6       	ldi	r24, 0x6F	; 111
     d54:	92 e0       	ldi	r25, 0x02	; 2
     d56:	0e 94 b0 13 	call	0x2760	; 0x2760 <puts>
     d5a:	8a b1       	in	r24, 0x0a	; 10
     d5c:	80 64       	ori	r24, 0x40	; 64
     d5e:	8a b9       	out	0x0a, r24	; 10
     d60:	84 b5       	in	r24, 0x24	; 36
     d62:	80 68       	ori	r24, 0x80	; 128
     d64:	84 bd       	out	0x24, r24	; 36
     d66:	0f c0       	rjmp	.+30     	; 0xd86 <configuracion_modoSalidas_timer0+0x74>
     d68:	8b e7       	ldi	r24, 0x7B	; 123
     d6a:	92 e0       	ldi	r25, 0x02	; 2
     d6c:	0e 94 b0 13 	call	0x2760	; 0x2760 <puts>
     d70:	8a b1       	in	r24, 0x0a	; 10
     d72:	80 64       	ori	r24, 0x40	; 64
     d74:	8a b9       	out	0x0a, r24	; 10
     d76:	84 b5       	in	r24, 0x24	; 36
     d78:	80 6c       	ori	r24, 0xC0	; 192
     d7a:	84 bd       	out	0x24, r24	; 36
     d7c:	04 c0       	rjmp	.+8      	; 0xd86 <configuracion_modoSalidas_timer0+0x74>
     d7e:	85 e8       	ldi	r24, 0x85	; 133
     d80:	92 e0       	ldi	r25, 0x02	; 2
     d82:	0e 94 b0 13 	call	0x2760	; 0x2760 <puts>
     d86:	c1 30       	cpi	r28, 0x01	; 1
     d88:	59 f0       	breq	.+22     	; 0xda0 <configuracion_modoSalidas_timer0+0x8e>
     d8a:	28 f0       	brcs	.+10     	; 0xd96 <configuracion_modoSalidas_timer0+0x84>
     d8c:	c2 30       	cpi	r28, 0x02	; 2
     d8e:	99 f0       	breq	.+38     	; 0xdb6 <configuracion_modoSalidas_timer0+0xa4>
     d90:	c3 30       	cpi	r28, 0x03	; 3
     d92:	e1 f0       	breq	.+56     	; 0xdcc <configuracion_modoSalidas_timer0+0xba>
     d94:	26 c0       	rjmp	.+76     	; 0xde2 <configuracion_modoSalidas_timer0+0xd0>
     d96:	83 ea       	ldi	r24, 0xA3	; 163
     d98:	92 e0       	ldi	r25, 0x02	; 2
     d9a:	0e 94 b0 13 	call	0x2760	; 0x2760 <puts>
     d9e:	25 c0       	rjmp	.+74     	; 0xdea <configuracion_modoSalidas_timer0+0xd8>
     da0:	8f ea       	ldi	r24, 0xAF	; 175
     da2:	92 e0       	ldi	r25, 0x02	; 2
     da4:	0e 94 b0 13 	call	0x2760	; 0x2760 <puts>
     da8:	8a b1       	in	r24, 0x0a	; 10
     daa:	80 62       	ori	r24, 0x20	; 32
     dac:	8a b9       	out	0x0a, r24	; 10
     dae:	84 b5       	in	r24, 0x24	; 36
     db0:	80 61       	ori	r24, 0x10	; 16
     db2:	84 bd       	out	0x24, r24	; 36
     db4:	1a c0       	rjmp	.+52     	; 0xdea <configuracion_modoSalidas_timer0+0xd8>
     db6:	8e eb       	ldi	r24, 0xBE	; 190
     db8:	92 e0       	ldi	r25, 0x02	; 2
     dba:	0e 94 b0 13 	call	0x2760	; 0x2760 <puts>
     dbe:	8a b1       	in	r24, 0x0a	; 10
     dc0:	80 62       	ori	r24, 0x20	; 32
     dc2:	8a b9       	out	0x0a, r24	; 10
     dc4:	84 b5       	in	r24, 0x24	; 36
     dc6:	80 62       	ori	r24, 0x20	; 32
     dc8:	84 bd       	out	0x24, r24	; 36
     dca:	0f c0       	rjmp	.+30     	; 0xdea <configuracion_modoSalidas_timer0+0xd8>
     dcc:	8c ec       	ldi	r24, 0xCC	; 204
     dce:	92 e0       	ldi	r25, 0x02	; 2
     dd0:	0e 94 b0 13 	call	0x2760	; 0x2760 <puts>
     dd4:	8a b1       	in	r24, 0x0a	; 10
     dd6:	80 62       	ori	r24, 0x20	; 32
     dd8:	8a b9       	out	0x0a, r24	; 10
     dda:	84 b5       	in	r24, 0x24	; 36
     ddc:	80 63       	ori	r24, 0x30	; 48
     dde:	84 bd       	out	0x24, r24	; 36
     de0:	04 c0       	rjmp	.+8      	; 0xdea <configuracion_modoSalidas_timer0+0xd8>
     de2:	88 ed       	ldi	r24, 0xD8	; 216
     de4:	92 e0       	ldi	r25, 0x02	; 2
     de6:	0e 94 b0 13 	call	0x2760	; 0x2760 <puts>
     dea:	cf 91       	pop	r28
     dec:	08 95       	ret

00000dee <set_OCR0>:
     dee:	8f 3f       	cpi	r24, 0xFF	; 255
     df0:	09 f0       	breq	.+2      	; 0xdf4 <set_OCR0+0x6>
     df2:	87 bd       	out	0x27, r24	; 39
     df4:	6f 3f       	cpi	r22, 0xFF	; 255
     df6:	09 f0       	breq	.+2      	; 0xdfa <set_OCR0+0xc>
     df8:	68 bd       	out	0x28, r22	; 40
     dfa:	08 95       	ret

00000dfc <set_dutycicle_ms_TC0>:
     dfc:	8f 92       	push	r8
     dfe:	9f 92       	push	r9
     e00:	af 92       	push	r10
     e02:	bf 92       	push	r11
     e04:	cf 92       	push	r12
     e06:	df 92       	push	r13
     e08:	ef 92       	push	r14
     e0a:	ff 92       	push	r15
     e0c:	cf 93       	push	r28
     e0e:	4b 01       	movw	r8, r22
     e10:	5c 01       	movw	r10, r24
     e12:	69 01       	movw	r12, r18
     e14:	7a 01       	movw	r14, r20
     e16:	20 e0       	ldi	r18, 0x00	; 0
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	a9 01       	movw	r20, r18
     e1c:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__cmpsf2>
     e20:	88 23       	and	r24, r24
     e22:	c4 f0       	brlt	.+48     	; 0xe54 <set_dutycicle_ms_TC0+0x58>
     e24:	20 e0       	ldi	r18, 0x00	; 0
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	40 e8       	ldi	r20, 0x80	; 128
     e2a:	5f e3       	ldi	r21, 0x3F	; 63
     e2c:	c5 01       	movw	r24, r10
     e2e:	b4 01       	movw	r22, r8
     e30:	0e 94 ef 10 	call	0x21de	; 0x21de <__subsf3>
     e34:	20 e0       	ldi	r18, 0x00	; 0
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	48 e8       	ldi	r20, 0x88	; 136
     e3a:	51 e4       	ldi	r21, 0x41	; 65
     e3c:	0e 94 c0 12 	call	0x2580	; 0x2580 <__mulsf3>
     e40:	20 e0       	ldi	r18, 0x00	; 0
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	40 e6       	ldi	r20, 0x60	; 96
     e46:	51 e4       	ldi	r21, 0x41	; 65
     e48:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <__addsf3>
     e4c:	0e 94 da 11 	call	0x23b4	; 0x23b4 <__fixunssfsi>
     e50:	c6 2f       	mov	r28, r22
     e52:	01 c0       	rjmp	.+2      	; 0xe56 <set_dutycicle_ms_TC0+0x5a>
     e54:	cf ef       	ldi	r28, 0xFF	; 255
     e56:	20 e0       	ldi	r18, 0x00	; 0
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	a9 01       	movw	r20, r18
     e5c:	c7 01       	movw	r24, r14
     e5e:	b6 01       	movw	r22, r12
     e60:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__cmpsf2>
     e64:	88 23       	and	r24, r24
     e66:	bc f0       	brlt	.+46     	; 0xe96 <set_dutycicle_ms_TC0+0x9a>
     e68:	20 e0       	ldi	r18, 0x00	; 0
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	40 e8       	ldi	r20, 0x80	; 128
     e6e:	5f e3       	ldi	r21, 0x3F	; 63
     e70:	c7 01       	movw	r24, r14
     e72:	b6 01       	movw	r22, r12
     e74:	0e 94 ef 10 	call	0x21de	; 0x21de <__subsf3>
     e78:	20 e0       	ldi	r18, 0x00	; 0
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	48 e8       	ldi	r20, 0x88	; 136
     e7e:	51 e4       	ldi	r21, 0x41	; 65
     e80:	0e 94 c0 12 	call	0x2580	; 0x2580 <__mulsf3>
     e84:	20 e0       	ldi	r18, 0x00	; 0
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	40 e6       	ldi	r20, 0x60	; 96
     e8a:	51 e4       	ldi	r21, 0x41	; 65
     e8c:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <__addsf3>
     e90:	0e 94 da 11 	call	0x23b4	; 0x23b4 <__fixunssfsi>
     e94:	01 c0       	rjmp	.+2      	; 0xe98 <set_dutycicle_ms_TC0+0x9c>
     e96:	6f ef       	ldi	r22, 0xFF	; 255
     e98:	8c 2f       	mov	r24, r28
     e9a:	0e 94 f7 06 	call	0xdee	; 0xdee <set_OCR0>
     e9e:	cf 91       	pop	r28
     ea0:	ff 90       	pop	r15
     ea2:	ef 90       	pop	r14
     ea4:	df 90       	pop	r13
     ea6:	cf 90       	pop	r12
     ea8:	bf 90       	pop	r11
     eaa:	af 90       	pop	r10
     eac:	9f 90       	pop	r9
     eae:	8f 90       	pop	r8
     eb0:	08 95       	ret

00000eb2 <configuracion_modo_timer1>:
     eb2:	cf 93       	push	r28
     eb4:	c8 2f       	mov	r28, r24
     eb6:	1f 92       	push	r1
     eb8:	8f 93       	push	r24
     eba:	88 ef       	ldi	r24, 0xF8	; 248
     ebc:	92 e0       	ldi	r25, 0x02	; 2
     ebe:	9f 93       	push	r25
     ec0:	8f 93       	push	r24
     ec2:	0e 94 9a 13 	call	0x2734	; 0x2734 <printf>
     ec6:	e0 e8       	ldi	r30, 0x80	; 128
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	8c 7f       	andi	r24, 0xFC	; 252
     ece:	80 83       	st	Z, r24
     ed0:	e1 e8       	ldi	r30, 0x81	; 129
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	80 81       	ld	r24, Z
     ed6:	87 7e       	andi	r24, 0xE7	; 231
     ed8:	80 83       	st	Z, r24
     eda:	0f 90       	pop	r0
     edc:	0f 90       	pop	r0
     ede:	0f 90       	pop	r0
     ee0:	0f 90       	pop	r0
     ee2:	8c 2f       	mov	r24, r28
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	80 31       	cpi	r24, 0x10	; 16
     ee8:	91 05       	cpc	r25, r1
     eea:	08 f0       	brcs	.+2      	; 0xeee <configuracion_modo_timer1+0x3c>
     eec:	81 c0       	rjmp	.+258    	; 0xff0 <configuracion_modo_timer1+0x13e>
     eee:	fc 01       	movw	r30, r24
     ef0:	ec 5c       	subi	r30, 0xCC	; 204
     ef2:	ff 4f       	sbci	r31, 0xFF	; 255
     ef4:	0c 94 6e 13 	jmp	0x26dc	; 0x26dc <__tablejump2__>
     ef8:	e0 e8       	ldi	r30, 0x80	; 128
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	80 81       	ld	r24, Z
     efe:	81 60       	ori	r24, 0x01	; 1
     f00:	80 83       	st	Z, r24
     f02:	7a c0       	rjmp	.+244    	; 0xff8 <configuracion_modo_timer1+0x146>
     f04:	e0 e8       	ldi	r30, 0x80	; 128
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	82 60       	ori	r24, 0x02	; 2
     f0c:	80 83       	st	Z, r24
     f0e:	74 c0       	rjmp	.+232    	; 0xff8 <configuracion_modo_timer1+0x146>
     f10:	e0 e8       	ldi	r30, 0x80	; 128
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	83 60       	ori	r24, 0x03	; 3
     f18:	80 83       	st	Z, r24
     f1a:	6e c0       	rjmp	.+220    	; 0xff8 <configuracion_modo_timer1+0x146>
     f1c:	e1 e8       	ldi	r30, 0x81	; 129
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	88 60       	ori	r24, 0x08	; 8
     f24:	80 83       	st	Z, r24
     f26:	68 c0       	rjmp	.+208    	; 0xff8 <configuracion_modo_timer1+0x146>
     f28:	e0 e8       	ldi	r30, 0x80	; 128
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	81 60       	ori	r24, 0x01	; 1
     f30:	80 83       	st	Z, r24
     f32:	e1 e8       	ldi	r30, 0x81	; 129
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	88 60       	ori	r24, 0x08	; 8
     f3a:	80 83       	st	Z, r24
     f3c:	5d c0       	rjmp	.+186    	; 0xff8 <configuracion_modo_timer1+0x146>
     f3e:	e0 e8       	ldi	r30, 0x80	; 128
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	82 60       	ori	r24, 0x02	; 2
     f46:	80 83       	st	Z, r24
     f48:	e1 e8       	ldi	r30, 0x81	; 129
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	88 60       	ori	r24, 0x08	; 8
     f50:	80 83       	st	Z, r24
     f52:	52 c0       	rjmp	.+164    	; 0xff8 <configuracion_modo_timer1+0x146>
     f54:	e0 e8       	ldi	r30, 0x80	; 128
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	83 60       	ori	r24, 0x03	; 3
     f5c:	80 83       	st	Z, r24
     f5e:	e1 e8       	ldi	r30, 0x81	; 129
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	88 60       	ori	r24, 0x08	; 8
     f66:	80 83       	st	Z, r24
     f68:	47 c0       	rjmp	.+142    	; 0xff8 <configuracion_modo_timer1+0x146>
     f6a:	e1 e8       	ldi	r30, 0x81	; 129
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	80 61       	ori	r24, 0x10	; 16
     f72:	80 83       	st	Z, r24
     f74:	41 c0       	rjmp	.+130    	; 0xff8 <configuracion_modo_timer1+0x146>
     f76:	e0 e8       	ldi	r30, 0x80	; 128
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	81 60       	ori	r24, 0x01	; 1
     f7e:	80 83       	st	Z, r24
     f80:	e1 e8       	ldi	r30, 0x81	; 129
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	80 61       	ori	r24, 0x10	; 16
     f88:	80 83       	st	Z, r24
     f8a:	36 c0       	rjmp	.+108    	; 0xff8 <configuracion_modo_timer1+0x146>
     f8c:	e0 e8       	ldi	r30, 0x80	; 128
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
     f92:	82 60       	ori	r24, 0x02	; 2
     f94:	80 83       	st	Z, r24
     f96:	e1 e8       	ldi	r30, 0x81	; 129
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	80 61       	ori	r24, 0x10	; 16
     f9e:	80 83       	st	Z, r24
     fa0:	2b c0       	rjmp	.+86     	; 0xff8 <configuracion_modo_timer1+0x146>
     fa2:	e0 e8       	ldi	r30, 0x80	; 128
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	83 60       	ori	r24, 0x03	; 3
     faa:	80 83       	st	Z, r24
     fac:	e1 e8       	ldi	r30, 0x81	; 129
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	80 61       	ori	r24, 0x10	; 16
     fb4:	80 83       	st	Z, r24
     fb6:	20 c0       	rjmp	.+64     	; 0xff8 <configuracion_modo_timer1+0x146>
     fb8:	e1 e8       	ldi	r30, 0x81	; 129
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	88 61       	ori	r24, 0x18	; 24
     fc0:	80 83       	st	Z, r24
     fc2:	1a c0       	rjmp	.+52     	; 0xff8 <configuracion_modo_timer1+0x146>
     fc4:	e0 e8       	ldi	r30, 0x80	; 128
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	82 60       	ori	r24, 0x02	; 2
     fcc:	80 83       	st	Z, r24
     fce:	e1 e8       	ldi	r30, 0x81	; 129
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	88 61       	ori	r24, 0x18	; 24
     fd6:	80 83       	st	Z, r24
     fd8:	0f c0       	rjmp	.+30     	; 0xff8 <configuracion_modo_timer1+0x146>
     fda:	e0 e8       	ldi	r30, 0x80	; 128
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	83 60       	ori	r24, 0x03	; 3
     fe2:	80 83       	st	Z, r24
     fe4:	e1 e8       	ldi	r30, 0x81	; 129
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	88 61       	ori	r24, 0x18	; 24
     fec:	80 83       	st	Z, r24
     fee:	04 c0       	rjmp	.+8      	; 0xff8 <configuracion_modo_timer1+0x146>
     ff0:	8c ee       	ldi	r24, 0xEC	; 236
     ff2:	91 e0       	ldi	r25, 0x01	; 1
     ff4:	0e 94 b0 13 	call	0x2760	; 0x2760 <puts>
     ff8:	cf 91       	pop	r28
     ffa:	08 95       	ret

00000ffc <configuracion_prescaler_timer1>:
     ffc:	cf 93       	push	r28
     ffe:	df 93       	push	r29
    1000:	ec 01       	movw	r28, r24
    1002:	df 93       	push	r29
    1004:	cf 93       	push	r28
    1006:	8a ef       	ldi	r24, 0xFA	; 250
    1008:	91 e0       	ldi	r25, 0x01	; 1
    100a:	9f 93       	push	r25
    100c:	8f 93       	push	r24
    100e:	0e 94 9a 13 	call	0x2734	; 0x2734 <printf>
    1012:	e1 e8       	ldi	r30, 0x81	; 129
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	88 7f       	andi	r24, 0xF8	; 248
    101a:	80 83       	st	Z, r24
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	0f 90       	pop	r0
    1024:	c8 30       	cpi	r28, 0x08	; 8
    1026:	d1 05       	cpc	r29, r1
    1028:	e9 f0       	breq	.+58     	; 0x1064 <configuracion_prescaler_timer1+0x68>
    102a:	28 f4       	brcc	.+10     	; 0x1036 <configuracion_prescaler_timer1+0x3a>
    102c:	20 97       	sbiw	r28, 0x00	; 0
    102e:	79 f0       	breq	.+30     	; 0x104e <configuracion_prescaler_timer1+0x52>
    1030:	21 97       	sbiw	r28, 0x01	; 1
    1032:	91 f0       	breq	.+36     	; 0x1058 <configuracion_prescaler_timer1+0x5c>
    1034:	2f c0       	rjmp	.+94     	; 0x1094 <configuracion_prescaler_timer1+0x98>
    1036:	c1 15       	cp	r28, r1
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	d8 07       	cpc	r29, r24
    103c:	f9 f0       	breq	.+62     	; 0x107c <configuracion_prescaler_timer1+0x80>
    103e:	c1 15       	cp	r28, r1
    1040:	84 e0       	ldi	r24, 0x04	; 4
    1042:	d8 07       	cpc	r29, r24
    1044:	09 f1       	breq	.+66     	; 0x1088 <configuracion_prescaler_timer1+0x8c>
    1046:	c0 34       	cpi	r28, 0x40	; 64
    1048:	d1 05       	cpc	r29, r1
    104a:	21 f5       	brne	.+72     	; 0x1094 <configuracion_prescaler_timer1+0x98>
    104c:	11 c0       	rjmp	.+34     	; 0x1070 <configuracion_prescaler_timer1+0x74>
    104e:	8f e0       	ldi	r24, 0x0F	; 15
    1050:	93 e0       	ldi	r25, 0x03	; 3
    1052:	0e 94 b0 13 	call	0x2760	; 0x2760 <puts>
    1056:	22 c0       	rjmp	.+68     	; 0x109c <configuracion_prescaler_timer1+0xa0>
    1058:	e1 e8       	ldi	r30, 0x81	; 129
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	81 60       	ori	r24, 0x01	; 1
    1060:	80 83       	st	Z, r24
    1062:	1c c0       	rjmp	.+56     	; 0x109c <configuracion_prescaler_timer1+0xa0>
    1064:	e1 e8       	ldi	r30, 0x81	; 129
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	82 60       	ori	r24, 0x02	; 2
    106c:	80 83       	st	Z, r24
    106e:	16 c0       	rjmp	.+44     	; 0x109c <configuracion_prescaler_timer1+0xa0>
    1070:	e1 e8       	ldi	r30, 0x81	; 129
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	83 60       	ori	r24, 0x03	; 3
    1078:	80 83       	st	Z, r24
    107a:	10 c0       	rjmp	.+32     	; 0x109c <configuracion_prescaler_timer1+0xa0>
    107c:	e1 e8       	ldi	r30, 0x81	; 129
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	84 60       	ori	r24, 0x04	; 4
    1084:	80 83       	st	Z, r24
    1086:	0a c0       	rjmp	.+20     	; 0x109c <configuracion_prescaler_timer1+0xa0>
    1088:	e1 e8       	ldi	r30, 0x81	; 129
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	85 60       	ori	r24, 0x05	; 5
    1090:	80 83       	st	Z, r24
    1092:	04 c0       	rjmp	.+8      	; 0x109c <configuracion_prescaler_timer1+0xa0>
    1094:	8c e1       	ldi	r24, 0x1C	; 28
    1096:	93 e0       	ldi	r25, 0x03	; 3
    1098:	0e 94 b0 13 	call	0x2760	; 0x2760 <puts>
    109c:	df 91       	pop	r29
    109e:	cf 91       	pop	r28
    10a0:	08 95       	ret

000010a2 <seleccion_prescaler_ms_timer1>:
    10a2:	cf 92       	push	r12
    10a4:	df 92       	push	r13
    10a6:	ef 92       	push	r14
    10a8:	ff 92       	push	r15
    10aa:	10 92 54 07 	sts	0x0754, r1	; 0x800754 <prescaler_TC1+0x1>
    10ae:	10 92 53 07 	sts	0x0753, r1	; 0x800753 <prescaler_TC1>
    10b2:	20 e0       	ldi	r18, 0x00	; 0
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	4a e7       	ldi	r20, 0x7A	; 122
    10b8:	54 e4       	ldi	r21, 0x44	; 68
    10ba:	0e 94 61 11 	call	0x22c2	; 0x22c2 <__divsf3>
    10be:	6b 01       	movw	r12, r22
    10c0:	7c 01       	movw	r14, r24
    10c2:	2d eb       	ldi	r18, 0xBD	; 189
    10c4:	37 e3       	ldi	r19, 0x37	; 55
    10c6:	46 e8       	ldi	r20, 0x86	; 134
    10c8:	5b e3       	ldi	r21, 0x3B	; 59
    10ca:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__cmpsf2>
    10ce:	18 16       	cp	r1, r24
    10d0:	3c f0       	brlt	.+14     	; 0x10e0 <seleccion_prescaler_ms_timer1+0x3e>
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	90 93 54 07 	sts	0x0754, r25	; 0x800754 <prescaler_TC1+0x1>
    10da:	80 93 53 07 	sts	0x0753, r24	; 0x800753 <prescaler_TC1>
    10de:	48 c0       	rjmp	.+144    	; 0x1170 <seleccion_prescaler_ms_timer1+0xce>
    10e0:	2d eb       	ldi	r18, 0xBD	; 189
    10e2:	37 e3       	ldi	r19, 0x37	; 55
    10e4:	46 e0       	ldi	r20, 0x06	; 6
    10e6:	5d e3       	ldi	r21, 0x3D	; 61
    10e8:	c7 01       	movw	r24, r14
    10ea:	b6 01       	movw	r22, r12
    10ec:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__cmpsf2>
    10f0:	18 16       	cp	r1, r24
    10f2:	3c f0       	brlt	.+14     	; 0x1102 <seleccion_prescaler_ms_timer1+0x60>
    10f4:	88 e0       	ldi	r24, 0x08	; 8
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	90 93 54 07 	sts	0x0754, r25	; 0x800754 <prescaler_TC1+0x1>
    10fc:	80 93 53 07 	sts	0x0753, r24	; 0x800753 <prescaler_TC1>
    1100:	37 c0       	rjmp	.+110    	; 0x1170 <seleccion_prescaler_ms_timer1+0xce>
    1102:	2d eb       	ldi	r18, 0xBD	; 189
    1104:	37 e3       	ldi	r19, 0x37	; 55
    1106:	46 e8       	ldi	r20, 0x86	; 134
    1108:	5e e3       	ldi	r21, 0x3E	; 62
    110a:	c7 01       	movw	r24, r14
    110c:	b6 01       	movw	r22, r12
    110e:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__cmpsf2>
    1112:	18 16       	cp	r1, r24
    1114:	3c f0       	brlt	.+14     	; 0x1124 <seleccion_prescaler_ms_timer1+0x82>
    1116:	80 e4       	ldi	r24, 0x40	; 64
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	90 93 54 07 	sts	0x0754, r25	; 0x800754 <prescaler_TC1+0x1>
    111e:	80 93 53 07 	sts	0x0753, r24	; 0x800753 <prescaler_TC1>
    1122:	26 c0       	rjmp	.+76     	; 0x1170 <seleccion_prescaler_ms_timer1+0xce>
    1124:	2d eb       	ldi	r18, 0xBD	; 189
    1126:	37 e3       	ldi	r19, 0x37	; 55
    1128:	46 e8       	ldi	r20, 0x86	; 134
    112a:	5f e3       	ldi	r21, 0x3F	; 63
    112c:	c7 01       	movw	r24, r14
    112e:	b6 01       	movw	r22, r12
    1130:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__cmpsf2>
    1134:	18 16       	cp	r1, r24
    1136:	3c f0       	brlt	.+14     	; 0x1146 <seleccion_prescaler_ms_timer1+0xa4>
    1138:	80 e0       	ldi	r24, 0x00	; 0
    113a:	91 e0       	ldi	r25, 0x01	; 1
    113c:	90 93 54 07 	sts	0x0754, r25	; 0x800754 <prescaler_TC1+0x1>
    1140:	80 93 53 07 	sts	0x0753, r24	; 0x800753 <prescaler_TC1>
    1144:	15 c0       	rjmp	.+42     	; 0x1170 <seleccion_prescaler_ms_timer1+0xce>
    1146:	2d eb       	ldi	r18, 0xBD	; 189
    1148:	37 e3       	ldi	r19, 0x37	; 55
    114a:	46 e8       	ldi	r20, 0x86	; 134
    114c:	50 e4       	ldi	r21, 0x40	; 64
    114e:	c7 01       	movw	r24, r14
    1150:	b6 01       	movw	r22, r12
    1152:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__cmpsf2>
    1156:	18 16       	cp	r1, r24
    1158:	3c f0       	brlt	.+14     	; 0x1168 <seleccion_prescaler_ms_timer1+0xc6>
    115a:	80 e0       	ldi	r24, 0x00	; 0
    115c:	94 e0       	ldi	r25, 0x04	; 4
    115e:	90 93 54 07 	sts	0x0754, r25	; 0x800754 <prescaler_TC1+0x1>
    1162:	80 93 53 07 	sts	0x0753, r24	; 0x800753 <prescaler_TC1>
    1166:	04 c0       	rjmp	.+8      	; 0x1170 <seleccion_prescaler_ms_timer1+0xce>
    1168:	84 e4       	ldi	r24, 0x44	; 68
    116a:	92 e0       	ldi	r25, 0x02	; 2
    116c:	0e 94 b0 13 	call	0x2760	; 0x2760 <puts>
    1170:	80 91 53 07 	lds	r24, 0x0753	; 0x800753 <prescaler_TC1>
    1174:	90 91 54 07 	lds	r25, 0x0754	; 0x800754 <prescaler_TC1+0x1>
    1178:	0e 94 fe 07 	call	0xffc	; 0xffc <configuracion_prescaler_timer1>
    117c:	ff 90       	pop	r15
    117e:	ef 90       	pop	r14
    1180:	df 90       	pop	r13
    1182:	cf 90       	pop	r12
    1184:	08 95       	ret

00001186 <configuracion_modoSalidas_timer1>:
    1186:	cf 93       	push	r28
    1188:	c6 2f       	mov	r28, r22
    118a:	e0 e8       	ldi	r30, 0x80	; 128
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	90 81       	ld	r25, Z
    1190:	9f 73       	andi	r25, 0x3F	; 63
    1192:	90 83       	st	Z, r25
    1194:	94 b1       	in	r25, 0x04	; 4
    1196:	9d 7f       	andi	r25, 0xFD	; 253
    1198:	94 b9       	out	0x04, r25	; 4
    119a:	81 30       	cpi	r24, 0x01	; 1
    119c:	59 f0       	breq	.+22     	; 0x11b4 <configuracion_modoSalidas_timer1+0x2e>
    119e:	28 f0       	brcs	.+10     	; 0x11aa <configuracion_modoSalidas_timer1+0x24>
    11a0:	82 30       	cpi	r24, 0x02	; 2
    11a2:	a9 f0       	breq	.+42     	; 0x11ce <configuracion_modoSalidas_timer1+0x48>
    11a4:	83 30       	cpi	r24, 0x03	; 3
    11a6:	01 f1       	breq	.+64     	; 0x11e8 <configuracion_modoSalidas_timer1+0x62>
    11a8:	2c c0       	rjmp	.+88     	; 0x1202 <configuracion_modoSalidas_timer1+0x7c>
    11aa:	89 e4       	ldi	r24, 0x49	; 73
    11ac:	93 e0       	ldi	r25, 0x03	; 3
    11ae:	0e 94 b0 13 	call	0x2760	; 0x2760 <puts>
    11b2:	2b c0       	rjmp	.+86     	; 0x120a <configuracion_modoSalidas_timer1+0x84>
    11b4:	83 e5       	ldi	r24, 0x53	; 83
    11b6:	93 e0       	ldi	r25, 0x03	; 3
    11b8:	0e 94 b0 13 	call	0x2760	; 0x2760 <puts>
    11bc:	84 b1       	in	r24, 0x04	; 4
    11be:	82 60       	ori	r24, 0x02	; 2
    11c0:	84 b9       	out	0x04, r24	; 4
    11c2:	e0 e8       	ldi	r30, 0x80	; 128
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	80 64       	ori	r24, 0x40	; 64
    11ca:	80 83       	st	Z, r24
    11cc:	1e c0       	rjmp	.+60     	; 0x120a <configuracion_modoSalidas_timer1+0x84>
    11ce:	80 e6       	ldi	r24, 0x60	; 96
    11d0:	93 e0       	ldi	r25, 0x03	; 3
    11d2:	0e 94 b0 13 	call	0x2760	; 0x2760 <puts>
    11d6:	84 b1       	in	r24, 0x04	; 4
    11d8:	82 60       	ori	r24, 0x02	; 2
    11da:	84 b9       	out	0x04, r24	; 4
    11dc:	e0 e8       	ldi	r30, 0x80	; 128
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	80 68       	ori	r24, 0x80	; 128
    11e4:	80 83       	st	Z, r24
    11e6:	11 c0       	rjmp	.+34     	; 0x120a <configuracion_modoSalidas_timer1+0x84>
    11e8:	8c e6       	ldi	r24, 0x6C	; 108
    11ea:	93 e0       	ldi	r25, 0x03	; 3
    11ec:	0e 94 b0 13 	call	0x2760	; 0x2760 <puts>
    11f0:	84 b1       	in	r24, 0x04	; 4
    11f2:	82 60       	ori	r24, 0x02	; 2
    11f4:	84 b9       	out	0x04, r24	; 4
    11f6:	e0 e8       	ldi	r30, 0x80	; 128
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	80 6c       	ori	r24, 0xC0	; 192
    11fe:	80 83       	st	Z, r24
    1200:	04 c0       	rjmp	.+8      	; 0x120a <configuracion_modoSalidas_timer1+0x84>
    1202:	86 e7       	ldi	r24, 0x76	; 118
    1204:	93 e0       	ldi	r25, 0x03	; 3
    1206:	0e 94 b0 13 	call	0x2760	; 0x2760 <puts>
    120a:	c1 30       	cpi	r28, 0x01	; 1
    120c:	59 f0       	breq	.+22     	; 0x1224 <configuracion_modoSalidas_timer1+0x9e>
    120e:	28 f0       	brcs	.+10     	; 0x121a <configuracion_modoSalidas_timer1+0x94>
    1210:	c2 30       	cpi	r28, 0x02	; 2
    1212:	a9 f0       	breq	.+42     	; 0x123e <configuracion_modoSalidas_timer1+0xb8>
    1214:	c3 30       	cpi	r28, 0x03	; 3
    1216:	01 f1       	breq	.+64     	; 0x1258 <configuracion_modoSalidas_timer1+0xd2>
    1218:	2c c0       	rjmp	.+88     	; 0x1272 <configuracion_modoSalidas_timer1+0xec>
    121a:	8f e8       	ldi	r24, 0x8F	; 143
    121c:	93 e0       	ldi	r25, 0x03	; 3
    121e:	0e 94 b0 13 	call	0x2760	; 0x2760 <puts>
    1222:	2b c0       	rjmp	.+86     	; 0x127a <configuracion_modoSalidas_timer1+0xf4>
    1224:	89 e9       	ldi	r24, 0x99	; 153
    1226:	93 e0       	ldi	r25, 0x03	; 3
    1228:	0e 94 b0 13 	call	0x2760	; 0x2760 <puts>
    122c:	84 b1       	in	r24, 0x04	; 4
    122e:	84 60       	ori	r24, 0x04	; 4
    1230:	84 b9       	out	0x04, r24	; 4
    1232:	e0 e8       	ldi	r30, 0x80	; 128
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	80 61       	ori	r24, 0x10	; 16
    123a:	80 83       	st	Z, r24
    123c:	1e c0       	rjmp	.+60     	; 0x127a <configuracion_modoSalidas_timer1+0xf4>
    123e:	86 ea       	ldi	r24, 0xA6	; 166
    1240:	93 e0       	ldi	r25, 0x03	; 3
    1242:	0e 94 b0 13 	call	0x2760	; 0x2760 <puts>
    1246:	84 b1       	in	r24, 0x04	; 4
    1248:	84 60       	ori	r24, 0x04	; 4
    124a:	84 b9       	out	0x04, r24	; 4
    124c:	e0 e8       	ldi	r30, 0x80	; 128
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	80 62       	ori	r24, 0x20	; 32
    1254:	80 83       	st	Z, r24
    1256:	11 c0       	rjmp	.+34     	; 0x127a <configuracion_modoSalidas_timer1+0xf4>
    1258:	82 eb       	ldi	r24, 0xB2	; 178
    125a:	93 e0       	ldi	r25, 0x03	; 3
    125c:	0e 94 b0 13 	call	0x2760	; 0x2760 <puts>
    1260:	84 b1       	in	r24, 0x04	; 4
    1262:	84 60       	ori	r24, 0x04	; 4
    1264:	84 b9       	out	0x04, r24	; 4
    1266:	e0 e8       	ldi	r30, 0x80	; 128
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	80 81       	ld	r24, Z
    126c:	80 63       	ori	r24, 0x30	; 48
    126e:	80 83       	st	Z, r24
    1270:	04 c0       	rjmp	.+8      	; 0x127a <configuracion_modoSalidas_timer1+0xf4>
    1272:	8c eb       	ldi	r24, 0xBC	; 188
    1274:	93 e0       	ldi	r25, 0x03	; 3
    1276:	0e 94 b0 13 	call	0x2760	; 0x2760 <puts>
    127a:	cf 91       	pop	r28
    127c:	08 95       	ret

0000127e <set_ICR1_TOP>:
    127e:	cf 92       	push	r12
    1280:	df 92       	push	r13
    1282:	ef 92       	push	r14
    1284:	ff 92       	push	r15
    1286:	20 e0       	ldi	r18, 0x00	; 0
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	4a e7       	ldi	r20, 0x7A	; 122
    128c:	54 e4       	ldi	r21, 0x44	; 68
    128e:	0e 94 61 11 	call	0x22c2	; 0x22c2 <__divsf3>
    1292:	6b 01       	movw	r12, r22
    1294:	7c 01       	movw	r14, r24
    1296:	20 91 53 07 	lds	r18, 0x0753	; 0x800753 <prescaler_TC1>
    129a:	30 91 54 07 	lds	r19, 0x0754	; 0x800754 <prescaler_TC1+0x1>
    129e:	40 e0       	ldi	r20, 0x00	; 0
    12a0:	50 e0       	ldi	r21, 0x00	; 0
    12a2:	60 e0       	ldi	r22, 0x00	; 0
    12a4:	74 e2       	ldi	r23, 0x24	; 36
    12a6:	84 ef       	ldi	r24, 0xF4	; 244
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	0e 94 4f 13 	call	0x269e	; 0x269e <__divmodsi4>
    12ae:	ca 01       	movw	r24, r20
    12b0:	b9 01       	movw	r22, r18
    12b2:	0e 94 0b 12 	call	0x2416	; 0x2416 <__floatsisf>
    12b6:	a7 01       	movw	r20, r14
    12b8:	96 01       	movw	r18, r12
    12ba:	0e 94 c0 12 	call	0x2580	; 0x2580 <__mulsf3>
    12be:	20 e0       	ldi	r18, 0x00	; 0
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	40 e8       	ldi	r20, 0x80	; 128
    12c4:	5f e3       	ldi	r21, 0x3F	; 63
    12c6:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <__addsf3>
    12ca:	0e 94 da 11 	call	0x23b4	; 0x23b4 <__fixunssfsi>
    12ce:	70 93 87 00 	sts	0x0087, r23	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
    12d2:	60 93 86 00 	sts	0x0086, r22	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
    12d6:	ff 90       	pop	r15
    12d8:	ef 90       	pop	r14
    12da:	df 90       	pop	r13
    12dc:	cf 90       	pop	r12
    12de:	08 95       	ret

000012e0 <set_OCR1>:
    12e0:	8f 3f       	cpi	r24, 0xFF	; 255
    12e2:	2f ef       	ldi	r18, 0xFF	; 255
    12e4:	92 07       	cpc	r25, r18
    12e6:	21 f0       	breq	.+8      	; 0x12f0 <set_OCR1+0x10>
    12e8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    12ec:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    12f0:	6f 3f       	cpi	r22, 0xFF	; 255
    12f2:	8f ef       	ldi	r24, 0xFF	; 255
    12f4:	78 07       	cpc	r23, r24
    12f6:	21 f0       	breq	.+8      	; 0x1300 <set_OCR1+0x20>
    12f8:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    12fc:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
    1300:	08 95       	ret

00001302 <set_dutycicle_ms_TC1>:
    1302:	8f 92       	push	r8
    1304:	9f 92       	push	r9
    1306:	af 92       	push	r10
    1308:	bf 92       	push	r11
    130a:	cf 92       	push	r12
    130c:	df 92       	push	r13
    130e:	ef 92       	push	r14
    1310:	ff 92       	push	r15
    1312:	cf 93       	push	r28
    1314:	df 93       	push	r29
    1316:	4b 01       	movw	r8, r22
    1318:	5c 01       	movw	r10, r24
    131a:	69 01       	movw	r12, r18
    131c:	7a 01       	movw	r14, r20
    131e:	20 e0       	ldi	r18, 0x00	; 0
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	a9 01       	movw	r20, r18
    1324:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__cmpsf2>
    1328:	88 23       	and	r24, r24
    132a:	44 f1       	brlt	.+80     	; 0x137c <set_dutycicle_ms_TC1+0x7a>
    132c:	20 e0       	ldi	r18, 0x00	; 0
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	4a e7       	ldi	r20, 0x7A	; 122
    1332:	54 e4       	ldi	r21, 0x44	; 68
    1334:	c5 01       	movw	r24, r10
    1336:	b4 01       	movw	r22, r8
    1338:	0e 94 61 11 	call	0x22c2	; 0x22c2 <__divsf3>
    133c:	4b 01       	movw	r8, r22
    133e:	5c 01       	movw	r10, r24
    1340:	20 91 53 07 	lds	r18, 0x0753	; 0x800753 <prescaler_TC1>
    1344:	30 91 54 07 	lds	r19, 0x0754	; 0x800754 <prescaler_TC1+0x1>
    1348:	40 e0       	ldi	r20, 0x00	; 0
    134a:	50 e0       	ldi	r21, 0x00	; 0
    134c:	60 e0       	ldi	r22, 0x00	; 0
    134e:	74 e2       	ldi	r23, 0x24	; 36
    1350:	84 ef       	ldi	r24, 0xF4	; 244
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	0e 94 4f 13 	call	0x269e	; 0x269e <__divmodsi4>
    1358:	ca 01       	movw	r24, r20
    135a:	b9 01       	movw	r22, r18
    135c:	0e 94 0b 12 	call	0x2416	; 0x2416 <__floatsisf>
    1360:	a5 01       	movw	r20, r10
    1362:	94 01       	movw	r18, r8
    1364:	0e 94 c0 12 	call	0x2580	; 0x2580 <__mulsf3>
    1368:	20 e0       	ldi	r18, 0x00	; 0
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	40 e8       	ldi	r20, 0x80	; 128
    136e:	5f e3       	ldi	r21, 0x3F	; 63
    1370:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <__addsf3>
    1374:	0e 94 da 11 	call	0x23b4	; 0x23b4 <__fixunssfsi>
    1378:	eb 01       	movw	r28, r22
    137a:	02 c0       	rjmp	.+4      	; 0x1380 <set_dutycicle_ms_TC1+0x7e>
    137c:	cf ef       	ldi	r28, 0xFF	; 255
    137e:	df ef       	ldi	r29, 0xFF	; 255
    1380:	20 e0       	ldi	r18, 0x00	; 0
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	a9 01       	movw	r20, r18
    1386:	c7 01       	movw	r24, r14
    1388:	b6 01       	movw	r22, r12
    138a:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__cmpsf2>
    138e:	88 23       	and	r24, r24
    1390:	3c f1       	brlt	.+78     	; 0x13e0 <set_dutycicle_ms_TC1+0xde>
    1392:	20 e0       	ldi	r18, 0x00	; 0
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	4a e7       	ldi	r20, 0x7A	; 122
    1398:	54 e4       	ldi	r21, 0x44	; 68
    139a:	c7 01       	movw	r24, r14
    139c:	b6 01       	movw	r22, r12
    139e:	0e 94 61 11 	call	0x22c2	; 0x22c2 <__divsf3>
    13a2:	6b 01       	movw	r12, r22
    13a4:	7c 01       	movw	r14, r24
    13a6:	20 91 53 07 	lds	r18, 0x0753	; 0x800753 <prescaler_TC1>
    13aa:	30 91 54 07 	lds	r19, 0x0754	; 0x800754 <prescaler_TC1+0x1>
    13ae:	40 e0       	ldi	r20, 0x00	; 0
    13b0:	50 e0       	ldi	r21, 0x00	; 0
    13b2:	60 e0       	ldi	r22, 0x00	; 0
    13b4:	74 e2       	ldi	r23, 0x24	; 36
    13b6:	84 ef       	ldi	r24, 0xF4	; 244
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	0e 94 4f 13 	call	0x269e	; 0x269e <__divmodsi4>
    13be:	ca 01       	movw	r24, r20
    13c0:	b9 01       	movw	r22, r18
    13c2:	0e 94 0b 12 	call	0x2416	; 0x2416 <__floatsisf>
    13c6:	a7 01       	movw	r20, r14
    13c8:	96 01       	movw	r18, r12
    13ca:	0e 94 c0 12 	call	0x2580	; 0x2580 <__mulsf3>
    13ce:	20 e0       	ldi	r18, 0x00	; 0
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	40 e8       	ldi	r20, 0x80	; 128
    13d4:	5f e3       	ldi	r21, 0x3F	; 63
    13d6:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <__addsf3>
    13da:	0e 94 da 11 	call	0x23b4	; 0x23b4 <__fixunssfsi>
    13de:	02 c0       	rjmp	.+4      	; 0x13e4 <set_dutycicle_ms_TC1+0xe2>
    13e0:	6f ef       	ldi	r22, 0xFF	; 255
    13e2:	7f ef       	ldi	r23, 0xFF	; 255
    13e4:	ce 01       	movw	r24, r28
    13e6:	0e 94 70 09 	call	0x12e0	; 0x12e0 <set_OCR1>
    13ea:	df 91       	pop	r29
    13ec:	cf 91       	pop	r28
    13ee:	ff 90       	pop	r15
    13f0:	ef 90       	pop	r14
    13f2:	df 90       	pop	r13
    13f4:	cf 90       	pop	r12
    13f6:	bf 90       	pop	r11
    13f8:	af 90       	pop	r10
    13fa:	9f 90       	pop	r9
    13fc:	8f 90       	pop	r8
    13fe:	08 95       	ret

00001400 <configuracion_modo_timer2>:
    1400:	cf 93       	push	r28
    1402:	c8 2f       	mov	r28, r24
    1404:	1f 92       	push	r1
    1406:	8f 93       	push	r24
    1408:	85 ed       	ldi	r24, 0xD5	; 213
    140a:	93 e0       	ldi	r25, 0x03	; 3
    140c:	9f 93       	push	r25
    140e:	8f 93       	push	r24
    1410:	0e 94 9a 13 	call	0x2734	; 0x2734 <printf>
    1414:	e0 eb       	ldi	r30, 0xB0	; 176
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	8c 7f       	andi	r24, 0xFC	; 252
    141c:	80 83       	st	Z, r24
    141e:	e1 eb       	ldi	r30, 0xB1	; 177
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	87 7f       	andi	r24, 0xF7	; 247
    1426:	80 83       	st	Z, r24
    1428:	0f 90       	pop	r0
    142a:	0f 90       	pop	r0
    142c:	0f 90       	pop	r0
    142e:	0f 90       	pop	r0
    1430:	c2 30       	cpi	r28, 0x02	; 2
    1432:	99 f0       	breq	.+38     	; 0x145a <configuracion_modo_timer2+0x5a>
    1434:	28 f4       	brcc	.+10     	; 0x1440 <configuracion_modo_timer2+0x40>
    1436:	cc 23       	and	r28, r28
    1438:	b1 f1       	breq	.+108    	; 0x14a6 <configuracion_modo_timer2+0xa6>
    143a:	c1 30       	cpi	r28, 0x01	; 1
    143c:	41 f0       	breq	.+16     	; 0x144e <configuracion_modo_timer2+0x4e>
    143e:	2f c0       	rjmp	.+94     	; 0x149e <configuracion_modo_timer2+0x9e>
    1440:	c5 30       	cpi	r28, 0x05	; 5
    1442:	b9 f0       	breq	.+46     	; 0x1472 <configuracion_modo_timer2+0x72>
    1444:	c7 30       	cpi	r28, 0x07	; 7
    1446:	01 f1       	breq	.+64     	; 0x1488 <configuracion_modo_timer2+0x88>
    1448:	c3 30       	cpi	r28, 0x03	; 3
    144a:	49 f5       	brne	.+82     	; 0x149e <configuracion_modo_timer2+0x9e>
    144c:	0c c0       	rjmp	.+24     	; 0x1466 <configuracion_modo_timer2+0x66>
    144e:	e0 eb       	ldi	r30, 0xB0	; 176
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	80 81       	ld	r24, Z
    1454:	81 60       	ori	r24, 0x01	; 1
    1456:	80 83       	st	Z, r24
    1458:	26 c0       	rjmp	.+76     	; 0x14a6 <configuracion_modo_timer2+0xa6>
    145a:	e0 eb       	ldi	r30, 0xB0	; 176
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	82 60       	ori	r24, 0x02	; 2
    1462:	80 83       	st	Z, r24
    1464:	20 c0       	rjmp	.+64     	; 0x14a6 <configuracion_modo_timer2+0xa6>
    1466:	e0 eb       	ldi	r30, 0xB0	; 176
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	80 81       	ld	r24, Z
    146c:	83 60       	ori	r24, 0x03	; 3
    146e:	80 83       	st	Z, r24
    1470:	1a c0       	rjmp	.+52     	; 0x14a6 <configuracion_modo_timer2+0xa6>
    1472:	e0 eb       	ldi	r30, 0xB0	; 176
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	80 81       	ld	r24, Z
    1478:	81 60       	ori	r24, 0x01	; 1
    147a:	80 83       	st	Z, r24
    147c:	e1 eb       	ldi	r30, 0xB1	; 177
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	80 81       	ld	r24, Z
    1482:	88 60       	ori	r24, 0x08	; 8
    1484:	80 83       	st	Z, r24
    1486:	0f c0       	rjmp	.+30     	; 0x14a6 <configuracion_modo_timer2+0xa6>
    1488:	e0 eb       	ldi	r30, 0xB0	; 176
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	83 60       	ori	r24, 0x03	; 3
    1490:	80 83       	st	Z, r24
    1492:	e1 eb       	ldi	r30, 0xB1	; 177
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	88 60       	ori	r24, 0x08	; 8
    149a:	80 83       	st	Z, r24
    149c:	04 c0       	rjmp	.+8      	; 0x14a6 <configuracion_modo_timer2+0xa6>
    149e:	8c ee       	ldi	r24, 0xEC	; 236
    14a0:	91 e0       	ldi	r25, 0x01	; 1
    14a2:	0e 94 b0 13 	call	0x2760	; 0x2760 <puts>
    14a6:	cf 91       	pop	r28
    14a8:	08 95       	ret

000014aa <configuracion_prescaler_timer2>:
    14aa:	cf 93       	push	r28
    14ac:	df 93       	push	r29
    14ae:	ec 01       	movw	r28, r24
    14b0:	df 93       	push	r29
    14b2:	cf 93       	push	r28
    14b4:	8a ef       	ldi	r24, 0xFA	; 250
    14b6:	91 e0       	ldi	r25, 0x01	; 1
    14b8:	9f 93       	push	r25
    14ba:	8f 93       	push	r24
    14bc:	0e 94 9a 13 	call	0x2734	; 0x2734 <printf>
    14c0:	e1 eb       	ldi	r30, 0xB1	; 177
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 81       	ld	r24, Z
    14c6:	88 7f       	andi	r24, 0xF8	; 248
    14c8:	80 83       	st	Z, r24
    14ca:	0f 90       	pop	r0
    14cc:	0f 90       	pop	r0
    14ce:	0f 90       	pop	r0
    14d0:	0f 90       	pop	r0
    14d2:	c0 32       	cpi	r28, 0x20	; 32
    14d4:	d1 05       	cpc	r29, r1
    14d6:	49 f1       	breq	.+82     	; 0x152a <configuracion_prescaler_timer2+0x80>
    14d8:	38 f4       	brcc	.+14     	; 0x14e8 <configuracion_prescaler_timer2+0x3e>
    14da:	c1 30       	cpi	r28, 0x01	; 1
    14dc:	d1 05       	cpc	r29, r1
    14de:	c9 f0       	breq	.+50     	; 0x1512 <configuracion_prescaler_timer2+0x68>
    14e0:	98 f0       	brcs	.+38     	; 0x1508 <configuracion_prescaler_timer2+0x5e>
    14e2:	28 97       	sbiw	r28, 0x08	; 8
    14e4:	e1 f0       	breq	.+56     	; 0x151e <configuracion_prescaler_timer2+0x74>
    14e6:	3f c0       	rjmp	.+126    	; 0x1566 <configuracion_prescaler_timer2+0xbc>
    14e8:	c0 38       	cpi	r28, 0x80	; 128
    14ea:	d1 05       	cpc	r29, r1
    14ec:	51 f1       	breq	.+84     	; 0x1542 <configuracion_prescaler_timer2+0x98>
    14ee:	20 f4       	brcc	.+8      	; 0x14f8 <configuracion_prescaler_timer2+0x4e>
    14f0:	c0 34       	cpi	r28, 0x40	; 64
    14f2:	d1 05       	cpc	r29, r1
    14f4:	01 f1       	breq	.+64     	; 0x1536 <configuracion_prescaler_timer2+0x8c>
    14f6:	37 c0       	rjmp	.+110    	; 0x1566 <configuracion_prescaler_timer2+0xbc>
    14f8:	c1 15       	cp	r28, r1
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	d8 07       	cpc	r29, r24
    14fe:	39 f1       	breq	.+78     	; 0x154e <configuracion_prescaler_timer2+0xa4>
    1500:	c1 15       	cp	r28, r1
    1502:	d4 40       	sbci	r29, 0x04	; 4
    1504:	51 f1       	breq	.+84     	; 0x155a <configuracion_prescaler_timer2+0xb0>
    1506:	2f c0       	rjmp	.+94     	; 0x1566 <configuracion_prescaler_timer2+0xbc>
    1508:	8b ee       	ldi	r24, 0xEB	; 235
    150a:	93 e0       	ldi	r25, 0x03	; 3
    150c:	0e 94 b0 13 	call	0x2760	; 0x2760 <puts>
    1510:	2e c0       	rjmp	.+92     	; 0x156e <configuracion_prescaler_timer2+0xc4>
    1512:	e1 eb       	ldi	r30, 0xB1	; 177
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	80 81       	ld	r24, Z
    1518:	81 60       	ori	r24, 0x01	; 1
    151a:	80 83       	st	Z, r24
    151c:	28 c0       	rjmp	.+80     	; 0x156e <configuracion_prescaler_timer2+0xc4>
    151e:	e1 eb       	ldi	r30, 0xB1	; 177
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	82 60       	ori	r24, 0x02	; 2
    1526:	80 83       	st	Z, r24
    1528:	22 c0       	rjmp	.+68     	; 0x156e <configuracion_prescaler_timer2+0xc4>
    152a:	e1 eb       	ldi	r30, 0xB1	; 177
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	80 81       	ld	r24, Z
    1530:	83 60       	ori	r24, 0x03	; 3
    1532:	80 83       	st	Z, r24
    1534:	1c c0       	rjmp	.+56     	; 0x156e <configuracion_prescaler_timer2+0xc4>
    1536:	e1 eb       	ldi	r30, 0xB1	; 177
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	80 81       	ld	r24, Z
    153c:	84 60       	ori	r24, 0x04	; 4
    153e:	80 83       	st	Z, r24
    1540:	16 c0       	rjmp	.+44     	; 0x156e <configuracion_prescaler_timer2+0xc4>
    1542:	e1 eb       	ldi	r30, 0xB1	; 177
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 81       	ld	r24, Z
    1548:	85 60       	ori	r24, 0x05	; 5
    154a:	80 83       	st	Z, r24
    154c:	10 c0       	rjmp	.+32     	; 0x156e <configuracion_prescaler_timer2+0xc4>
    154e:	e1 eb       	ldi	r30, 0xB1	; 177
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	86 60       	ori	r24, 0x06	; 6
    1556:	80 83       	st	Z, r24
    1558:	0a c0       	rjmp	.+20     	; 0x156e <configuracion_prescaler_timer2+0xc4>
    155a:	e1 eb       	ldi	r30, 0xB1	; 177
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	87 60       	ori	r24, 0x07	; 7
    1562:	80 83       	st	Z, r24
    1564:	04 c0       	rjmp	.+8      	; 0x156e <configuracion_prescaler_timer2+0xc4>
    1566:	8c ef       	ldi	r24, 0xFC	; 252
    1568:	93 e0       	ldi	r25, 0x03	; 3
    156a:	0e 94 b0 13 	call	0x2760	; 0x2760 <puts>
    156e:	df 91       	pop	r29
    1570:	cf 91       	pop	r28
    1572:	08 95       	ret

00001574 <seleccion_prescaler_ms_timer2>:
    1574:	cf 92       	push	r12
    1576:	df 92       	push	r13
    1578:	ef 92       	push	r14
    157a:	ff 92       	push	r15
    157c:	10 92 5a 07 	sts	0x075A, r1	; 0x80075a <prescaler_TC2+0x1>
    1580:	10 92 59 07 	sts	0x0759, r1	; 0x800759 <prescaler_TC2>
    1584:	20 e0       	ldi	r18, 0x00	; 0
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	4a e7       	ldi	r20, 0x7A	; 122
    158a:	54 e4       	ldi	r21, 0x44	; 68
    158c:	0e 94 61 11 	call	0x22c2	; 0x22c2 <__divsf3>
    1590:	6b 01       	movw	r12, r22
    1592:	7c 01       	movw	r14, r24
    1594:	2d eb       	ldi	r18, 0xBD	; 189
    1596:	37 e3       	ldi	r19, 0x37	; 55
    1598:	46 e8       	ldi	r20, 0x86	; 134
    159a:	57 e3       	ldi	r21, 0x37	; 55
    159c:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__cmpsf2>
    15a0:	18 16       	cp	r1, r24
    15a2:	3c f0       	brlt	.+14     	; 0x15b2 <seleccion_prescaler_ms_timer2+0x3e>
    15a4:	81 e0       	ldi	r24, 0x01	; 1
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	90 93 5a 07 	sts	0x075A, r25	; 0x80075a <prescaler_TC2+0x1>
    15ac:	80 93 59 07 	sts	0x0759, r24	; 0x800759 <prescaler_TC2>
    15b0:	6a c0       	rjmp	.+212    	; 0x1686 <seleccion_prescaler_ms_timer2+0x112>
    15b2:	2d eb       	ldi	r18, 0xBD	; 189
    15b4:	37 e3       	ldi	r19, 0x37	; 55
    15b6:	46 e0       	ldi	r20, 0x06	; 6
    15b8:	59 e3       	ldi	r21, 0x39	; 57
    15ba:	c7 01       	movw	r24, r14
    15bc:	b6 01       	movw	r22, r12
    15be:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__cmpsf2>
    15c2:	18 16       	cp	r1, r24
    15c4:	3c f0       	brlt	.+14     	; 0x15d4 <seleccion_prescaler_ms_timer2+0x60>
    15c6:	88 e0       	ldi	r24, 0x08	; 8
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	90 93 5a 07 	sts	0x075A, r25	; 0x80075a <prescaler_TC2+0x1>
    15ce:	80 93 59 07 	sts	0x0759, r24	; 0x800759 <prescaler_TC2>
    15d2:	59 c0       	rjmp	.+178    	; 0x1686 <seleccion_prescaler_ms_timer2+0x112>
    15d4:	2d eb       	ldi	r18, 0xBD	; 189
    15d6:	37 e3       	ldi	r19, 0x37	; 55
    15d8:	46 e0       	ldi	r20, 0x06	; 6
    15da:	5a e3       	ldi	r21, 0x3A	; 58
    15dc:	c7 01       	movw	r24, r14
    15de:	b6 01       	movw	r22, r12
    15e0:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__cmpsf2>
    15e4:	18 16       	cp	r1, r24
    15e6:	3c f0       	brlt	.+14     	; 0x15f6 <seleccion_prescaler_ms_timer2+0x82>
    15e8:	80 e2       	ldi	r24, 0x20	; 32
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	90 93 5a 07 	sts	0x075A, r25	; 0x80075a <prescaler_TC2+0x1>
    15f0:	80 93 59 07 	sts	0x0759, r24	; 0x800759 <prescaler_TC2>
    15f4:	48 c0       	rjmp	.+144    	; 0x1686 <seleccion_prescaler_ms_timer2+0x112>
    15f6:	2d eb       	ldi	r18, 0xBD	; 189
    15f8:	37 e3       	ldi	r19, 0x37	; 55
    15fa:	46 e8       	ldi	r20, 0x86	; 134
    15fc:	5a e3       	ldi	r21, 0x3A	; 58
    15fe:	c7 01       	movw	r24, r14
    1600:	b6 01       	movw	r22, r12
    1602:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__cmpsf2>
    1606:	18 16       	cp	r1, r24
    1608:	3c f0       	brlt	.+14     	; 0x1618 <seleccion_prescaler_ms_timer2+0xa4>
    160a:	80 e4       	ldi	r24, 0x40	; 64
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	90 93 5a 07 	sts	0x075A, r25	; 0x80075a <prescaler_TC2+0x1>
    1612:	80 93 59 07 	sts	0x0759, r24	; 0x800759 <prescaler_TC2>
    1616:	37 c0       	rjmp	.+110    	; 0x1686 <seleccion_prescaler_ms_timer2+0x112>
    1618:	2d eb       	ldi	r18, 0xBD	; 189
    161a:	37 e3       	ldi	r19, 0x37	; 55
    161c:	46 e0       	ldi	r20, 0x06	; 6
    161e:	5b e3       	ldi	r21, 0x3B	; 59
    1620:	c7 01       	movw	r24, r14
    1622:	b6 01       	movw	r22, r12
    1624:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__cmpsf2>
    1628:	18 16       	cp	r1, r24
    162a:	3c f0       	brlt	.+14     	; 0x163a <seleccion_prescaler_ms_timer2+0xc6>
    162c:	80 e8       	ldi	r24, 0x80	; 128
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	90 93 5a 07 	sts	0x075A, r25	; 0x80075a <prescaler_TC2+0x1>
    1634:	80 93 59 07 	sts	0x0759, r24	; 0x800759 <prescaler_TC2>
    1638:	26 c0       	rjmp	.+76     	; 0x1686 <seleccion_prescaler_ms_timer2+0x112>
    163a:	2d eb       	ldi	r18, 0xBD	; 189
    163c:	37 e3       	ldi	r19, 0x37	; 55
    163e:	46 e8       	ldi	r20, 0x86	; 134
    1640:	5b e3       	ldi	r21, 0x3B	; 59
    1642:	c7 01       	movw	r24, r14
    1644:	b6 01       	movw	r22, r12
    1646:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__cmpsf2>
    164a:	18 16       	cp	r1, r24
    164c:	3c f0       	brlt	.+14     	; 0x165c <seleccion_prescaler_ms_timer2+0xe8>
    164e:	80 e0       	ldi	r24, 0x00	; 0
    1650:	91 e0       	ldi	r25, 0x01	; 1
    1652:	90 93 5a 07 	sts	0x075A, r25	; 0x80075a <prescaler_TC2+0x1>
    1656:	80 93 59 07 	sts	0x0759, r24	; 0x800759 <prescaler_TC2>
    165a:	15 c0       	rjmp	.+42     	; 0x1686 <seleccion_prescaler_ms_timer2+0x112>
    165c:	2d eb       	ldi	r18, 0xBD	; 189
    165e:	37 e3       	ldi	r19, 0x37	; 55
    1660:	46 e8       	ldi	r20, 0x86	; 134
    1662:	5c e3       	ldi	r21, 0x3C	; 60
    1664:	c7 01       	movw	r24, r14
    1666:	b6 01       	movw	r22, r12
    1668:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__cmpsf2>
    166c:	18 16       	cp	r1, r24
    166e:	3c f0       	brlt	.+14     	; 0x167e <seleccion_prescaler_ms_timer2+0x10a>
    1670:	80 e0       	ldi	r24, 0x00	; 0
    1672:	94 e0       	ldi	r25, 0x04	; 4
    1674:	90 93 5a 07 	sts	0x075A, r25	; 0x80075a <prescaler_TC2+0x1>
    1678:	80 93 59 07 	sts	0x0759, r24	; 0x800759 <prescaler_TC2>
    167c:	04 c0       	rjmp	.+8      	; 0x1686 <seleccion_prescaler_ms_timer2+0x112>
    167e:	84 e4       	ldi	r24, 0x44	; 68
    1680:	92 e0       	ldi	r25, 0x02	; 2
    1682:	0e 94 b0 13 	call	0x2760	; 0x2760 <puts>
    1686:	80 91 59 07 	lds	r24, 0x0759	; 0x800759 <prescaler_TC2>
    168a:	90 91 5a 07 	lds	r25, 0x075A	; 0x80075a <prescaler_TC2+0x1>
    168e:	0e 94 55 0a 	call	0x14aa	; 0x14aa <configuracion_prescaler_timer2>
    1692:	ff 90       	pop	r15
    1694:	ef 90       	pop	r14
    1696:	df 90       	pop	r13
    1698:	cf 90       	pop	r12
    169a:	08 95       	ret

0000169c <configuracion_modoSalidas_timer2>:
    169c:	cf 93       	push	r28
    169e:	c6 2f       	mov	r28, r22
    16a0:	e0 eb       	ldi	r30, 0xB0	; 176
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	90 81       	ld	r25, Z
    16a6:	9f 73       	andi	r25, 0x3F	; 63
    16a8:	90 83       	st	Z, r25
    16aa:	94 b1       	in	r25, 0x04	; 4
    16ac:	97 7f       	andi	r25, 0xF7	; 247
    16ae:	94 b9       	out	0x04, r25	; 4
    16b0:	9a b1       	in	r25, 0x0a	; 10
    16b2:	97 7f       	andi	r25, 0xF7	; 247
    16b4:	9a b9       	out	0x0a, r25	; 10
    16b6:	81 30       	cpi	r24, 0x01	; 1
    16b8:	59 f0       	breq	.+22     	; 0x16d0 <configuracion_modoSalidas_timer2+0x34>
    16ba:	28 f0       	brcs	.+10     	; 0x16c6 <configuracion_modoSalidas_timer2+0x2a>
    16bc:	82 30       	cpi	r24, 0x02	; 2
    16be:	a9 f0       	breq	.+42     	; 0x16ea <configuracion_modoSalidas_timer2+0x4e>
    16c0:	83 30       	cpi	r24, 0x03	; 3
    16c2:	01 f1       	breq	.+64     	; 0x1704 <configuracion_modoSalidas_timer2+0x68>
    16c4:	2c c0       	rjmp	.+88     	; 0x171e <configuracion_modoSalidas_timer2+0x82>
    16c6:	89 e2       	ldi	r24, 0x29	; 41
    16c8:	94 e0       	ldi	r25, 0x04	; 4
    16ca:	0e 94 b0 13 	call	0x2760	; 0x2760 <puts>
    16ce:	2b c0       	rjmp	.+86     	; 0x1726 <configuracion_modoSalidas_timer2+0x8a>
    16d0:	83 e3       	ldi	r24, 0x33	; 51
    16d2:	94 e0       	ldi	r25, 0x04	; 4
    16d4:	0e 94 b0 13 	call	0x2760	; 0x2760 <puts>
    16d8:	84 b1       	in	r24, 0x04	; 4
    16da:	88 60       	ori	r24, 0x08	; 8
    16dc:	84 b9       	out	0x04, r24	; 4
    16de:	e0 eb       	ldi	r30, 0xB0	; 176
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	80 81       	ld	r24, Z
    16e4:	80 64       	ori	r24, 0x40	; 64
    16e6:	80 83       	st	Z, r24
    16e8:	1e c0       	rjmp	.+60     	; 0x1726 <configuracion_modoSalidas_timer2+0x8a>
    16ea:	80 e4       	ldi	r24, 0x40	; 64
    16ec:	94 e0       	ldi	r25, 0x04	; 4
    16ee:	0e 94 b0 13 	call	0x2760	; 0x2760 <puts>
    16f2:	84 b1       	in	r24, 0x04	; 4
    16f4:	88 60       	ori	r24, 0x08	; 8
    16f6:	84 b9       	out	0x04, r24	; 4
    16f8:	e0 eb       	ldi	r30, 0xB0	; 176
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	80 81       	ld	r24, Z
    16fe:	80 68       	ori	r24, 0x80	; 128
    1700:	80 83       	st	Z, r24
    1702:	11 c0       	rjmp	.+34     	; 0x1726 <configuracion_modoSalidas_timer2+0x8a>
    1704:	8c e4       	ldi	r24, 0x4C	; 76
    1706:	94 e0       	ldi	r25, 0x04	; 4
    1708:	0e 94 b0 13 	call	0x2760	; 0x2760 <puts>
    170c:	84 b1       	in	r24, 0x04	; 4
    170e:	88 60       	ori	r24, 0x08	; 8
    1710:	84 b9       	out	0x04, r24	; 4
    1712:	e0 eb       	ldi	r30, 0xB0	; 176
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	80 81       	ld	r24, Z
    1718:	80 6c       	ori	r24, 0xC0	; 192
    171a:	80 83       	st	Z, r24
    171c:	04 c0       	rjmp	.+8      	; 0x1726 <configuracion_modoSalidas_timer2+0x8a>
    171e:	86 e5       	ldi	r24, 0x56	; 86
    1720:	94 e0       	ldi	r25, 0x04	; 4
    1722:	0e 94 b0 13 	call	0x2760	; 0x2760 <puts>
    1726:	c1 30       	cpi	r28, 0x01	; 1
    1728:	59 f0       	breq	.+22     	; 0x1740 <configuracion_modoSalidas_timer2+0xa4>
    172a:	28 f0       	brcs	.+10     	; 0x1736 <configuracion_modoSalidas_timer2+0x9a>
    172c:	c2 30       	cpi	r28, 0x02	; 2
    172e:	a9 f0       	breq	.+42     	; 0x175a <configuracion_modoSalidas_timer2+0xbe>
    1730:	c3 30       	cpi	r28, 0x03	; 3
    1732:	01 f1       	breq	.+64     	; 0x1774 <configuracion_modoSalidas_timer2+0xd8>
    1734:	2c c0       	rjmp	.+88     	; 0x178e <configuracion_modoSalidas_timer2+0xf2>
    1736:	8f e6       	ldi	r24, 0x6F	; 111
    1738:	94 e0       	ldi	r25, 0x04	; 4
    173a:	0e 94 b0 13 	call	0x2760	; 0x2760 <puts>
    173e:	2b c0       	rjmp	.+86     	; 0x1796 <configuracion_modoSalidas_timer2+0xfa>
    1740:	89 e7       	ldi	r24, 0x79	; 121
    1742:	94 e0       	ldi	r25, 0x04	; 4
    1744:	0e 94 b0 13 	call	0x2760	; 0x2760 <puts>
    1748:	8a b1       	in	r24, 0x0a	; 10
    174a:	88 60       	ori	r24, 0x08	; 8
    174c:	8a b9       	out	0x0a, r24	; 10
    174e:	e0 eb       	ldi	r30, 0xB0	; 176
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	80 81       	ld	r24, Z
    1754:	80 61       	ori	r24, 0x10	; 16
    1756:	80 83       	st	Z, r24
    1758:	1e c0       	rjmp	.+60     	; 0x1796 <configuracion_modoSalidas_timer2+0xfa>
    175a:	86 e8       	ldi	r24, 0x86	; 134
    175c:	94 e0       	ldi	r25, 0x04	; 4
    175e:	0e 94 b0 13 	call	0x2760	; 0x2760 <puts>
    1762:	8a b1       	in	r24, 0x0a	; 10
    1764:	88 60       	ori	r24, 0x08	; 8
    1766:	8a b9       	out	0x0a, r24	; 10
    1768:	e0 eb       	ldi	r30, 0xB0	; 176
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	80 81       	ld	r24, Z
    176e:	80 62       	ori	r24, 0x20	; 32
    1770:	80 83       	st	Z, r24
    1772:	11 c0       	rjmp	.+34     	; 0x1796 <configuracion_modoSalidas_timer2+0xfa>
    1774:	82 e9       	ldi	r24, 0x92	; 146
    1776:	94 e0       	ldi	r25, 0x04	; 4
    1778:	0e 94 b0 13 	call	0x2760	; 0x2760 <puts>
    177c:	8a b1       	in	r24, 0x0a	; 10
    177e:	88 60       	ori	r24, 0x08	; 8
    1780:	8a b9       	out	0x0a, r24	; 10
    1782:	e0 eb       	ldi	r30, 0xB0	; 176
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	80 81       	ld	r24, Z
    1788:	80 63       	ori	r24, 0x30	; 48
    178a:	80 83       	st	Z, r24
    178c:	04 c0       	rjmp	.+8      	; 0x1796 <configuracion_modoSalidas_timer2+0xfa>
    178e:	8c e9       	ldi	r24, 0x9C	; 156
    1790:	94 e0       	ldi	r25, 0x04	; 4
    1792:	0e 94 b0 13 	call	0x2760	; 0x2760 <puts>
    1796:	cf 91       	pop	r28
    1798:	08 95       	ret

0000179a <set_OCR2>:
	}
}

void set_OCR2(uint8_t OCR2A_val, uint8_t OCR2B_val){
	if((OCR2A_val<(uint8_t)(UINT8_MAX)))	OCR2A = OCR2A_val;
    179a:	8f 3f       	cpi	r24, 0xFF	; 255
    179c:	11 f0       	breq	.+4      	; 0x17a2 <set_OCR2+0x8>
    179e:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	if((OCR2B_val<(uint8_t)(UINT8_MAX)))	OCR2B = OCR2B_val;
    17a2:	6f 3f       	cpi	r22, 0xFF	; 255
    17a4:	11 f0       	breq	.+4      	; 0x17aa <set_OCR2+0x10>
    17a6:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    17aa:	08 95       	ret

000017ac <set_dutycicle_ms_TC2>:
	
	Angulo deseado    |      dutycicle		|    OCR0x
		-90			  |		   1ms			|     14
		 90			  |		   2ms			|     31
*/
void set_dutycicle_ms_TC2(float dutycicleA, float dutycicleB){
    17ac:	8f 92       	push	r8
    17ae:	9f 92       	push	r9
    17b0:	af 92       	push	r10
    17b2:	bf 92       	push	r11
    17b4:	cf 92       	push	r12
    17b6:	df 92       	push	r13
    17b8:	ef 92       	push	r14
    17ba:	ff 92       	push	r15
    17bc:	cf 93       	push	r28
    17be:	4b 01       	movw	r8, r22
    17c0:	5c 01       	movw	r10, r24
    17c2:	69 01       	movw	r12, r18
    17c4:	7a 01       	movw	r14, r20
	uint8_t OCR2A_val = -1;
	uint8_t OCR2B_val = -1;
	if(!(dutycicleA<0)){
    17c6:	20 e0       	ldi	r18, 0x00	; 0
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	a9 01       	movw	r20, r18
    17cc:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__cmpsf2>
    17d0:	88 23       	and	r24, r24
    17d2:	c4 f0       	brlt	.+48     	; 0x1804 <set_dutycicle_ms_TC2+0x58>
		// OCR2A_val = (uint8_t)( (dutycicleA/1000.0)*(F_CPU/prescaler_TC2)+1 );
		OCR2A_val = (uint8_t)((17.0/1.0)*(dutycicleA - 1.0) + 14.0);	
    17d4:	20 e0       	ldi	r18, 0x00	; 0
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	40 e8       	ldi	r20, 0x80	; 128
    17da:	5f e3       	ldi	r21, 0x3F	; 63
    17dc:	c5 01       	movw	r24, r10
    17de:	b4 01       	movw	r22, r8
    17e0:	0e 94 ef 10 	call	0x21de	; 0x21de <__subsf3>
    17e4:	20 e0       	ldi	r18, 0x00	; 0
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	48 e8       	ldi	r20, 0x88	; 136
    17ea:	51 e4       	ldi	r21, 0x41	; 65
    17ec:	0e 94 c0 12 	call	0x2580	; 0x2580 <__mulsf3>
    17f0:	20 e0       	ldi	r18, 0x00	; 0
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	40 e6       	ldi	r20, 0x60	; 96
    17f6:	51 e4       	ldi	r21, 0x41	; 65
    17f8:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <__addsf3>
    17fc:	0e 94 da 11 	call	0x23b4	; 0x23b4 <__fixunssfsi>
    1800:	c6 2f       	mov	r28, r22
    1802:	01 c0       	rjmp	.+2      	; 0x1806 <set_dutycicle_ms_TC2+0x5a>
	Angulo deseado    |      dutycicle		|    OCR0x
		-90			  |		   1ms			|     14
		 90			  |		   2ms			|     31
*/
void set_dutycicle_ms_TC2(float dutycicleA, float dutycicleB){
	uint8_t OCR2A_val = -1;
    1804:	cf ef       	ldi	r28, 0xFF	; 255
	uint8_t OCR2B_val = -1;
	if(!(dutycicleA<0)){
		// OCR2A_val = (uint8_t)( (dutycicleA/1000.0)*(F_CPU/prescaler_TC2)+1 );
		OCR2A_val = (uint8_t)((17.0/1.0)*(dutycicleA - 1.0) + 14.0);	
	}
	if(!(dutycicleB<0)){
    1806:	20 e0       	ldi	r18, 0x00	; 0
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	a9 01       	movw	r20, r18
    180c:	c7 01       	movw	r24, r14
    180e:	b6 01       	movw	r22, r12
    1810:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__cmpsf2>
    1814:	88 23       	and	r24, r24
    1816:	bc f0       	brlt	.+46     	; 0x1846 <set_dutycicle_ms_TC2+0x9a>
		// OCR2B_val = (uint8_t)( (dutycicleB/1000.0)*(F_CPU/prescaler_TC2)+1 );
		OCR2B_val = (uint8_t)((17.0/1.0)*(dutycicleB - 1.0) + 14.0);
    1818:	20 e0       	ldi	r18, 0x00	; 0
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	40 e8       	ldi	r20, 0x80	; 128
    181e:	5f e3       	ldi	r21, 0x3F	; 63
    1820:	c7 01       	movw	r24, r14
    1822:	b6 01       	movw	r22, r12
    1824:	0e 94 ef 10 	call	0x21de	; 0x21de <__subsf3>
    1828:	20 e0       	ldi	r18, 0x00	; 0
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	48 e8       	ldi	r20, 0x88	; 136
    182e:	51 e4       	ldi	r21, 0x41	; 65
    1830:	0e 94 c0 12 	call	0x2580	; 0x2580 <__mulsf3>
    1834:	20 e0       	ldi	r18, 0x00	; 0
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	40 e6       	ldi	r20, 0x60	; 96
    183a:	51 e4       	ldi	r21, 0x41	; 65
    183c:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <__addsf3>
    1840:	0e 94 da 11 	call	0x23b4	; 0x23b4 <__fixunssfsi>
    1844:	01 c0       	rjmp	.+2      	; 0x1848 <set_dutycicle_ms_TC2+0x9c>
		-90			  |		   1ms			|     14
		 90			  |		   2ms			|     31
*/
void set_dutycicle_ms_TC2(float dutycicleA, float dutycicleB){
	uint8_t OCR2A_val = -1;
	uint8_t OCR2B_val = -1;
    1846:	6f ef       	ldi	r22, 0xFF	; 255
	}
	if(!(dutycicleB<0)){
		// OCR2B_val = (uint8_t)( (dutycicleB/1000.0)*(F_CPU/prescaler_TC2)+1 );
		OCR2B_val = (uint8_t)((17.0/1.0)*(dutycicleB - 1.0) + 14.0);
	}
	set_OCR2(OCR2A_val, OCR2B_val);
    1848:	8c 2f       	mov	r24, r28
    184a:	0e 94 cd 0b 	call	0x179a	; 0x179a <set_OCR2>
}
    184e:	cf 91       	pop	r28
    1850:	ff 90       	pop	r15
    1852:	ef 90       	pop	r14
    1854:	df 90       	pop	r13
    1856:	cf 90       	pop	r12
    1858:	bf 90       	pop	r11
    185a:	af 90       	pop	r10
    185c:	9f 90       	pop	r9
    185e:	8f 90       	pop	r8
    1860:	08 95       	ret

00001862 <mi_putc>:
	}
}


int mi_putc(char c, FILE *stream){
	while(!(UCSR0A & (1<<UDRE0)));		// Esperar hasta que se desocupe el buffer de transmision
    1862:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    1866:	95 ff       	sbrs	r25, 5
    1868:	fc cf       	rjmp	.-8      	; 0x1862 <mi_putc>
	UDR0 = c;							// Poner el dato en el registro UDR0
    186a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	return 0; 
}
    186e:	80 e0       	ldi	r24, 0x00	; 0
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	08 95       	ret

00001874 <mi_getc>:


int mi_getc(FILE *stream){
	while ( !(UCSR0A & (1<<RXC0)));		// Esperar hasta que la recepcion se complete
    1874:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    1878:	88 23       	and	r24, r24
    187a:	e4 f7       	brge	.-8      	; 0x1874 <mi_getc>
	return UDR0;						// Leer el dato del registro UDR0
    187c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	08 95       	ret

00001884 <UART_init>:
#define comSize 30
char comando[comSize];		// buffer de recepcion

FILE uart_io = FDEV_SETUP_STREAM(mi_putc, mi_getc, _FDEV_SETUP_RW);

void UART_init(uint32_t baud, uint8_t InterRx, uint8_t InterTx){
    1884:	cf 92       	push	r12
    1886:	df 92       	push	r13
    1888:	ef 92       	push	r14
    188a:	ff 92       	push	r15
    188c:	cf 93       	push	r28
    188e:	df 93       	push	r29
    1890:	6b 01       	movw	r12, r22
    1892:	7c 01       	movw	r14, r24
    1894:	d4 2f       	mov	r29, r20
    1896:	c2 2f       	mov	r28, r18
	flagcom = 0;
    1898:	10 92 89 07 	sts	0x0789, r1	; 0x800789 <flagcom>
	
	stdout = stdin = &uart_io;
    189c:	ed e8       	ldi	r30, 0x8D	; 141
    189e:	f7 e0       	ldi	r31, 0x07	; 7
    18a0:	80 e0       	ldi	r24, 0x00	; 0
    18a2:	91 e0       	ldi	r25, 0x01	; 1
    18a4:	91 83       	std	Z+1, r25	; 0x01
    18a6:	80 83       	st	Z, r24
    18a8:	93 83       	std	Z+3, r25	; 0x03
    18aa:	82 83       	std	Z+2, r24	; 0x02
	
	UBRR0  = F_CPU/16/baud - 1;						// Configuracion del baudrate
    18ac:	60 e4       	ldi	r22, 0x40	; 64
    18ae:	72 e4       	ldi	r23, 0x42	; 66
    18b0:	8f e0       	ldi	r24, 0x0F	; 15
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	a7 01       	movw	r20, r14
    18b6:	96 01       	movw	r18, r12
    18b8:	0e 94 2d 13 	call	0x265a	; 0x265a <__udivmodsi4>
    18bc:	21 50       	subi	r18, 0x01	; 1
    18be:	31 09       	sbc	r19, r1
    18c0:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    18c4:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);		// Habilitacion del pin Rx y Tx. Habilitacion de interrupcion por recepcion completa
    18c8:	88 e9       	ldi	r24, 0x98	; 152
    18ca:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);				// 2 bits de STOP y 8 bits de datos
    18ce:	8e e0       	ldi	r24, 0x0E	; 14
    18d0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	
	// === INTERRUPCIONES DE UART (por recepcion) ===
	if(InterRx){
    18d4:	dd 23       	and	r29, r29
    18d6:	51 f0       	breq	.+20     	; 0x18ec <UART_init+0x68>
		UCSR0A &=~ (1<<RXC0);		// Apagar el flag de interrupcion por recepcion completa
    18d8:	e0 ec       	ldi	r30, 0xC0	; 192
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	80 81       	ld	r24, Z
    18de:	8f 77       	andi	r24, 0x7F	; 127
    18e0:	80 83       	st	Z, r24
		UCSR0B |=  (1<<RXCIE0);		// Habilitar la interrupcion Rx
    18e2:	e1 ec       	ldi	r30, 0xC1	; 193
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	80 81       	ld	r24, Z
    18e8:	80 68       	ori	r24, 0x80	; 128
    18ea:	80 83       	st	Z, r24
	}
	// === INTERRUPCIONES DE UART (por transmision) ===
	if(InterTx){
    18ec:	cc 23       	and	r28, r28
    18ee:	51 f0       	breq	.+20     	; 0x1904 <UART_init+0x80>
		UCSR0A &=~ (1<<TXC0);		// Apagar el flag de interrupcion por transmision completa
    18f0:	e0 ec       	ldi	r30, 0xC0	; 192
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	80 81       	ld	r24, Z
    18f6:	8f 7b       	andi	r24, 0xBF	; 191
    18f8:	80 83       	st	Z, r24
		UCSR0B |=  (1<<TXCIE0);		// Habilitar la interrupcion Tx
    18fa:	e1 ec       	ldi	r30, 0xC1	; 193
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	80 81       	ld	r24, Z
    1900:	80 64       	ori	r24, 0x40	; 64
    1902:	80 83       	st	Z, r24
	}
}
    1904:	df 91       	pop	r29
    1906:	cf 91       	pop	r28
    1908:	ff 90       	pop	r15
    190a:	ef 90       	pop	r14
    190c:	df 90       	pop	r13
    190e:	cf 90       	pop	r12
    1910:	08 95       	ret

00001912 <__vector_18>:
	while ( !(UCSR0A & (1<<RXC0)));		// Esperar hasta que la recepcion se complete
	return UDR0;						// Leer el dato del registro UDR0
}


ISR(USART_RX_vect){
    1912:	1f 92       	push	r1
    1914:	0f 92       	push	r0
    1916:	0f b6       	in	r0, 0x3f	; 63
    1918:	0f 92       	push	r0
    191a:	11 24       	eor	r1, r1
    191c:	2f 93       	push	r18
    191e:	3f 93       	push	r19
    1920:	4f 93       	push	r20
    1922:	5f 93       	push	r21
    1924:	6f 93       	push	r22
    1926:	7f 93       	push	r23
    1928:	8f 93       	push	r24
    192a:	9f 93       	push	r25
    192c:	af 93       	push	r26
    192e:	bf 93       	push	r27
    1930:	ef 93       	push	r30
    1932:	ff 93       	push	r31
	char dato;
	dato = getc();
    1934:	80 e0       	ldi	r24, 0x00	; 0
    1936:	91 e0       	ldi	r25, 0x01	; 1
    1938:	0e 94 3a 0c 	call	0x1874	; 0x1874 <mi_getc>
	switch(dato)
    193c:	9c 01       	movw	r18, r24
    193e:	33 27       	eor	r19, r19
    1940:	2d 30       	cpi	r18, 0x0D	; 13
    1942:	31 05       	cpc	r19, r1
    1944:	69 f0       	breq	.+26     	; 0x1960 <__vector_18+0x4e>
    1946:	2a 33       	cpi	r18, 0x3A	; 58
    1948:	31 05       	cpc	r19, r1
    194a:	21 f0       	breq	.+8      	; 0x1954 <__vector_18+0x42>
    194c:	28 30       	cpi	r18, 0x08	; 8
    194e:	31 05       	cpc	r19, r1
    1950:	f1 f4       	brne	.+60     	; 0x198e <__vector_18+0x7c>
    1952:	17 c0       	rjmp	.+46     	; 0x1982 <__vector_18+0x70>
	{
		case ':':			// Delimitador de inicio
			flagcom = 1;
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	80 93 89 07 	sts	0x0789, r24	; 0x800789 <flagcom>
			indcom = 0;		// Inicializa indice de buffer de recepcion
    195a:	10 92 50 07 	sts	0x0750, r1	; 0x800750 <__data_end>
			break;
    195e:	27 c0       	rjmp	.+78     	; 0x19ae <__vector_18+0x9c>
		case '\r':						// Delimitador de final
			if(flagcom){
    1960:	80 91 89 07 	lds	r24, 0x0789	; 0x800789 <flagcom>
    1964:	88 23       	and	r24, r24
    1966:	51 f0       	breq	.+20     	; 0x197c <__vector_18+0x6a>
				comando[indcom] = 0;		// coloca \0 luego del ultimo caracter recibido antes de \r
    1968:	e0 91 50 07 	lds	r30, 0x0750	; 0x800750 <__data_end>
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	e5 59       	subi	r30, 0x95	; 149
    1970:	f8 4f       	sbci	r31, 0xF8	; 248
    1972:	10 82       	st	Z, r1
				InterpretaComando(comando);	// Llama a funcion interprete de comandos
    1974:	8b e6       	ldi	r24, 0x6B	; 107
    1976:	97 e0       	ldi	r25, 0x07	; 7
    1978:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <InterpretaComando>
				//printf("No hay interprete de comando.\r\n");
			}
			flagcom = 0;
    197c:	10 92 89 07 	sts	0x0789, r1	; 0x800789 <flagcom>
			break;
    1980:	16 c0       	rjmp	.+44     	; 0x19ae <__vector_18+0x9c>
		case 8:			// backspace
			indcom--;
    1982:	80 91 50 07 	lds	r24, 0x0750	; 0x800750 <__data_end>
    1986:	81 50       	subi	r24, 0x01	; 1
    1988:	80 93 50 07 	sts	0x0750, r24	; 0x800750 <__data_end>
			break;
    198c:	10 c0       	rjmp	.+32     	; 0x19ae <__vector_18+0x9c>
		default:								// Todo lo que este entre delimitadores
			if(flagcom && indcom<comSize) comando[indcom++]=dato; // Guarda en elemento del buffer e incrementa indcom para apuntar a siguiente
    198e:	20 91 89 07 	lds	r18, 0x0789	; 0x800789 <flagcom>
    1992:	22 23       	and	r18, r18
    1994:	61 f0       	breq	.+24     	; 0x19ae <__vector_18+0x9c>
    1996:	e0 91 50 07 	lds	r30, 0x0750	; 0x800750 <__data_end>
    199a:	ee 31       	cpi	r30, 0x1E	; 30
    199c:	40 f4       	brcc	.+16     	; 0x19ae <__vector_18+0x9c>
    199e:	91 e0       	ldi	r25, 0x01	; 1
    19a0:	9e 0f       	add	r25, r30
    19a2:	90 93 50 07 	sts	0x0750, r25	; 0x800750 <__data_end>
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	e5 59       	subi	r30, 0x95	; 149
    19aa:	f8 4f       	sbci	r31, 0xF8	; 248
    19ac:	80 83       	st	Z, r24
			break;
	}
}
    19ae:	ff 91       	pop	r31
    19b0:	ef 91       	pop	r30
    19b2:	bf 91       	pop	r27
    19b4:	af 91       	pop	r26
    19b6:	9f 91       	pop	r25
    19b8:	8f 91       	pop	r24
    19ba:	7f 91       	pop	r23
    19bc:	6f 91       	pop	r22
    19be:	5f 91       	pop	r21
    19c0:	4f 91       	pop	r20
    19c2:	3f 91       	pop	r19
    19c4:	2f 91       	pop	r18
    19c6:	0f 90       	pop	r0
    19c8:	0f be       	out	0x3f, r0	; 63
    19ca:	0f 90       	pop	r0
    19cc:	1f 90       	pop	r1
    19ce:	18 95       	reti

000019d0 <help>:
			break;
	}
}

void help(){
	printf("\r\n================= Options: ================= \r\n");
    19d0:	85 eb       	ldi	r24, 0xB5	; 181
    19d2:	94 e0       	ldi	r25, 0x04	; 4
    19d4:	0e 94 b0 13 	call	0x2760	; 0x2760 <puts>
	printf(":Amnn	--> Set minimum aceptable degree\r\n");
    19d8:	86 ee       	ldi	r24, 0xE6	; 230
    19da:	94 e0       	ldi	r25, 0x04	; 4
    19dc:	0e 94 b0 13 	call	0x2760	; 0x2760 <puts>
	printf(":AMnn	--> Set maximum aceptable degree\r\n");
    19e0:	8e e0       	ldi	r24, 0x0E	; 14
    19e2:	95 e0       	ldi	r25, 0x05	; 5
    19e4:	0e 94 b0 13 	call	0x2760	; 0x2760 <puts>
	printf(":Ainn	--> Set initial degree\r\n");
    19e8:	86 e3       	ldi	r24, 0x36	; 54
    19ea:	95 e0       	ldi	r25, 0x05	; 5
    19ec:	0e 94 b0 13 	call	0x2760	; 0x2760 <puts>
	//printf(":Dnn	--> Hand flexion degree, nn is degrees [%d, %d]\r\n", (int)min_degree, (int)max_degree);
	printf(":Fxnn	--> Finger flexion degree, x is finger\r");
    19f0:	84 e5       	ldi	r24, 0x54	; 84
    19f2:	95 e0       	ldi	r25, 0x05	; 5
    19f4:	9f 93       	push	r25
    19f6:	8f 93       	push	r24
    19f8:	0e 94 9a 13 	call	0x2734	; 0x2734 <printf>
	printf("         [1,5], nn is degrees [%d, %d]\r\n", (int)min_degree, (int)max_degree);
    19fc:	60 91 64 07 	lds	r22, 0x0764	; 0x800764 <max_degree>
    1a00:	70 91 65 07 	lds	r23, 0x0765	; 0x800765 <max_degree+0x1>
    1a04:	80 91 66 07 	lds	r24, 0x0766	; 0x800766 <max_degree+0x2>
    1a08:	90 91 67 07 	lds	r25, 0x0767	; 0x800767 <max_degree+0x3>
    1a0c:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <__fixsfsi>
    1a10:	7f 93       	push	r23
    1a12:	6f 93       	push	r22
    1a14:	60 91 55 07 	lds	r22, 0x0755	; 0x800755 <min_degree>
    1a18:	70 91 56 07 	lds	r23, 0x0756	; 0x800756 <min_degree+0x1>
    1a1c:	80 91 57 07 	lds	r24, 0x0757	; 0x800757 <min_degree+0x2>
    1a20:	90 91 58 07 	lds	r25, 0x0758	; 0x800758 <min_degree+0x3>
    1a24:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <__fixsfsi>
    1a28:	7f 93       	push	r23
    1a2a:	6f 93       	push	r22
    1a2c:	82 e8       	ldi	r24, 0x82	; 130
    1a2e:	95 e0       	ldi	r25, 0x05	; 5
    1a30:	9f 93       	push	r25
    1a32:	8f 93       	push	r24
    1a34:	0e 94 9a 13 	call	0x2734	; 0x2734 <printf>
	//printf(":M		--> Move hand indefinitely\r\n");
	//printf(":S		--> Stop movement\r\n");
	printf(":C		--> Close hand\r\n");
    1a38:	8b ea       	ldi	r24, 0xAB	; 171
    1a3a:	95 e0       	ldi	r25, 0x05	; 5
    1a3c:	0e 94 b0 13 	call	0x2760	; 0x2760 <puts>
	printf(":O		--> Open hand\r\n");
    1a40:	8f eb       	ldi	r24, 0xBF	; 191
    1a42:	95 e0       	ldi	r25, 0x05	; 5
    1a44:	0e 94 b0 13 	call	0x2760	; 0x2760 <puts>
	printf(":R		--> Reset hand\r\n");
    1a48:	82 ed       	ldi	r24, 0xD2	; 210
    1a4a:	95 e0       	ldi	r25, 0x05	; 5
    1a4c:	0e 94 b0 13 	call	0x2760	; 0x2760 <puts>
	printf(":h		--> Show help\r\n\r\n");
    1a50:	86 ee       	ldi	r24, 0xE6	; 230
    1a52:	95 e0       	ldi	r25, 0x05	; 5
    1a54:	0e 94 b0 13 	call	0x2760	; 0x2760 <puts>
}
    1a58:	8d b7       	in	r24, 0x3d	; 61
    1a5a:	9e b7       	in	r25, 0x3e	; 62
    1a5c:	08 96       	adiw	r24, 0x08	; 8
    1a5e:	0f b6       	in	r0, 0x3f	; 63
    1a60:	f8 94       	cli
    1a62:	9e bf       	out	0x3e, r25	; 62
    1a64:	0f be       	out	0x3f, r0	; 63
    1a66:	8d bf       	out	0x3d, r24	; 61
    1a68:	08 95       	ret

00001a6a <InterpretaComando>:
#include "uartInterpreter.h"

void InterpretaComando(char comando[]){
    1a6a:	8f 92       	push	r8
    1a6c:	9f 92       	push	r9
    1a6e:	af 92       	push	r10
    1a70:	bf 92       	push	r11
    1a72:	cf 92       	push	r12
    1a74:	df 92       	push	r13
    1a76:	ef 92       	push	r14
    1a78:	ff 92       	push	r15
    1a7a:	cf 93       	push	r28
    1a7c:	df 93       	push	r29
    1a7e:	fc 01       	movw	r30, r24
	int aux;
/*	int move = 0;*/
	switch(comando[0]){
    1a80:	90 81       	ld	r25, Z
    1a82:	96 34       	cpi	r25, 0x46	; 70
    1a84:	09 f4       	brne	.+2      	; 0x1a88 <InterpretaComando+0x1e>
    1a86:	4e c1       	rjmp	.+668    	; 0x1d24 <InterpretaComando+0x2ba>
    1a88:	30 f4       	brcc	.+12     	; 0x1a96 <InterpretaComando+0x2c>
    1a8a:	91 34       	cpi	r25, 0x41	; 65
    1a8c:	71 f0       	breq	.+28     	; 0x1aaa <InterpretaComando+0x40>
    1a8e:	93 34       	cpi	r25, 0x43	; 67
    1a90:	09 f4       	brne	.+2      	; 0x1a94 <InterpretaComando+0x2a>
    1a92:	49 c3       	rjmp	.+1682   	; 0x2126 <InterpretaComando+0x6bc>
    1a94:	78 c3       	rjmp	.+1776   	; 0x2186 <InterpretaComando+0x71c>
    1a96:	92 35       	cpi	r25, 0x52	; 82
    1a98:	09 f4       	brne	.+2      	; 0x1a9c <InterpretaComando+0x32>
    1a9a:	63 c3       	rjmp	.+1734   	; 0x2162 <InterpretaComando+0x6f8>
    1a9c:	98 36       	cpi	r25, 0x68	; 104
    1a9e:	09 f4       	brne	.+2      	; 0x1aa2 <InterpretaComando+0x38>
    1aa0:	6f c3       	rjmp	.+1758   	; 0x2180 <InterpretaComando+0x716>
    1aa2:	9f 34       	cpi	r25, 0x4F	; 79
    1aa4:	09 f0       	breq	.+2      	; 0x1aa8 <InterpretaComando+0x3e>
    1aa6:	6f c3       	rjmp	.+1758   	; 0x2186 <InterpretaComando+0x71c>
    1aa8:	4d c3       	rjmp	.+1690   	; 0x2144 <InterpretaComando+0x6da>
		case 'A':
 		 	switch (comando[1]) {
    1aaa:	81 81       	ldd	r24, Z+1	; 0x01
    1aac:	89 36       	cpi	r24, 0x69	; 105
    1aae:	09 f4       	brne	.+2      	; 0x1ab2 <InterpretaComando+0x48>
    1ab0:	ec c0       	rjmp	.+472    	; 0x1c8a <InterpretaComando+0x220>
    1ab2:	8d 36       	cpi	r24, 0x6D	; 109
    1ab4:	21 f0       	breq	.+8      	; 0x1abe <InterpretaComando+0x54>
    1ab6:	8d 34       	cpi	r24, 0x4D	; 77
    1ab8:	09 f0       	breq	.+2      	; 0x1abc <InterpretaComando+0x52>
    1aba:	2f c1       	rjmp	.+606    	; 0x1d1a <InterpretaComando+0x2b0>
    1abc:	73 c0       	rjmp	.+230    	; 0x1ba4 <InterpretaComando+0x13a>
				case 'm':
					if(comando[2]){
    1abe:	82 81       	ldd	r24, Z+2	; 0x02
    1ac0:	88 23       	and	r24, r24
    1ac2:	09 f4       	brne	.+2      	; 0x1ac6 <InterpretaComando+0x5c>
    1ac4:	58 c0       	rjmp	.+176    	; 0x1b76 <InterpretaComando+0x10c>
						aux = atoi(&comando[2]);
    1ac6:	cf 01       	movw	r24, r30
    1ac8:	02 96       	adiw	r24, 0x02	; 2
    1aca:	0e 94 74 13 	call	0x26e8	; 0x26e8 <atoi>
						if (aux<max_degree && aux>=-90.0){
    1ace:	bc 01       	movw	r22, r24
    1ad0:	99 0f       	add	r25, r25
    1ad2:	88 0b       	sbc	r24, r24
    1ad4:	99 0b       	sbc	r25, r25
    1ad6:	0e 94 0b 12 	call	0x2416	; 0x2416 <__floatsisf>
    1ada:	6b 01       	movw	r12, r22
    1adc:	7c 01       	movw	r14, r24
    1ade:	20 91 64 07 	lds	r18, 0x0764	; 0x800764 <max_degree>
    1ae2:	30 91 65 07 	lds	r19, 0x0765	; 0x800765 <max_degree+0x1>
    1ae6:	40 91 66 07 	lds	r20, 0x0766	; 0x800766 <max_degree+0x2>
    1aea:	50 91 67 07 	lds	r21, 0x0767	; 0x800767 <max_degree+0x3>
    1aee:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__cmpsf2>
    1af2:	88 23       	and	r24, r24
    1af4:	94 f4       	brge	.+36     	; 0x1b1a <InterpretaComando+0xb0>
    1af6:	20 e0       	ldi	r18, 0x00	; 0
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	44 eb       	ldi	r20, 0xB4	; 180
    1afc:	52 ec       	ldi	r21, 0xC2	; 194
    1afe:	c7 01       	movw	r24, r14
    1b00:	b6 01       	movw	r22, r12
    1b02:	0e 94 bb 12 	call	0x2576	; 0x2576 <__gesf2>
    1b06:	88 23       	and	r24, r24
    1b08:	44 f0       	brlt	.+16     	; 0x1b1a <InterpretaComando+0xb0>
							min_degree = aux;
    1b0a:	c0 92 55 07 	sts	0x0755, r12	; 0x800755 <min_degree>
    1b0e:	d0 92 56 07 	sts	0x0756, r13	; 0x800756 <min_degree+0x1>
    1b12:	e0 92 57 07 	sts	0x0757, r14	; 0x800757 <min_degree+0x2>
    1b16:	f0 92 58 07 	sts	0x0758, r15	; 0x800758 <min_degree+0x3>
						}
						if (!(min_degree<=init_degree)){
    1b1a:	c0 90 55 07 	lds	r12, 0x0755	; 0x800755 <min_degree>
    1b1e:	d0 90 56 07 	lds	r13, 0x0756	; 0x800756 <min_degree+0x1>
    1b22:	e0 90 57 07 	lds	r14, 0x0757	; 0x800757 <min_degree+0x2>
    1b26:	f0 90 58 07 	lds	r15, 0x0758	; 0x800758 <min_degree+0x3>
    1b2a:	20 91 60 07 	lds	r18, 0x0760	; 0x800760 <init_degree>
    1b2e:	30 91 61 07 	lds	r19, 0x0761	; 0x800761 <init_degree+0x1>
    1b32:	40 91 62 07 	lds	r20, 0x0762	; 0x800762 <init_degree+0x2>
    1b36:	50 91 63 07 	lds	r21, 0x0763	; 0x800763 <init_degree+0x3>
    1b3a:	c7 01       	movw	r24, r14
    1b3c:	b6 01       	movw	r22, r12
    1b3e:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__cmpsf2>
    1b42:	18 16       	cp	r1, r24
    1b44:	c4 f4       	brge	.+48     	; 0x1b76 <InterpretaComando+0x10c>
							init_degree = min_degree;
    1b46:	c0 92 60 07 	sts	0x0760, r12	; 0x800760 <init_degree>
    1b4a:	d0 92 61 07 	sts	0x0761, r13	; 0x800761 <init_degree+0x1>
    1b4e:	e0 92 62 07 	sts	0x0762, r14	; 0x800762 <init_degree+0x2>
    1b52:	f0 92 63 07 	sts	0x0763, r15	; 0x800763 <init_degree+0x3>
							printf("Initial degree: %d\r\n", (int)init_degree);
    1b56:	c7 01       	movw	r24, r14
    1b58:	b6 01       	movw	r22, r12
    1b5a:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <__fixsfsi>
    1b5e:	7f 93       	push	r23
    1b60:	6f 93       	push	r22
    1b62:	8b ef       	ldi	r24, 0xFB	; 251
    1b64:	95 e0       	ldi	r25, 0x05	; 5
    1b66:	9f 93       	push	r25
    1b68:	8f 93       	push	r24
    1b6a:	0e 94 9a 13 	call	0x2734	; 0x2734 <printf>
    1b6e:	0f 90       	pop	r0
    1b70:	0f 90       	pop	r0
    1b72:	0f 90       	pop	r0
    1b74:	0f 90       	pop	r0
						}
					}
					printf("Minimum degree: %d\r\n", (int)min_degree);
    1b76:	60 91 55 07 	lds	r22, 0x0755	; 0x800755 <min_degree>
    1b7a:	70 91 56 07 	lds	r23, 0x0756	; 0x800756 <min_degree+0x1>
    1b7e:	80 91 57 07 	lds	r24, 0x0757	; 0x800757 <min_degree+0x2>
    1b82:	90 91 58 07 	lds	r25, 0x0758	; 0x800758 <min_degree+0x3>
    1b86:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <__fixsfsi>
    1b8a:	7f 93       	push	r23
    1b8c:	6f 93       	push	r22
    1b8e:	80 e1       	ldi	r24, 0x10	; 16
    1b90:	96 e0       	ldi	r25, 0x06	; 6
    1b92:	9f 93       	push	r25
    1b94:	8f 93       	push	r24
    1b96:	0e 94 9a 13 	call	0x2734	; 0x2734 <printf>
					break;
    1b9a:	0f 90       	pop	r0
    1b9c:	0f 90       	pop	r0
    1b9e:	0f 90       	pop	r0
    1ba0:	0f 90       	pop	r0
    1ba2:	f5 c2       	rjmp	.+1514   	; 0x218e <InterpretaComando+0x724>
				case 'M':
					if(comando[2]){
    1ba4:	82 81       	ldd	r24, Z+2	; 0x02
    1ba6:	88 23       	and	r24, r24
    1ba8:	09 f4       	brne	.+2      	; 0x1bac <InterpretaComando+0x142>
    1baa:	58 c0       	rjmp	.+176    	; 0x1c5c <InterpretaComando+0x1f2>
						aux = atoi(&comando[2]);
    1bac:	cf 01       	movw	r24, r30
    1bae:	02 96       	adiw	r24, 0x02	; 2
    1bb0:	0e 94 74 13 	call	0x26e8	; 0x26e8 <atoi>
						if (aux>min_degree && aux<=90.0){
    1bb4:	bc 01       	movw	r22, r24
    1bb6:	99 0f       	add	r25, r25
    1bb8:	88 0b       	sbc	r24, r24
    1bba:	99 0b       	sbc	r25, r25
    1bbc:	0e 94 0b 12 	call	0x2416	; 0x2416 <__floatsisf>
    1bc0:	6b 01       	movw	r12, r22
    1bc2:	7c 01       	movw	r14, r24
    1bc4:	20 91 55 07 	lds	r18, 0x0755	; 0x800755 <min_degree>
    1bc8:	30 91 56 07 	lds	r19, 0x0756	; 0x800756 <min_degree+0x1>
    1bcc:	40 91 57 07 	lds	r20, 0x0757	; 0x800757 <min_degree+0x2>
    1bd0:	50 91 58 07 	lds	r21, 0x0758	; 0x800758 <min_degree+0x3>
    1bd4:	0e 94 bb 12 	call	0x2576	; 0x2576 <__gesf2>
    1bd8:	18 16       	cp	r1, r24
    1bda:	94 f4       	brge	.+36     	; 0x1c00 <InterpretaComando+0x196>
    1bdc:	20 e0       	ldi	r18, 0x00	; 0
    1bde:	30 e0       	ldi	r19, 0x00	; 0
    1be0:	44 eb       	ldi	r20, 0xB4	; 180
    1be2:	52 e4       	ldi	r21, 0x42	; 66
    1be4:	c7 01       	movw	r24, r14
    1be6:	b6 01       	movw	r22, r12
    1be8:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__cmpsf2>
    1bec:	18 16       	cp	r1, r24
    1bee:	44 f0       	brlt	.+16     	; 0x1c00 <InterpretaComando+0x196>
							max_degree = aux;
    1bf0:	c0 92 64 07 	sts	0x0764, r12	; 0x800764 <max_degree>
    1bf4:	d0 92 65 07 	sts	0x0765, r13	; 0x800765 <max_degree+0x1>
    1bf8:	e0 92 66 07 	sts	0x0766, r14	; 0x800766 <max_degree+0x2>
    1bfc:	f0 92 67 07 	sts	0x0767, r15	; 0x800767 <max_degree+0x3>
						}
						if (!(max_degree>=init_degree)){
    1c00:	c0 90 64 07 	lds	r12, 0x0764	; 0x800764 <max_degree>
    1c04:	d0 90 65 07 	lds	r13, 0x0765	; 0x800765 <max_degree+0x1>
    1c08:	e0 90 66 07 	lds	r14, 0x0766	; 0x800766 <max_degree+0x2>
    1c0c:	f0 90 67 07 	lds	r15, 0x0767	; 0x800767 <max_degree+0x3>
    1c10:	20 91 60 07 	lds	r18, 0x0760	; 0x800760 <init_degree>
    1c14:	30 91 61 07 	lds	r19, 0x0761	; 0x800761 <init_degree+0x1>
    1c18:	40 91 62 07 	lds	r20, 0x0762	; 0x800762 <init_degree+0x2>
    1c1c:	50 91 63 07 	lds	r21, 0x0763	; 0x800763 <init_degree+0x3>
    1c20:	c7 01       	movw	r24, r14
    1c22:	b6 01       	movw	r22, r12
    1c24:	0e 94 bb 12 	call	0x2576	; 0x2576 <__gesf2>
    1c28:	88 23       	and	r24, r24
    1c2a:	c4 f4       	brge	.+48     	; 0x1c5c <InterpretaComando+0x1f2>
							init_degree = max_degree;
    1c2c:	c0 92 60 07 	sts	0x0760, r12	; 0x800760 <init_degree>
    1c30:	d0 92 61 07 	sts	0x0761, r13	; 0x800761 <init_degree+0x1>
    1c34:	e0 92 62 07 	sts	0x0762, r14	; 0x800762 <init_degree+0x2>
    1c38:	f0 92 63 07 	sts	0x0763, r15	; 0x800763 <init_degree+0x3>
							printf("Initial degree: %d\r\n", (int)init_degree);
    1c3c:	c7 01       	movw	r24, r14
    1c3e:	b6 01       	movw	r22, r12
    1c40:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <__fixsfsi>
    1c44:	7f 93       	push	r23
    1c46:	6f 93       	push	r22
    1c48:	8b ef       	ldi	r24, 0xFB	; 251
    1c4a:	95 e0       	ldi	r25, 0x05	; 5
    1c4c:	9f 93       	push	r25
    1c4e:	8f 93       	push	r24
    1c50:	0e 94 9a 13 	call	0x2734	; 0x2734 <printf>
    1c54:	0f 90       	pop	r0
    1c56:	0f 90       	pop	r0
    1c58:	0f 90       	pop	r0
    1c5a:	0f 90       	pop	r0
						}
					}
					printf("Maximum degree: %d\r\n", (int)max_degree);
    1c5c:	60 91 64 07 	lds	r22, 0x0764	; 0x800764 <max_degree>
    1c60:	70 91 65 07 	lds	r23, 0x0765	; 0x800765 <max_degree+0x1>
    1c64:	80 91 66 07 	lds	r24, 0x0766	; 0x800766 <max_degree+0x2>
    1c68:	90 91 67 07 	lds	r25, 0x0767	; 0x800767 <max_degree+0x3>
    1c6c:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <__fixsfsi>
    1c70:	7f 93       	push	r23
    1c72:	6f 93       	push	r22
    1c74:	85 e2       	ldi	r24, 0x25	; 37
    1c76:	96 e0       	ldi	r25, 0x06	; 6
    1c78:	9f 93       	push	r25
    1c7a:	8f 93       	push	r24
    1c7c:	0e 94 9a 13 	call	0x2734	; 0x2734 <printf>
					break;
    1c80:	0f 90       	pop	r0
    1c82:	0f 90       	pop	r0
    1c84:	0f 90       	pop	r0
    1c86:	0f 90       	pop	r0
    1c88:	82 c2       	rjmp	.+1284   	; 0x218e <InterpretaComando+0x724>
 				case 'i':
 					if(comando[2]){
    1c8a:	82 81       	ldd	r24, Z+2	; 0x02
    1c8c:	88 23       	and	r24, r24
    1c8e:	71 f1       	breq	.+92     	; 0x1cec <InterpretaComando+0x282>
	 					aux = atoi(&comando[2]);
    1c90:	cf 01       	movw	r24, r30
    1c92:	02 96       	adiw	r24, 0x02	; 2
    1c94:	0e 94 74 13 	call	0x26e8	; 0x26e8 <atoi>
	 					if (aux<=max_degree && aux>=min_degree){
    1c98:	bc 01       	movw	r22, r24
    1c9a:	99 0f       	add	r25, r25
    1c9c:	88 0b       	sbc	r24, r24
    1c9e:	99 0b       	sbc	r25, r25
    1ca0:	0e 94 0b 12 	call	0x2416	; 0x2416 <__floatsisf>
    1ca4:	6b 01       	movw	r12, r22
    1ca6:	7c 01       	movw	r14, r24
    1ca8:	20 91 64 07 	lds	r18, 0x0764	; 0x800764 <max_degree>
    1cac:	30 91 65 07 	lds	r19, 0x0765	; 0x800765 <max_degree+0x1>
    1cb0:	40 91 66 07 	lds	r20, 0x0766	; 0x800766 <max_degree+0x2>
    1cb4:	50 91 67 07 	lds	r21, 0x0767	; 0x800767 <max_degree+0x3>
    1cb8:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__cmpsf2>
    1cbc:	18 16       	cp	r1, r24
    1cbe:	b4 f0       	brlt	.+44     	; 0x1cec <InterpretaComando+0x282>
    1cc0:	20 91 55 07 	lds	r18, 0x0755	; 0x800755 <min_degree>
    1cc4:	30 91 56 07 	lds	r19, 0x0756	; 0x800756 <min_degree+0x1>
    1cc8:	40 91 57 07 	lds	r20, 0x0757	; 0x800757 <min_degree+0x2>
    1ccc:	50 91 58 07 	lds	r21, 0x0758	; 0x800758 <min_degree+0x3>
    1cd0:	c7 01       	movw	r24, r14
    1cd2:	b6 01       	movw	r22, r12
    1cd4:	0e 94 bb 12 	call	0x2576	; 0x2576 <__gesf2>
    1cd8:	88 23       	and	r24, r24
    1cda:	44 f0       	brlt	.+16     	; 0x1cec <InterpretaComando+0x282>
		 					init_degree = aux;
    1cdc:	c0 92 60 07 	sts	0x0760, r12	; 0x800760 <init_degree>
    1ce0:	d0 92 61 07 	sts	0x0761, r13	; 0x800761 <init_degree+0x1>
    1ce4:	e0 92 62 07 	sts	0x0762, r14	; 0x800762 <init_degree+0x2>
    1ce8:	f0 92 63 07 	sts	0x0763, r15	; 0x800763 <init_degree+0x3>
	 					}
 					}
 					printf("Initial degree: %d\r\n", (int)init_degree);
    1cec:	60 91 60 07 	lds	r22, 0x0760	; 0x800760 <init_degree>
    1cf0:	70 91 61 07 	lds	r23, 0x0761	; 0x800761 <init_degree+0x1>
    1cf4:	80 91 62 07 	lds	r24, 0x0762	; 0x800762 <init_degree+0x2>
    1cf8:	90 91 63 07 	lds	r25, 0x0763	; 0x800763 <init_degree+0x3>
    1cfc:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <__fixsfsi>
    1d00:	7f 93       	push	r23
    1d02:	6f 93       	push	r22
    1d04:	8b ef       	ldi	r24, 0xFB	; 251
    1d06:	95 e0       	ldi	r25, 0x05	; 5
    1d08:	9f 93       	push	r25
    1d0a:	8f 93       	push	r24
    1d0c:	0e 94 9a 13 	call	0x2734	; 0x2734 <printf>
 					break;
    1d10:	0f 90       	pop	r0
    1d12:	0f 90       	pop	r0
    1d14:	0f 90       	pop	r0
    1d16:	0f 90       	pop	r0
    1d18:	3a c2       	rjmp	.+1140   	; 0x218e <InterpretaComando+0x724>
				default:
					printf("The command wasn't recognized, try using the help command (:h).\r\n");
    1d1a:	8a e3       	ldi	r24, 0x3A	; 58
    1d1c:	96 e0       	ldi	r25, 0x06	; 6
    1d1e:	0e 94 b0 13 	call	0x2760	; 0x2760 <puts>
					break;
    1d22:	35 c2       	rjmp	.+1130   	; 0x218e <InterpretaComando+0x724>
		 	} 
		 	break;
		case 'F':
			switch(comando[1]){
    1d24:	81 81       	ldd	r24, Z+1	; 0x01
    1d26:	83 33       	cpi	r24, 0x33	; 51
    1d28:	09 f4       	brne	.+2      	; 0x1d2c <InterpretaComando+0x2c2>
    1d2a:	d2 c0       	rjmp	.+420    	; 0x1ed0 <InterpretaComando+0x466>
    1d2c:	30 f4       	brcc	.+12     	; 0x1d3a <InterpretaComando+0x2d0>
    1d2e:	81 33       	cpi	r24, 0x31	; 49
    1d30:	59 f0       	breq	.+22     	; 0x1d48 <InterpretaComando+0x2de>
    1d32:	82 33       	cpi	r24, 0x32	; 50
    1d34:	09 f4       	brne	.+2      	; 0x1d38 <InterpretaComando+0x2ce>
    1d36:	6a c0       	rjmp	.+212    	; 0x1e0c <InterpretaComando+0x3a2>
    1d38:	f1 c1       	rjmp	.+994    	; 0x211c <InterpretaComando+0x6b2>
    1d3a:	84 33       	cpi	r24, 0x34	; 52
    1d3c:	09 f4       	brne	.+2      	; 0x1d40 <InterpretaComando+0x2d6>
    1d3e:	2a c1       	rjmp	.+596    	; 0x1f94 <InterpretaComando+0x52a>
    1d40:	85 33       	cpi	r24, 0x35	; 53
    1d42:	09 f4       	brne	.+2      	; 0x1d46 <InterpretaComando+0x2dc>
    1d44:	89 c1       	rjmp	.+786    	; 0x2058 <InterpretaComando+0x5ee>
    1d46:	ea c1       	rjmp	.+980    	; 0x211c <InterpretaComando+0x6b2>
				case '1':
					if(comando[2]){
    1d48:	82 81       	ldd	r24, Z+2	; 0x02
    1d4a:	88 23       	and	r24, r24
    1d4c:	09 f4       	brne	.+2      	; 0x1d50 <InterpretaComando+0x2e6>
    1d4e:	59 c0       	rjmp	.+178    	; 0x1e02 <InterpretaComando+0x398>
						aux = atoi(&comando[2]);
    1d50:	cf 01       	movw	r24, r30
    1d52:	02 96       	adiw	r24, 0x02	; 2
    1d54:	0e 94 74 13 	call	0x26e8	; 0x26e8 <atoi>
    1d58:	ec 01       	movw	r28, r24
						if(aux>=min_degree && aux<=max_degree){
    1d5a:	bc 01       	movw	r22, r24
    1d5c:	99 0f       	add	r25, r25
    1d5e:	88 0b       	sbc	r24, r24
    1d60:	99 0b       	sbc	r25, r25
    1d62:	0e 94 0b 12 	call	0x2416	; 0x2416 <__floatsisf>
    1d66:	6b 01       	movw	r12, r22
    1d68:	7c 01       	movw	r14, r24
    1d6a:	80 90 55 07 	lds	r8, 0x0755	; 0x800755 <min_degree>
    1d6e:	90 90 56 07 	lds	r9, 0x0756	; 0x800756 <min_degree+0x1>
    1d72:	a0 90 57 07 	lds	r10, 0x0757	; 0x800757 <min_degree+0x2>
    1d76:	b0 90 58 07 	lds	r11, 0x0758	; 0x800758 <min_degree+0x3>
    1d7a:	a5 01       	movw	r20, r10
    1d7c:	94 01       	movw	r18, r8
    1d7e:	0e 94 bb 12 	call	0x2576	; 0x2576 <__gesf2>
    1d82:	88 23       	and	r24, r24
    1d84:	fc f0       	brlt	.+62     	; 0x1dc4 <InterpretaComando+0x35a>
    1d86:	20 91 64 07 	lds	r18, 0x0764	; 0x800764 <max_degree>
    1d8a:	30 91 65 07 	lds	r19, 0x0765	; 0x800765 <max_degree+0x1>
    1d8e:	40 91 66 07 	lds	r20, 0x0766	; 0x800766 <max_degree+0x2>
    1d92:	50 91 67 07 	lds	r21, 0x0767	; 0x800767 <max_degree+0x3>
    1d96:	c7 01       	movw	r24, r14
    1d98:	b6 01       	movw	r22, r12
    1d9a:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__cmpsf2>
    1d9e:	18 16       	cp	r1, r24
    1da0:	8c f0       	brlt	.+34     	; 0x1dc4 <InterpretaComando+0x35a>
							printf("Finger 1, degree: %d\r\n", aux);
    1da2:	df 93       	push	r29
    1da4:	cf 93       	push	r28
    1da6:	8b e7       	ldi	r24, 0x7B	; 123
    1da8:	96 e0       	ldi	r25, 0x06	; 6
    1daa:	9f 93       	push	r25
    1dac:	8f 93       	push	r24
    1dae:	0e 94 9a 13 	call	0x2734	; 0x2734 <printf>
							finger1_degree(aux);
    1db2:	c7 01       	movw	r24, r14
    1db4:	b6 01       	movw	r22, r12
    1db6:	0e 94 3a 01 	call	0x274	; 0x274 <finger1_degree>
    1dba:	0f 90       	pop	r0
    1dbc:	0f 90       	pop	r0
    1dbe:	0f 90       	pop	r0
    1dc0:	0f 90       	pop	r0
    1dc2:	e5 c1       	rjmp	.+970    	; 0x218e <InterpretaComando+0x724>
						} else printf("Solo grados entre %d y %d\r\n",(int)min_degree,(int)max_degree);
    1dc4:	60 91 64 07 	lds	r22, 0x0764	; 0x800764 <max_degree>
    1dc8:	70 91 65 07 	lds	r23, 0x0765	; 0x800765 <max_degree+0x1>
    1dcc:	80 91 66 07 	lds	r24, 0x0766	; 0x800766 <max_degree+0x2>
    1dd0:	90 91 67 07 	lds	r25, 0x0767	; 0x800767 <max_degree+0x3>
    1dd4:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <__fixsfsi>
    1dd8:	7f 93       	push	r23
    1dda:	6f 93       	push	r22
    1ddc:	c5 01       	movw	r24, r10
    1dde:	b4 01       	movw	r22, r8
    1de0:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <__fixsfsi>
    1de4:	7f 93       	push	r23
    1de6:	6f 93       	push	r22
    1de8:	82 e9       	ldi	r24, 0x92	; 146
    1dea:	96 e0       	ldi	r25, 0x06	; 6
    1dec:	9f 93       	push	r25
    1dee:	8f 93       	push	r24
    1df0:	0e 94 9a 13 	call	0x2734	; 0x2734 <printf>
    1df4:	0f 90       	pop	r0
    1df6:	0f 90       	pop	r0
    1df8:	0f 90       	pop	r0
    1dfa:	0f 90       	pop	r0
    1dfc:	0f 90       	pop	r0
    1dfe:	0f 90       	pop	r0
    1e00:	c6 c1       	rjmp	.+908    	; 0x218e <InterpretaComando+0x724>
					} else {
						get_degrees_TC1(1,0);
    1e02:	60 e0       	ldi	r22, 0x00	; 0
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	0e 94 c8 04 	call	0x990	; 0x990 <get_degrees_TC1>
    1e0a:	c1 c1       	rjmp	.+898    	; 0x218e <InterpretaComando+0x724>
					}
					break;
				case '2':
					if(comando[2]){
    1e0c:	82 81       	ldd	r24, Z+2	; 0x02
    1e0e:	88 23       	and	r24, r24
    1e10:	09 f4       	brne	.+2      	; 0x1e14 <InterpretaComando+0x3aa>
    1e12:	59 c0       	rjmp	.+178    	; 0x1ec6 <InterpretaComando+0x45c>
						aux = atoi(&comando[2]);
    1e14:	cf 01       	movw	r24, r30
    1e16:	02 96       	adiw	r24, 0x02	; 2
    1e18:	0e 94 74 13 	call	0x26e8	; 0x26e8 <atoi>
    1e1c:	ec 01       	movw	r28, r24
						if(aux>=min_degree && aux<=max_degree){
    1e1e:	bc 01       	movw	r22, r24
    1e20:	99 0f       	add	r25, r25
    1e22:	88 0b       	sbc	r24, r24
    1e24:	99 0b       	sbc	r25, r25
    1e26:	0e 94 0b 12 	call	0x2416	; 0x2416 <__floatsisf>
    1e2a:	6b 01       	movw	r12, r22
    1e2c:	7c 01       	movw	r14, r24
    1e2e:	80 90 55 07 	lds	r8, 0x0755	; 0x800755 <min_degree>
    1e32:	90 90 56 07 	lds	r9, 0x0756	; 0x800756 <min_degree+0x1>
    1e36:	a0 90 57 07 	lds	r10, 0x0757	; 0x800757 <min_degree+0x2>
    1e3a:	b0 90 58 07 	lds	r11, 0x0758	; 0x800758 <min_degree+0x3>
    1e3e:	a5 01       	movw	r20, r10
    1e40:	94 01       	movw	r18, r8
    1e42:	0e 94 bb 12 	call	0x2576	; 0x2576 <__gesf2>
    1e46:	88 23       	and	r24, r24
    1e48:	fc f0       	brlt	.+62     	; 0x1e88 <InterpretaComando+0x41e>
    1e4a:	20 91 64 07 	lds	r18, 0x0764	; 0x800764 <max_degree>
    1e4e:	30 91 65 07 	lds	r19, 0x0765	; 0x800765 <max_degree+0x1>
    1e52:	40 91 66 07 	lds	r20, 0x0766	; 0x800766 <max_degree+0x2>
    1e56:	50 91 67 07 	lds	r21, 0x0767	; 0x800767 <max_degree+0x3>
    1e5a:	c7 01       	movw	r24, r14
    1e5c:	b6 01       	movw	r22, r12
    1e5e:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__cmpsf2>
    1e62:	18 16       	cp	r1, r24
    1e64:	8c f0       	brlt	.+34     	; 0x1e88 <InterpretaComando+0x41e>
							printf("Finger 2, degree: %d\r\n", aux);
    1e66:	df 93       	push	r29
    1e68:	cf 93       	push	r28
    1e6a:	8e ea       	ldi	r24, 0xAE	; 174
    1e6c:	96 e0       	ldi	r25, 0x06	; 6
    1e6e:	9f 93       	push	r25
    1e70:	8f 93       	push	r24
    1e72:	0e 94 9a 13 	call	0x2734	; 0x2734 <printf>
							finger2_degree(aux);
    1e76:	c7 01       	movw	r24, r14
    1e78:	b6 01       	movw	r22, r12
    1e7a:	0e 94 4c 01 	call	0x298	; 0x298 <finger2_degree>
    1e7e:	0f 90       	pop	r0
    1e80:	0f 90       	pop	r0
    1e82:	0f 90       	pop	r0
    1e84:	0f 90       	pop	r0
    1e86:	83 c1       	rjmp	.+774    	; 0x218e <InterpretaComando+0x724>
						} else printf("Solo grados entre %d y %d\r\n",(int)min_degree,(int)max_degree);						
    1e88:	60 91 64 07 	lds	r22, 0x0764	; 0x800764 <max_degree>
    1e8c:	70 91 65 07 	lds	r23, 0x0765	; 0x800765 <max_degree+0x1>
    1e90:	80 91 66 07 	lds	r24, 0x0766	; 0x800766 <max_degree+0x2>
    1e94:	90 91 67 07 	lds	r25, 0x0767	; 0x800767 <max_degree+0x3>
    1e98:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <__fixsfsi>
    1e9c:	7f 93       	push	r23
    1e9e:	6f 93       	push	r22
    1ea0:	c5 01       	movw	r24, r10
    1ea2:	b4 01       	movw	r22, r8
    1ea4:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <__fixsfsi>
    1ea8:	7f 93       	push	r23
    1eaa:	6f 93       	push	r22
    1eac:	82 e9       	ldi	r24, 0x92	; 146
    1eae:	96 e0       	ldi	r25, 0x06	; 6
    1eb0:	9f 93       	push	r25
    1eb2:	8f 93       	push	r24
    1eb4:	0e 94 9a 13 	call	0x2734	; 0x2734 <printf>
    1eb8:	0f 90       	pop	r0
    1eba:	0f 90       	pop	r0
    1ebc:	0f 90       	pop	r0
    1ebe:	0f 90       	pop	r0
    1ec0:	0f 90       	pop	r0
    1ec2:	0f 90       	pop	r0
    1ec4:	64 c1       	rjmp	.+712    	; 0x218e <InterpretaComando+0x724>
					} else {
						get_degrees_TC1(0,1);
    1ec6:	61 e0       	ldi	r22, 0x01	; 1
    1ec8:	80 e0       	ldi	r24, 0x00	; 0
    1eca:	0e 94 c8 04 	call	0x990	; 0x990 <get_degrees_TC1>
    1ece:	5f c1       	rjmp	.+702    	; 0x218e <InterpretaComando+0x724>
						}
					break;
				case '3':
					if(comando[2]){
    1ed0:	82 81       	ldd	r24, Z+2	; 0x02
    1ed2:	88 23       	and	r24, r24
    1ed4:	09 f4       	brne	.+2      	; 0x1ed8 <InterpretaComando+0x46e>
    1ed6:	59 c0       	rjmp	.+178    	; 0x1f8a <InterpretaComando+0x520>
						aux = atoi(&comando[2]);
    1ed8:	cf 01       	movw	r24, r30
    1eda:	02 96       	adiw	r24, 0x02	; 2
    1edc:	0e 94 74 13 	call	0x26e8	; 0x26e8 <atoi>
    1ee0:	ec 01       	movw	r28, r24
						if(aux>=min_degree && aux<=max_degree){
    1ee2:	bc 01       	movw	r22, r24
    1ee4:	99 0f       	add	r25, r25
    1ee6:	88 0b       	sbc	r24, r24
    1ee8:	99 0b       	sbc	r25, r25
    1eea:	0e 94 0b 12 	call	0x2416	; 0x2416 <__floatsisf>
    1eee:	6b 01       	movw	r12, r22
    1ef0:	7c 01       	movw	r14, r24
    1ef2:	80 90 55 07 	lds	r8, 0x0755	; 0x800755 <min_degree>
    1ef6:	90 90 56 07 	lds	r9, 0x0756	; 0x800756 <min_degree+0x1>
    1efa:	a0 90 57 07 	lds	r10, 0x0757	; 0x800757 <min_degree+0x2>
    1efe:	b0 90 58 07 	lds	r11, 0x0758	; 0x800758 <min_degree+0x3>
    1f02:	a5 01       	movw	r20, r10
    1f04:	94 01       	movw	r18, r8
    1f06:	0e 94 bb 12 	call	0x2576	; 0x2576 <__gesf2>
    1f0a:	88 23       	and	r24, r24
    1f0c:	fc f0       	brlt	.+62     	; 0x1f4c <InterpretaComando+0x4e2>
    1f0e:	20 91 64 07 	lds	r18, 0x0764	; 0x800764 <max_degree>
    1f12:	30 91 65 07 	lds	r19, 0x0765	; 0x800765 <max_degree+0x1>
    1f16:	40 91 66 07 	lds	r20, 0x0766	; 0x800766 <max_degree+0x2>
    1f1a:	50 91 67 07 	lds	r21, 0x0767	; 0x800767 <max_degree+0x3>
    1f1e:	c7 01       	movw	r24, r14
    1f20:	b6 01       	movw	r22, r12
    1f22:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__cmpsf2>
    1f26:	18 16       	cp	r1, r24
    1f28:	8c f0       	brlt	.+34     	; 0x1f4c <InterpretaComando+0x4e2>
							printf("Finger 3, degree: %d\r\n", aux);
    1f2a:	df 93       	push	r29
    1f2c:	cf 93       	push	r28
    1f2e:	85 ec       	ldi	r24, 0xC5	; 197
    1f30:	96 e0       	ldi	r25, 0x06	; 6
    1f32:	9f 93       	push	r25
    1f34:	8f 93       	push	r24
    1f36:	0e 94 9a 13 	call	0x2734	; 0x2734 <printf>
							finger3_degree(aux);
    1f3a:	c7 01       	movw	r24, r14
    1f3c:	b6 01       	movw	r22, r12
    1f3e:	0e 94 5e 01 	call	0x2bc	; 0x2bc <finger3_degree>
    1f42:	0f 90       	pop	r0
    1f44:	0f 90       	pop	r0
    1f46:	0f 90       	pop	r0
    1f48:	0f 90       	pop	r0
    1f4a:	21 c1       	rjmp	.+578    	; 0x218e <InterpretaComando+0x724>
						} else printf("Solo grados entre %d y %d\r\n",(int)min_degree,(int)max_degree);
    1f4c:	60 91 64 07 	lds	r22, 0x0764	; 0x800764 <max_degree>
    1f50:	70 91 65 07 	lds	r23, 0x0765	; 0x800765 <max_degree+0x1>
    1f54:	80 91 66 07 	lds	r24, 0x0766	; 0x800766 <max_degree+0x2>
    1f58:	90 91 67 07 	lds	r25, 0x0767	; 0x800767 <max_degree+0x3>
    1f5c:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <__fixsfsi>
    1f60:	7f 93       	push	r23
    1f62:	6f 93       	push	r22
    1f64:	c5 01       	movw	r24, r10
    1f66:	b4 01       	movw	r22, r8
    1f68:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <__fixsfsi>
    1f6c:	7f 93       	push	r23
    1f6e:	6f 93       	push	r22
    1f70:	82 e9       	ldi	r24, 0x92	; 146
    1f72:	96 e0       	ldi	r25, 0x06	; 6
    1f74:	9f 93       	push	r25
    1f76:	8f 93       	push	r24
    1f78:	0e 94 9a 13 	call	0x2734	; 0x2734 <printf>
    1f7c:	0f 90       	pop	r0
    1f7e:	0f 90       	pop	r0
    1f80:	0f 90       	pop	r0
    1f82:	0f 90       	pop	r0
    1f84:	0f 90       	pop	r0
    1f86:	0f 90       	pop	r0
    1f88:	02 c1       	rjmp	.+516    	; 0x218e <InterpretaComando+0x724>
					}else {
						get_degrees_TC0(1,0);
    1f8a:	60 e0       	ldi	r22, 0x00	; 0
    1f8c:	81 e0       	ldi	r24, 0x01	; 1
    1f8e:	0e 94 fe 03 	call	0x7fc	; 0x7fc <get_degrees_TC0>
    1f92:	fd c0       	rjmp	.+506    	; 0x218e <InterpretaComando+0x724>
					}
					break;
				case '4':
					if(comando[2]){
    1f94:	82 81       	ldd	r24, Z+2	; 0x02
    1f96:	88 23       	and	r24, r24
    1f98:	09 f4       	brne	.+2      	; 0x1f9c <InterpretaComando+0x532>
    1f9a:	59 c0       	rjmp	.+178    	; 0x204e <InterpretaComando+0x5e4>
						aux = atoi(&comando[2]);
    1f9c:	cf 01       	movw	r24, r30
    1f9e:	02 96       	adiw	r24, 0x02	; 2
    1fa0:	0e 94 74 13 	call	0x26e8	; 0x26e8 <atoi>
    1fa4:	ec 01       	movw	r28, r24
						if(aux>=min_degree && aux<=max_degree){
    1fa6:	bc 01       	movw	r22, r24
    1fa8:	99 0f       	add	r25, r25
    1faa:	88 0b       	sbc	r24, r24
    1fac:	99 0b       	sbc	r25, r25
    1fae:	0e 94 0b 12 	call	0x2416	; 0x2416 <__floatsisf>
    1fb2:	6b 01       	movw	r12, r22
    1fb4:	7c 01       	movw	r14, r24
    1fb6:	80 90 55 07 	lds	r8, 0x0755	; 0x800755 <min_degree>
    1fba:	90 90 56 07 	lds	r9, 0x0756	; 0x800756 <min_degree+0x1>
    1fbe:	a0 90 57 07 	lds	r10, 0x0757	; 0x800757 <min_degree+0x2>
    1fc2:	b0 90 58 07 	lds	r11, 0x0758	; 0x800758 <min_degree+0x3>
    1fc6:	a5 01       	movw	r20, r10
    1fc8:	94 01       	movw	r18, r8
    1fca:	0e 94 bb 12 	call	0x2576	; 0x2576 <__gesf2>
    1fce:	88 23       	and	r24, r24
    1fd0:	fc f0       	brlt	.+62     	; 0x2010 <InterpretaComando+0x5a6>
    1fd2:	20 91 64 07 	lds	r18, 0x0764	; 0x800764 <max_degree>
    1fd6:	30 91 65 07 	lds	r19, 0x0765	; 0x800765 <max_degree+0x1>
    1fda:	40 91 66 07 	lds	r20, 0x0766	; 0x800766 <max_degree+0x2>
    1fde:	50 91 67 07 	lds	r21, 0x0767	; 0x800767 <max_degree+0x3>
    1fe2:	c7 01       	movw	r24, r14
    1fe4:	b6 01       	movw	r22, r12
    1fe6:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__cmpsf2>
    1fea:	18 16       	cp	r1, r24
    1fec:	8c f0       	brlt	.+34     	; 0x2010 <InterpretaComando+0x5a6>
							printf("Finger 4, degree: %d\r\n", aux);
    1fee:	df 93       	push	r29
    1ff0:	cf 93       	push	r28
    1ff2:	8c ed       	ldi	r24, 0xDC	; 220
    1ff4:	96 e0       	ldi	r25, 0x06	; 6
    1ff6:	9f 93       	push	r25
    1ff8:	8f 93       	push	r24
    1ffa:	0e 94 9a 13 	call	0x2734	; 0x2734 <printf>
							finger4_degree(aux);
    1ffe:	c7 01       	movw	r24, r14
    2000:	b6 01       	movw	r22, r12
    2002:	0e 94 70 01 	call	0x2e0	; 0x2e0 <finger4_degree>
    2006:	0f 90       	pop	r0
    2008:	0f 90       	pop	r0
    200a:	0f 90       	pop	r0
    200c:	0f 90       	pop	r0
    200e:	bf c0       	rjmp	.+382    	; 0x218e <InterpretaComando+0x724>
						} else printf("Solo grados entre %d y %d\r\n",(int)min_degree,(int)max_degree);
    2010:	60 91 64 07 	lds	r22, 0x0764	; 0x800764 <max_degree>
    2014:	70 91 65 07 	lds	r23, 0x0765	; 0x800765 <max_degree+0x1>
    2018:	80 91 66 07 	lds	r24, 0x0766	; 0x800766 <max_degree+0x2>
    201c:	90 91 67 07 	lds	r25, 0x0767	; 0x800767 <max_degree+0x3>
    2020:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <__fixsfsi>
    2024:	7f 93       	push	r23
    2026:	6f 93       	push	r22
    2028:	c5 01       	movw	r24, r10
    202a:	b4 01       	movw	r22, r8
    202c:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <__fixsfsi>
    2030:	7f 93       	push	r23
    2032:	6f 93       	push	r22
    2034:	82 e9       	ldi	r24, 0x92	; 146
    2036:	96 e0       	ldi	r25, 0x06	; 6
    2038:	9f 93       	push	r25
    203a:	8f 93       	push	r24
    203c:	0e 94 9a 13 	call	0x2734	; 0x2734 <printf>
    2040:	0f 90       	pop	r0
    2042:	0f 90       	pop	r0
    2044:	0f 90       	pop	r0
    2046:	0f 90       	pop	r0
    2048:	0f 90       	pop	r0
    204a:	0f 90       	pop	r0
    204c:	a0 c0       	rjmp	.+320    	; 0x218e <InterpretaComando+0x724>
					}else {
						get_degrees_TC0(0,1);
    204e:	61 e0       	ldi	r22, 0x01	; 1
    2050:	80 e0       	ldi	r24, 0x00	; 0
    2052:	0e 94 fe 03 	call	0x7fc	; 0x7fc <get_degrees_TC0>
    2056:	9b c0       	rjmp	.+310    	; 0x218e <InterpretaComando+0x724>
					}
					break;
				case '5':
					if(comando[2]){
    2058:	82 81       	ldd	r24, Z+2	; 0x02
    205a:	88 23       	and	r24, r24
    205c:	09 f4       	brne	.+2      	; 0x2060 <InterpretaComando+0x5f6>
    205e:	59 c0       	rjmp	.+178    	; 0x2112 <InterpretaComando+0x6a8>
						aux = atoi(&comando[2]);
    2060:	cf 01       	movw	r24, r30
    2062:	02 96       	adiw	r24, 0x02	; 2
    2064:	0e 94 74 13 	call	0x26e8	; 0x26e8 <atoi>
    2068:	ec 01       	movw	r28, r24
						if(aux>=min_degree && aux<=max_degree){
    206a:	bc 01       	movw	r22, r24
    206c:	99 0f       	add	r25, r25
    206e:	88 0b       	sbc	r24, r24
    2070:	99 0b       	sbc	r25, r25
    2072:	0e 94 0b 12 	call	0x2416	; 0x2416 <__floatsisf>
    2076:	6b 01       	movw	r12, r22
    2078:	7c 01       	movw	r14, r24
    207a:	80 90 55 07 	lds	r8, 0x0755	; 0x800755 <min_degree>
    207e:	90 90 56 07 	lds	r9, 0x0756	; 0x800756 <min_degree+0x1>
    2082:	a0 90 57 07 	lds	r10, 0x0757	; 0x800757 <min_degree+0x2>
    2086:	b0 90 58 07 	lds	r11, 0x0758	; 0x800758 <min_degree+0x3>
    208a:	a5 01       	movw	r20, r10
    208c:	94 01       	movw	r18, r8
    208e:	0e 94 bb 12 	call	0x2576	; 0x2576 <__gesf2>
    2092:	88 23       	and	r24, r24
    2094:	fc f0       	brlt	.+62     	; 0x20d4 <InterpretaComando+0x66a>
    2096:	20 91 64 07 	lds	r18, 0x0764	; 0x800764 <max_degree>
    209a:	30 91 65 07 	lds	r19, 0x0765	; 0x800765 <max_degree+0x1>
    209e:	40 91 66 07 	lds	r20, 0x0766	; 0x800766 <max_degree+0x2>
    20a2:	50 91 67 07 	lds	r21, 0x0767	; 0x800767 <max_degree+0x3>
    20a6:	c7 01       	movw	r24, r14
    20a8:	b6 01       	movw	r22, r12
    20aa:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__cmpsf2>
    20ae:	18 16       	cp	r1, r24
    20b0:	8c f0       	brlt	.+34     	; 0x20d4 <InterpretaComando+0x66a>
							printf("Finger 5, degree: %d\r\n", aux);
    20b2:	df 93       	push	r29
    20b4:	cf 93       	push	r28
    20b6:	83 ef       	ldi	r24, 0xF3	; 243
    20b8:	96 e0       	ldi	r25, 0x06	; 6
    20ba:	9f 93       	push	r25
    20bc:	8f 93       	push	r24
    20be:	0e 94 9a 13 	call	0x2734	; 0x2734 <printf>
							finger5_degree(aux);
    20c2:	c7 01       	movw	r24, r14
    20c4:	b6 01       	movw	r22, r12
    20c6:	0e 94 82 01 	call	0x304	; 0x304 <finger5_degree>
    20ca:	0f 90       	pop	r0
    20cc:	0f 90       	pop	r0
    20ce:	0f 90       	pop	r0
    20d0:	0f 90       	pop	r0
    20d2:	5d c0       	rjmp	.+186    	; 0x218e <InterpretaComando+0x724>
						} else printf("Solo grados entre %d y %d\r\n",(int)min_degree,(int)max_degree);
    20d4:	60 91 64 07 	lds	r22, 0x0764	; 0x800764 <max_degree>
    20d8:	70 91 65 07 	lds	r23, 0x0765	; 0x800765 <max_degree+0x1>
    20dc:	80 91 66 07 	lds	r24, 0x0766	; 0x800766 <max_degree+0x2>
    20e0:	90 91 67 07 	lds	r25, 0x0767	; 0x800767 <max_degree+0x3>
    20e4:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <__fixsfsi>
    20e8:	7f 93       	push	r23
    20ea:	6f 93       	push	r22
    20ec:	c5 01       	movw	r24, r10
    20ee:	b4 01       	movw	r22, r8
    20f0:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <__fixsfsi>
    20f4:	7f 93       	push	r23
    20f6:	6f 93       	push	r22
    20f8:	82 e9       	ldi	r24, 0x92	; 146
    20fa:	96 e0       	ldi	r25, 0x06	; 6
    20fc:	9f 93       	push	r25
    20fe:	8f 93       	push	r24
    2100:	0e 94 9a 13 	call	0x2734	; 0x2734 <printf>
    2104:	0f 90       	pop	r0
    2106:	0f 90       	pop	r0
    2108:	0f 90       	pop	r0
    210a:	0f 90       	pop	r0
    210c:	0f 90       	pop	r0
    210e:	0f 90       	pop	r0
    2110:	3e c0       	rjmp	.+124    	; 0x218e <InterpretaComando+0x724>
					}else {
						get_degrees_TC2(1,0);
    2112:	60 e0       	ldi	r22, 0x00	; 0
    2114:	81 e0       	ldi	r24, 0x01	; 1
    2116:	0e 94 88 05 	call	0xb10	; 0xb10 <get_degrees_TC2>
    211a:	39 c0       	rjmp	.+114    	; 0x218e <InterpretaComando+0x724>
					}
					break;				
				default:
					printf("Error\r\n");
    211c:	8a e0       	ldi	r24, 0x0A	; 10
    211e:	97 e0       	ldi	r25, 0x07	; 7
    2120:	0e 94 b0 13 	call	0x2760	; 0x2760 <puts>
					break;
    2124:	34 c0       	rjmp	.+104    	; 0x218e <InterpretaComando+0x724>
// 		case 'S':
// 			printf("STOP\r\n");
// 			move = 0;
// 			break;
		case 'C':
			printf("Closing hand...\r\n");
    2126:	81 e1       	ldi	r24, 0x11	; 17
    2128:	97 e0       	ldi	r25, 0x07	; 7
    212a:	0e 94 b0 13 	call	0x2760	; 0x2760 <puts>
			hand_degree(min_degree);
    212e:	60 91 55 07 	lds	r22, 0x0755	; 0x800755 <min_degree>
    2132:	70 91 56 07 	lds	r23, 0x0756	; 0x800756 <min_degree+0x1>
    2136:	80 91 57 07 	lds	r24, 0x0757	; 0x800757 <min_degree+0x2>
    213a:	90 91 58 07 	lds	r25, 0x0758	; 0x800758 <min_degree+0x3>
    213e:	0e 94 b0 00 	call	0x160	; 0x160 <hand_degree>
			break;
    2142:	25 c0       	rjmp	.+74     	; 0x218e <InterpretaComando+0x724>
		case 'O':
			printf("Opening hand...\r\n");
    2144:	82 e2       	ldi	r24, 0x22	; 34
    2146:	97 e0       	ldi	r25, 0x07	; 7
    2148:	0e 94 b0 13 	call	0x2760	; 0x2760 <puts>
			hand_degree(max_degree);
    214c:	60 91 64 07 	lds	r22, 0x0764	; 0x800764 <max_degree>
    2150:	70 91 65 07 	lds	r23, 0x0765	; 0x800765 <max_degree+0x1>
    2154:	80 91 66 07 	lds	r24, 0x0766	; 0x800766 <max_degree+0x2>
    2158:	90 91 67 07 	lds	r25, 0x0767	; 0x800767 <max_degree+0x3>
    215c:	0e 94 b0 00 	call	0x160	; 0x160 <hand_degree>
			break;
    2160:	16 c0       	rjmp	.+44     	; 0x218e <InterpretaComando+0x724>
		case 'R':
			printf("Reset to initial position.\r\n");
    2162:	83 e3       	ldi	r24, 0x33	; 51
    2164:	97 e0       	ldi	r25, 0x07	; 7
    2166:	0e 94 b0 13 	call	0x2760	; 0x2760 <puts>
			hand_degree(init_degree);
    216a:	60 91 60 07 	lds	r22, 0x0760	; 0x800760 <init_degree>
    216e:	70 91 61 07 	lds	r23, 0x0761	; 0x800761 <init_degree+0x1>
    2172:	80 91 62 07 	lds	r24, 0x0762	; 0x800762 <init_degree+0x2>
    2176:	90 91 63 07 	lds	r25, 0x0763	; 0x800763 <init_degree+0x3>
    217a:	0e 94 b0 00 	call	0x160	; 0x160 <hand_degree>
			break;
    217e:	07 c0       	rjmp	.+14     	; 0x218e <InterpretaComando+0x724>
		case 'h':
			help();
    2180:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <help>
			break;
    2184:	04 c0       	rjmp	.+8      	; 0x218e <InterpretaComando+0x724>
		default:
			printf("The command wasn't recognized, try using the help command (:h).\r\n");
    2186:	8a e3       	ldi	r24, 0x3A	; 58
    2188:	96 e0       	ldi	r25, 0x06	; 6
    218a:	0e 94 b0 13 	call	0x2760	; 0x2760 <puts>
			break;
	}
}
    218e:	df 91       	pop	r29
    2190:	cf 91       	pop	r28
    2192:	ff 90       	pop	r15
    2194:	ef 90       	pop	r14
    2196:	df 90       	pop	r13
    2198:	cf 90       	pop	r12
    219a:	bf 90       	pop	r11
    219c:	af 90       	pop	r10
    219e:	9f 90       	pop	r9
    21a0:	8f 90       	pop	r8
    21a2:	08 95       	ret

000021a4 <main>:
#include "lib/main.h"

int main(void)
{
	// Configuracion de las interrupciones externas INT0
	configuracion_INT0(INT0_flancoSubida);
    21a4:	83 e0       	ldi	r24, 0x03	; 3
    21a6:	0e 94 63 00 	call	0xc6	; 0xc6 <configuracion_INT0>
	
	// Configuracion de la UART
	UART_init(BAUD,1,0);	// Define baudrate, habilita interrupciones por Rx pero no por Tx
    21aa:	20 e0       	ldi	r18, 0x00	; 0
    21ac:	41 e0       	ldi	r20, 0x01	; 1
    21ae:	60 e8       	ldi	r22, 0x80	; 128
    21b0:	75 e2       	ldi	r23, 0x25	; 37
    21b2:	80 e0       	ldi	r24, 0x00	; 0
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	0e 94 42 0c 	call	0x1884	; 0x1884 <UART_init>
	
	// Configuracion de I2C slave
	I2C_init_slave(SLA, INTER_ON);
    21ba:	61 e0       	ldi	r22, 0x01	; 1
    21bc:	80 e2       	ldi	r24, 0x20	; 32
    21be:	0e 94 89 01 	call	0x312	; 0x312 <I2C_init_slave>
	
	// Iniciar mano en posicion inicial
	init_hand(init_degree);
    21c2:	60 91 60 07 	lds	r22, 0x0760	; 0x800760 <init_degree>
    21c6:	70 91 61 07 	lds	r23, 0x0761	; 0x800761 <init_degree+0x1>
    21ca:	80 91 62 07 	lds	r24, 0x0762	; 0x800762 <init_degree+0x2>
    21ce:	90 91 63 07 	lds	r25, 0x0763	; 0x800763 <init_degree+0x3>
    21d2:	0e 94 cd 00 	call	0x19a	; 0x19a <init_hand>
	
	sei();		// Habilitacion de interrupciones globales
    21d6:	78 94       	sei
	
	help();		// Muestra la guia de los comandos
    21d8:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <help>
    21dc:	ff cf       	rjmp	.-2      	; 0x21dc <main+0x38>

000021de <__subsf3>:
    21de:	50 58       	subi	r21, 0x80	; 128

000021e0 <__addsf3>:
    21e0:	bb 27       	eor	r27, r27
    21e2:	aa 27       	eor	r26, r26
    21e4:	0e 94 07 11 	call	0x220e	; 0x220e <__addsf3x>
    21e8:	0c 94 81 12 	jmp	0x2502	; 0x2502 <__fp_round>
    21ec:	0e 94 73 12 	call	0x24e6	; 0x24e6 <__fp_pscA>
    21f0:	38 f0       	brcs	.+14     	; 0x2200 <__addsf3+0x20>
    21f2:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <__fp_pscB>
    21f6:	20 f0       	brcs	.+8      	; 0x2200 <__addsf3+0x20>
    21f8:	39 f4       	brne	.+14     	; 0x2208 <__addsf3+0x28>
    21fa:	9f 3f       	cpi	r25, 0xFF	; 255
    21fc:	19 f4       	brne	.+6      	; 0x2204 <__addsf3+0x24>
    21fe:	26 f4       	brtc	.+8      	; 0x2208 <__addsf3+0x28>
    2200:	0c 94 70 12 	jmp	0x24e0	; 0x24e0 <__fp_nan>
    2204:	0e f4       	brtc	.+2      	; 0x2208 <__addsf3+0x28>
    2206:	e0 95       	com	r30
    2208:	e7 fb       	bst	r30, 7
    220a:	0c 94 6a 12 	jmp	0x24d4	; 0x24d4 <__fp_inf>

0000220e <__addsf3x>:
    220e:	e9 2f       	mov	r30, r25
    2210:	0e 94 92 12 	call	0x2524	; 0x2524 <__fp_split3>
    2214:	58 f3       	brcs	.-42     	; 0x21ec <__addsf3+0xc>
    2216:	ba 17       	cp	r27, r26
    2218:	62 07       	cpc	r22, r18
    221a:	73 07       	cpc	r23, r19
    221c:	84 07       	cpc	r24, r20
    221e:	95 07       	cpc	r25, r21
    2220:	20 f0       	brcs	.+8      	; 0x222a <__addsf3x+0x1c>
    2222:	79 f4       	brne	.+30     	; 0x2242 <__addsf3x+0x34>
    2224:	a6 f5       	brtc	.+104    	; 0x228e <__addsf3x+0x80>
    2226:	0c 94 b4 12 	jmp	0x2568	; 0x2568 <__fp_zero>
    222a:	0e f4       	brtc	.+2      	; 0x222e <__addsf3x+0x20>
    222c:	e0 95       	com	r30
    222e:	0b 2e       	mov	r0, r27
    2230:	ba 2f       	mov	r27, r26
    2232:	a0 2d       	mov	r26, r0
    2234:	0b 01       	movw	r0, r22
    2236:	b9 01       	movw	r22, r18
    2238:	90 01       	movw	r18, r0
    223a:	0c 01       	movw	r0, r24
    223c:	ca 01       	movw	r24, r20
    223e:	a0 01       	movw	r20, r0
    2240:	11 24       	eor	r1, r1
    2242:	ff 27       	eor	r31, r31
    2244:	59 1b       	sub	r21, r25
    2246:	99 f0       	breq	.+38     	; 0x226e <__addsf3x+0x60>
    2248:	59 3f       	cpi	r21, 0xF9	; 249
    224a:	50 f4       	brcc	.+20     	; 0x2260 <__addsf3x+0x52>
    224c:	50 3e       	cpi	r21, 0xE0	; 224
    224e:	68 f1       	brcs	.+90     	; 0x22aa <__addsf3x+0x9c>
    2250:	1a 16       	cp	r1, r26
    2252:	f0 40       	sbci	r31, 0x00	; 0
    2254:	a2 2f       	mov	r26, r18
    2256:	23 2f       	mov	r18, r19
    2258:	34 2f       	mov	r19, r20
    225a:	44 27       	eor	r20, r20
    225c:	58 5f       	subi	r21, 0xF8	; 248
    225e:	f3 cf       	rjmp	.-26     	; 0x2246 <__addsf3x+0x38>
    2260:	46 95       	lsr	r20
    2262:	37 95       	ror	r19
    2264:	27 95       	ror	r18
    2266:	a7 95       	ror	r26
    2268:	f0 40       	sbci	r31, 0x00	; 0
    226a:	53 95       	inc	r21
    226c:	c9 f7       	brne	.-14     	; 0x2260 <__addsf3x+0x52>
    226e:	7e f4       	brtc	.+30     	; 0x228e <__addsf3x+0x80>
    2270:	1f 16       	cp	r1, r31
    2272:	ba 0b       	sbc	r27, r26
    2274:	62 0b       	sbc	r22, r18
    2276:	73 0b       	sbc	r23, r19
    2278:	84 0b       	sbc	r24, r20
    227a:	ba f0       	brmi	.+46     	; 0x22aa <__addsf3x+0x9c>
    227c:	91 50       	subi	r25, 0x01	; 1
    227e:	a1 f0       	breq	.+40     	; 0x22a8 <__addsf3x+0x9a>
    2280:	ff 0f       	add	r31, r31
    2282:	bb 1f       	adc	r27, r27
    2284:	66 1f       	adc	r22, r22
    2286:	77 1f       	adc	r23, r23
    2288:	88 1f       	adc	r24, r24
    228a:	c2 f7       	brpl	.-16     	; 0x227c <__addsf3x+0x6e>
    228c:	0e c0       	rjmp	.+28     	; 0x22aa <__addsf3x+0x9c>
    228e:	ba 0f       	add	r27, r26
    2290:	62 1f       	adc	r22, r18
    2292:	73 1f       	adc	r23, r19
    2294:	84 1f       	adc	r24, r20
    2296:	48 f4       	brcc	.+18     	; 0x22aa <__addsf3x+0x9c>
    2298:	87 95       	ror	r24
    229a:	77 95       	ror	r23
    229c:	67 95       	ror	r22
    229e:	b7 95       	ror	r27
    22a0:	f7 95       	ror	r31
    22a2:	9e 3f       	cpi	r25, 0xFE	; 254
    22a4:	08 f0       	brcs	.+2      	; 0x22a8 <__addsf3x+0x9a>
    22a6:	b0 cf       	rjmp	.-160    	; 0x2208 <__addsf3+0x28>
    22a8:	93 95       	inc	r25
    22aa:	88 0f       	add	r24, r24
    22ac:	08 f0       	brcs	.+2      	; 0x22b0 <__addsf3x+0xa2>
    22ae:	99 27       	eor	r25, r25
    22b0:	ee 0f       	add	r30, r30
    22b2:	97 95       	ror	r25
    22b4:	87 95       	ror	r24
    22b6:	08 95       	ret

000022b8 <__cmpsf2>:
    22b8:	0e 94 46 12 	call	0x248c	; 0x248c <__fp_cmp>
    22bc:	08 f4       	brcc	.+2      	; 0x22c0 <__cmpsf2+0x8>
    22be:	81 e0       	ldi	r24, 0x01	; 1
    22c0:	08 95       	ret

000022c2 <__divsf3>:
    22c2:	0e 94 75 11 	call	0x22ea	; 0x22ea <__divsf3x>
    22c6:	0c 94 81 12 	jmp	0x2502	; 0x2502 <__fp_round>
    22ca:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <__fp_pscB>
    22ce:	58 f0       	brcs	.+22     	; 0x22e6 <__divsf3+0x24>
    22d0:	0e 94 73 12 	call	0x24e6	; 0x24e6 <__fp_pscA>
    22d4:	40 f0       	brcs	.+16     	; 0x22e6 <__divsf3+0x24>
    22d6:	29 f4       	brne	.+10     	; 0x22e2 <__divsf3+0x20>
    22d8:	5f 3f       	cpi	r21, 0xFF	; 255
    22da:	29 f0       	breq	.+10     	; 0x22e6 <__divsf3+0x24>
    22dc:	0c 94 6a 12 	jmp	0x24d4	; 0x24d4 <__fp_inf>
    22e0:	51 11       	cpse	r21, r1
    22e2:	0c 94 b5 12 	jmp	0x256a	; 0x256a <__fp_szero>
    22e6:	0c 94 70 12 	jmp	0x24e0	; 0x24e0 <__fp_nan>

000022ea <__divsf3x>:
    22ea:	0e 94 92 12 	call	0x2524	; 0x2524 <__fp_split3>
    22ee:	68 f3       	brcs	.-38     	; 0x22ca <__divsf3+0x8>

000022f0 <__divsf3_pse>:
    22f0:	99 23       	and	r25, r25
    22f2:	b1 f3       	breq	.-20     	; 0x22e0 <__divsf3+0x1e>
    22f4:	55 23       	and	r21, r21
    22f6:	91 f3       	breq	.-28     	; 0x22dc <__divsf3+0x1a>
    22f8:	95 1b       	sub	r25, r21
    22fa:	55 0b       	sbc	r21, r21
    22fc:	bb 27       	eor	r27, r27
    22fe:	aa 27       	eor	r26, r26
    2300:	62 17       	cp	r22, r18
    2302:	73 07       	cpc	r23, r19
    2304:	84 07       	cpc	r24, r20
    2306:	38 f0       	brcs	.+14     	; 0x2316 <__divsf3_pse+0x26>
    2308:	9f 5f       	subi	r25, 0xFF	; 255
    230a:	5f 4f       	sbci	r21, 0xFF	; 255
    230c:	22 0f       	add	r18, r18
    230e:	33 1f       	adc	r19, r19
    2310:	44 1f       	adc	r20, r20
    2312:	aa 1f       	adc	r26, r26
    2314:	a9 f3       	breq	.-22     	; 0x2300 <__divsf3_pse+0x10>
    2316:	35 d0       	rcall	.+106    	; 0x2382 <__divsf3_pse+0x92>
    2318:	0e 2e       	mov	r0, r30
    231a:	3a f0       	brmi	.+14     	; 0x232a <__divsf3_pse+0x3a>
    231c:	e0 e8       	ldi	r30, 0x80	; 128
    231e:	32 d0       	rcall	.+100    	; 0x2384 <__divsf3_pse+0x94>
    2320:	91 50       	subi	r25, 0x01	; 1
    2322:	50 40       	sbci	r21, 0x00	; 0
    2324:	e6 95       	lsr	r30
    2326:	00 1c       	adc	r0, r0
    2328:	ca f7       	brpl	.-14     	; 0x231c <__divsf3_pse+0x2c>
    232a:	2b d0       	rcall	.+86     	; 0x2382 <__divsf3_pse+0x92>
    232c:	fe 2f       	mov	r31, r30
    232e:	29 d0       	rcall	.+82     	; 0x2382 <__divsf3_pse+0x92>
    2330:	66 0f       	add	r22, r22
    2332:	77 1f       	adc	r23, r23
    2334:	88 1f       	adc	r24, r24
    2336:	bb 1f       	adc	r27, r27
    2338:	26 17       	cp	r18, r22
    233a:	37 07       	cpc	r19, r23
    233c:	48 07       	cpc	r20, r24
    233e:	ab 07       	cpc	r26, r27
    2340:	b0 e8       	ldi	r27, 0x80	; 128
    2342:	09 f0       	breq	.+2      	; 0x2346 <__divsf3_pse+0x56>
    2344:	bb 0b       	sbc	r27, r27
    2346:	80 2d       	mov	r24, r0
    2348:	bf 01       	movw	r22, r30
    234a:	ff 27       	eor	r31, r31
    234c:	93 58       	subi	r25, 0x83	; 131
    234e:	5f 4f       	sbci	r21, 0xFF	; 255
    2350:	3a f0       	brmi	.+14     	; 0x2360 <__divsf3_pse+0x70>
    2352:	9e 3f       	cpi	r25, 0xFE	; 254
    2354:	51 05       	cpc	r21, r1
    2356:	78 f0       	brcs	.+30     	; 0x2376 <__divsf3_pse+0x86>
    2358:	0c 94 6a 12 	jmp	0x24d4	; 0x24d4 <__fp_inf>
    235c:	0c 94 b5 12 	jmp	0x256a	; 0x256a <__fp_szero>
    2360:	5f 3f       	cpi	r21, 0xFF	; 255
    2362:	e4 f3       	brlt	.-8      	; 0x235c <__divsf3_pse+0x6c>
    2364:	98 3e       	cpi	r25, 0xE8	; 232
    2366:	d4 f3       	brlt	.-12     	; 0x235c <__divsf3_pse+0x6c>
    2368:	86 95       	lsr	r24
    236a:	77 95       	ror	r23
    236c:	67 95       	ror	r22
    236e:	b7 95       	ror	r27
    2370:	f7 95       	ror	r31
    2372:	9f 5f       	subi	r25, 0xFF	; 255
    2374:	c9 f7       	brne	.-14     	; 0x2368 <__divsf3_pse+0x78>
    2376:	88 0f       	add	r24, r24
    2378:	91 1d       	adc	r25, r1
    237a:	96 95       	lsr	r25
    237c:	87 95       	ror	r24
    237e:	97 f9       	bld	r25, 7
    2380:	08 95       	ret
    2382:	e1 e0       	ldi	r30, 0x01	; 1
    2384:	66 0f       	add	r22, r22
    2386:	77 1f       	adc	r23, r23
    2388:	88 1f       	adc	r24, r24
    238a:	bb 1f       	adc	r27, r27
    238c:	62 17       	cp	r22, r18
    238e:	73 07       	cpc	r23, r19
    2390:	84 07       	cpc	r24, r20
    2392:	ba 07       	cpc	r27, r26
    2394:	20 f0       	brcs	.+8      	; 0x239e <__divsf3_pse+0xae>
    2396:	62 1b       	sub	r22, r18
    2398:	73 0b       	sbc	r23, r19
    239a:	84 0b       	sbc	r24, r20
    239c:	ba 0b       	sbc	r27, r26
    239e:	ee 1f       	adc	r30, r30
    23a0:	88 f7       	brcc	.-30     	; 0x2384 <__divsf3_pse+0x94>
    23a2:	e0 95       	com	r30
    23a4:	08 95       	ret

000023a6 <__fixsfsi>:
    23a6:	0e 94 da 11 	call	0x23b4	; 0x23b4 <__fixunssfsi>
    23aa:	68 94       	set
    23ac:	b1 11       	cpse	r27, r1
    23ae:	0c 94 b5 12 	jmp	0x256a	; 0x256a <__fp_szero>
    23b2:	08 95       	ret

000023b4 <__fixunssfsi>:
    23b4:	0e 94 9a 12 	call	0x2534	; 0x2534 <__fp_splitA>
    23b8:	88 f0       	brcs	.+34     	; 0x23dc <__fixunssfsi+0x28>
    23ba:	9f 57       	subi	r25, 0x7F	; 127
    23bc:	98 f0       	brcs	.+38     	; 0x23e4 <__fixunssfsi+0x30>
    23be:	b9 2f       	mov	r27, r25
    23c0:	99 27       	eor	r25, r25
    23c2:	b7 51       	subi	r27, 0x17	; 23
    23c4:	b0 f0       	brcs	.+44     	; 0x23f2 <__fixunssfsi+0x3e>
    23c6:	e1 f0       	breq	.+56     	; 0x2400 <__fixunssfsi+0x4c>
    23c8:	66 0f       	add	r22, r22
    23ca:	77 1f       	adc	r23, r23
    23cc:	88 1f       	adc	r24, r24
    23ce:	99 1f       	adc	r25, r25
    23d0:	1a f0       	brmi	.+6      	; 0x23d8 <__fixunssfsi+0x24>
    23d2:	ba 95       	dec	r27
    23d4:	c9 f7       	brne	.-14     	; 0x23c8 <__fixunssfsi+0x14>
    23d6:	14 c0       	rjmp	.+40     	; 0x2400 <__fixunssfsi+0x4c>
    23d8:	b1 30       	cpi	r27, 0x01	; 1
    23da:	91 f0       	breq	.+36     	; 0x2400 <__fixunssfsi+0x4c>
    23dc:	0e 94 b4 12 	call	0x2568	; 0x2568 <__fp_zero>
    23e0:	b1 e0       	ldi	r27, 0x01	; 1
    23e2:	08 95       	ret
    23e4:	0c 94 b4 12 	jmp	0x2568	; 0x2568 <__fp_zero>
    23e8:	67 2f       	mov	r22, r23
    23ea:	78 2f       	mov	r23, r24
    23ec:	88 27       	eor	r24, r24
    23ee:	b8 5f       	subi	r27, 0xF8	; 248
    23f0:	39 f0       	breq	.+14     	; 0x2400 <__fixunssfsi+0x4c>
    23f2:	b9 3f       	cpi	r27, 0xF9	; 249
    23f4:	cc f3       	brlt	.-14     	; 0x23e8 <__fixunssfsi+0x34>
    23f6:	86 95       	lsr	r24
    23f8:	77 95       	ror	r23
    23fa:	67 95       	ror	r22
    23fc:	b3 95       	inc	r27
    23fe:	d9 f7       	brne	.-10     	; 0x23f6 <__fixunssfsi+0x42>
    2400:	3e f4       	brtc	.+14     	; 0x2410 <__fixunssfsi+0x5c>
    2402:	90 95       	com	r25
    2404:	80 95       	com	r24
    2406:	70 95       	com	r23
    2408:	61 95       	neg	r22
    240a:	7f 4f       	sbci	r23, 0xFF	; 255
    240c:	8f 4f       	sbci	r24, 0xFF	; 255
    240e:	9f 4f       	sbci	r25, 0xFF	; 255
    2410:	08 95       	ret

00002412 <__floatunsisf>:
    2412:	e8 94       	clt
    2414:	09 c0       	rjmp	.+18     	; 0x2428 <__floatsisf+0x12>

00002416 <__floatsisf>:
    2416:	97 fb       	bst	r25, 7
    2418:	3e f4       	brtc	.+14     	; 0x2428 <__floatsisf+0x12>
    241a:	90 95       	com	r25
    241c:	80 95       	com	r24
    241e:	70 95       	com	r23
    2420:	61 95       	neg	r22
    2422:	7f 4f       	sbci	r23, 0xFF	; 255
    2424:	8f 4f       	sbci	r24, 0xFF	; 255
    2426:	9f 4f       	sbci	r25, 0xFF	; 255
    2428:	99 23       	and	r25, r25
    242a:	a9 f0       	breq	.+42     	; 0x2456 <__floatsisf+0x40>
    242c:	f9 2f       	mov	r31, r25
    242e:	96 e9       	ldi	r25, 0x96	; 150
    2430:	bb 27       	eor	r27, r27
    2432:	93 95       	inc	r25
    2434:	f6 95       	lsr	r31
    2436:	87 95       	ror	r24
    2438:	77 95       	ror	r23
    243a:	67 95       	ror	r22
    243c:	b7 95       	ror	r27
    243e:	f1 11       	cpse	r31, r1
    2440:	f8 cf       	rjmp	.-16     	; 0x2432 <__floatsisf+0x1c>
    2442:	fa f4       	brpl	.+62     	; 0x2482 <__floatsisf+0x6c>
    2444:	bb 0f       	add	r27, r27
    2446:	11 f4       	brne	.+4      	; 0x244c <__floatsisf+0x36>
    2448:	60 ff       	sbrs	r22, 0
    244a:	1b c0       	rjmp	.+54     	; 0x2482 <__floatsisf+0x6c>
    244c:	6f 5f       	subi	r22, 0xFF	; 255
    244e:	7f 4f       	sbci	r23, 0xFF	; 255
    2450:	8f 4f       	sbci	r24, 0xFF	; 255
    2452:	9f 4f       	sbci	r25, 0xFF	; 255
    2454:	16 c0       	rjmp	.+44     	; 0x2482 <__floatsisf+0x6c>
    2456:	88 23       	and	r24, r24
    2458:	11 f0       	breq	.+4      	; 0x245e <__floatsisf+0x48>
    245a:	96 e9       	ldi	r25, 0x96	; 150
    245c:	11 c0       	rjmp	.+34     	; 0x2480 <__floatsisf+0x6a>
    245e:	77 23       	and	r23, r23
    2460:	21 f0       	breq	.+8      	; 0x246a <__floatsisf+0x54>
    2462:	9e e8       	ldi	r25, 0x8E	; 142
    2464:	87 2f       	mov	r24, r23
    2466:	76 2f       	mov	r23, r22
    2468:	05 c0       	rjmp	.+10     	; 0x2474 <__floatsisf+0x5e>
    246a:	66 23       	and	r22, r22
    246c:	71 f0       	breq	.+28     	; 0x248a <__floatsisf+0x74>
    246e:	96 e8       	ldi	r25, 0x86	; 134
    2470:	86 2f       	mov	r24, r22
    2472:	70 e0       	ldi	r23, 0x00	; 0
    2474:	60 e0       	ldi	r22, 0x00	; 0
    2476:	2a f0       	brmi	.+10     	; 0x2482 <__floatsisf+0x6c>
    2478:	9a 95       	dec	r25
    247a:	66 0f       	add	r22, r22
    247c:	77 1f       	adc	r23, r23
    247e:	88 1f       	adc	r24, r24
    2480:	da f7       	brpl	.-10     	; 0x2478 <__floatsisf+0x62>
    2482:	88 0f       	add	r24, r24
    2484:	96 95       	lsr	r25
    2486:	87 95       	ror	r24
    2488:	97 f9       	bld	r25, 7
    248a:	08 95       	ret

0000248c <__fp_cmp>:
    248c:	99 0f       	add	r25, r25
    248e:	00 08       	sbc	r0, r0
    2490:	55 0f       	add	r21, r21
    2492:	aa 0b       	sbc	r26, r26
    2494:	e0 e8       	ldi	r30, 0x80	; 128
    2496:	fe ef       	ldi	r31, 0xFE	; 254
    2498:	16 16       	cp	r1, r22
    249a:	17 06       	cpc	r1, r23
    249c:	e8 07       	cpc	r30, r24
    249e:	f9 07       	cpc	r31, r25
    24a0:	c0 f0       	brcs	.+48     	; 0x24d2 <__fp_cmp+0x46>
    24a2:	12 16       	cp	r1, r18
    24a4:	13 06       	cpc	r1, r19
    24a6:	e4 07       	cpc	r30, r20
    24a8:	f5 07       	cpc	r31, r21
    24aa:	98 f0       	brcs	.+38     	; 0x24d2 <__fp_cmp+0x46>
    24ac:	62 1b       	sub	r22, r18
    24ae:	73 0b       	sbc	r23, r19
    24b0:	84 0b       	sbc	r24, r20
    24b2:	95 0b       	sbc	r25, r21
    24b4:	39 f4       	brne	.+14     	; 0x24c4 <__fp_cmp+0x38>
    24b6:	0a 26       	eor	r0, r26
    24b8:	61 f0       	breq	.+24     	; 0x24d2 <__fp_cmp+0x46>
    24ba:	23 2b       	or	r18, r19
    24bc:	24 2b       	or	r18, r20
    24be:	25 2b       	or	r18, r21
    24c0:	21 f4       	brne	.+8      	; 0x24ca <__fp_cmp+0x3e>
    24c2:	08 95       	ret
    24c4:	0a 26       	eor	r0, r26
    24c6:	09 f4       	brne	.+2      	; 0x24ca <__fp_cmp+0x3e>
    24c8:	a1 40       	sbci	r26, 0x01	; 1
    24ca:	a6 95       	lsr	r26
    24cc:	8f ef       	ldi	r24, 0xFF	; 255
    24ce:	81 1d       	adc	r24, r1
    24d0:	81 1d       	adc	r24, r1
    24d2:	08 95       	ret

000024d4 <__fp_inf>:
    24d4:	97 f9       	bld	r25, 7
    24d6:	9f 67       	ori	r25, 0x7F	; 127
    24d8:	80 e8       	ldi	r24, 0x80	; 128
    24da:	70 e0       	ldi	r23, 0x00	; 0
    24dc:	60 e0       	ldi	r22, 0x00	; 0
    24de:	08 95       	ret

000024e0 <__fp_nan>:
    24e0:	9f ef       	ldi	r25, 0xFF	; 255
    24e2:	80 ec       	ldi	r24, 0xC0	; 192
    24e4:	08 95       	ret

000024e6 <__fp_pscA>:
    24e6:	00 24       	eor	r0, r0
    24e8:	0a 94       	dec	r0
    24ea:	16 16       	cp	r1, r22
    24ec:	17 06       	cpc	r1, r23
    24ee:	18 06       	cpc	r1, r24
    24f0:	09 06       	cpc	r0, r25
    24f2:	08 95       	ret

000024f4 <__fp_pscB>:
    24f4:	00 24       	eor	r0, r0
    24f6:	0a 94       	dec	r0
    24f8:	12 16       	cp	r1, r18
    24fa:	13 06       	cpc	r1, r19
    24fc:	14 06       	cpc	r1, r20
    24fe:	05 06       	cpc	r0, r21
    2500:	08 95       	ret

00002502 <__fp_round>:
    2502:	09 2e       	mov	r0, r25
    2504:	03 94       	inc	r0
    2506:	00 0c       	add	r0, r0
    2508:	11 f4       	brne	.+4      	; 0x250e <__fp_round+0xc>
    250a:	88 23       	and	r24, r24
    250c:	52 f0       	brmi	.+20     	; 0x2522 <__fp_round+0x20>
    250e:	bb 0f       	add	r27, r27
    2510:	40 f4       	brcc	.+16     	; 0x2522 <__fp_round+0x20>
    2512:	bf 2b       	or	r27, r31
    2514:	11 f4       	brne	.+4      	; 0x251a <__fp_round+0x18>
    2516:	60 ff       	sbrs	r22, 0
    2518:	04 c0       	rjmp	.+8      	; 0x2522 <__fp_round+0x20>
    251a:	6f 5f       	subi	r22, 0xFF	; 255
    251c:	7f 4f       	sbci	r23, 0xFF	; 255
    251e:	8f 4f       	sbci	r24, 0xFF	; 255
    2520:	9f 4f       	sbci	r25, 0xFF	; 255
    2522:	08 95       	ret

00002524 <__fp_split3>:
    2524:	57 fd       	sbrc	r21, 7
    2526:	90 58       	subi	r25, 0x80	; 128
    2528:	44 0f       	add	r20, r20
    252a:	55 1f       	adc	r21, r21
    252c:	59 f0       	breq	.+22     	; 0x2544 <__fp_splitA+0x10>
    252e:	5f 3f       	cpi	r21, 0xFF	; 255
    2530:	71 f0       	breq	.+28     	; 0x254e <__fp_splitA+0x1a>
    2532:	47 95       	ror	r20

00002534 <__fp_splitA>:
    2534:	88 0f       	add	r24, r24
    2536:	97 fb       	bst	r25, 7
    2538:	99 1f       	adc	r25, r25
    253a:	61 f0       	breq	.+24     	; 0x2554 <__fp_splitA+0x20>
    253c:	9f 3f       	cpi	r25, 0xFF	; 255
    253e:	79 f0       	breq	.+30     	; 0x255e <__fp_splitA+0x2a>
    2540:	87 95       	ror	r24
    2542:	08 95       	ret
    2544:	12 16       	cp	r1, r18
    2546:	13 06       	cpc	r1, r19
    2548:	14 06       	cpc	r1, r20
    254a:	55 1f       	adc	r21, r21
    254c:	f2 cf       	rjmp	.-28     	; 0x2532 <__fp_split3+0xe>
    254e:	46 95       	lsr	r20
    2550:	f1 df       	rcall	.-30     	; 0x2534 <__fp_splitA>
    2552:	08 c0       	rjmp	.+16     	; 0x2564 <__fp_splitA+0x30>
    2554:	16 16       	cp	r1, r22
    2556:	17 06       	cpc	r1, r23
    2558:	18 06       	cpc	r1, r24
    255a:	99 1f       	adc	r25, r25
    255c:	f1 cf       	rjmp	.-30     	; 0x2540 <__fp_splitA+0xc>
    255e:	86 95       	lsr	r24
    2560:	71 05       	cpc	r23, r1
    2562:	61 05       	cpc	r22, r1
    2564:	08 94       	sec
    2566:	08 95       	ret

00002568 <__fp_zero>:
    2568:	e8 94       	clt

0000256a <__fp_szero>:
    256a:	bb 27       	eor	r27, r27
    256c:	66 27       	eor	r22, r22
    256e:	77 27       	eor	r23, r23
    2570:	cb 01       	movw	r24, r22
    2572:	97 f9       	bld	r25, 7
    2574:	08 95       	ret

00002576 <__gesf2>:
    2576:	0e 94 46 12 	call	0x248c	; 0x248c <__fp_cmp>
    257a:	08 f4       	brcc	.+2      	; 0x257e <__gesf2+0x8>
    257c:	8f ef       	ldi	r24, 0xFF	; 255
    257e:	08 95       	ret

00002580 <__mulsf3>:
    2580:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <__mulsf3x>
    2584:	0c 94 81 12 	jmp	0x2502	; 0x2502 <__fp_round>
    2588:	0e 94 73 12 	call	0x24e6	; 0x24e6 <__fp_pscA>
    258c:	38 f0       	brcs	.+14     	; 0x259c <__mulsf3+0x1c>
    258e:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <__fp_pscB>
    2592:	20 f0       	brcs	.+8      	; 0x259c <__mulsf3+0x1c>
    2594:	95 23       	and	r25, r21
    2596:	11 f0       	breq	.+4      	; 0x259c <__mulsf3+0x1c>
    2598:	0c 94 6a 12 	jmp	0x24d4	; 0x24d4 <__fp_inf>
    259c:	0c 94 70 12 	jmp	0x24e0	; 0x24e0 <__fp_nan>
    25a0:	11 24       	eor	r1, r1
    25a2:	0c 94 b5 12 	jmp	0x256a	; 0x256a <__fp_szero>

000025a6 <__mulsf3x>:
    25a6:	0e 94 92 12 	call	0x2524	; 0x2524 <__fp_split3>
    25aa:	70 f3       	brcs	.-36     	; 0x2588 <__mulsf3+0x8>

000025ac <__mulsf3_pse>:
    25ac:	95 9f       	mul	r25, r21
    25ae:	c1 f3       	breq	.-16     	; 0x25a0 <__mulsf3+0x20>
    25b0:	95 0f       	add	r25, r21
    25b2:	50 e0       	ldi	r21, 0x00	; 0
    25b4:	55 1f       	adc	r21, r21
    25b6:	62 9f       	mul	r22, r18
    25b8:	f0 01       	movw	r30, r0
    25ba:	72 9f       	mul	r23, r18
    25bc:	bb 27       	eor	r27, r27
    25be:	f0 0d       	add	r31, r0
    25c0:	b1 1d       	adc	r27, r1
    25c2:	63 9f       	mul	r22, r19
    25c4:	aa 27       	eor	r26, r26
    25c6:	f0 0d       	add	r31, r0
    25c8:	b1 1d       	adc	r27, r1
    25ca:	aa 1f       	adc	r26, r26
    25cc:	64 9f       	mul	r22, r20
    25ce:	66 27       	eor	r22, r22
    25d0:	b0 0d       	add	r27, r0
    25d2:	a1 1d       	adc	r26, r1
    25d4:	66 1f       	adc	r22, r22
    25d6:	82 9f       	mul	r24, r18
    25d8:	22 27       	eor	r18, r18
    25da:	b0 0d       	add	r27, r0
    25dc:	a1 1d       	adc	r26, r1
    25de:	62 1f       	adc	r22, r18
    25e0:	73 9f       	mul	r23, r19
    25e2:	b0 0d       	add	r27, r0
    25e4:	a1 1d       	adc	r26, r1
    25e6:	62 1f       	adc	r22, r18
    25e8:	83 9f       	mul	r24, r19
    25ea:	a0 0d       	add	r26, r0
    25ec:	61 1d       	adc	r22, r1
    25ee:	22 1f       	adc	r18, r18
    25f0:	74 9f       	mul	r23, r20
    25f2:	33 27       	eor	r19, r19
    25f4:	a0 0d       	add	r26, r0
    25f6:	61 1d       	adc	r22, r1
    25f8:	23 1f       	adc	r18, r19
    25fa:	84 9f       	mul	r24, r20
    25fc:	60 0d       	add	r22, r0
    25fe:	21 1d       	adc	r18, r1
    2600:	82 2f       	mov	r24, r18
    2602:	76 2f       	mov	r23, r22
    2604:	6a 2f       	mov	r22, r26
    2606:	11 24       	eor	r1, r1
    2608:	9f 57       	subi	r25, 0x7F	; 127
    260a:	50 40       	sbci	r21, 0x00	; 0
    260c:	9a f0       	brmi	.+38     	; 0x2634 <__mulsf3_pse+0x88>
    260e:	f1 f0       	breq	.+60     	; 0x264c <__mulsf3_pse+0xa0>
    2610:	88 23       	and	r24, r24
    2612:	4a f0       	brmi	.+18     	; 0x2626 <__mulsf3_pse+0x7a>
    2614:	ee 0f       	add	r30, r30
    2616:	ff 1f       	adc	r31, r31
    2618:	bb 1f       	adc	r27, r27
    261a:	66 1f       	adc	r22, r22
    261c:	77 1f       	adc	r23, r23
    261e:	88 1f       	adc	r24, r24
    2620:	91 50       	subi	r25, 0x01	; 1
    2622:	50 40       	sbci	r21, 0x00	; 0
    2624:	a9 f7       	brne	.-22     	; 0x2610 <__mulsf3_pse+0x64>
    2626:	9e 3f       	cpi	r25, 0xFE	; 254
    2628:	51 05       	cpc	r21, r1
    262a:	80 f0       	brcs	.+32     	; 0x264c <__mulsf3_pse+0xa0>
    262c:	0c 94 6a 12 	jmp	0x24d4	; 0x24d4 <__fp_inf>
    2630:	0c 94 b5 12 	jmp	0x256a	; 0x256a <__fp_szero>
    2634:	5f 3f       	cpi	r21, 0xFF	; 255
    2636:	e4 f3       	brlt	.-8      	; 0x2630 <__mulsf3_pse+0x84>
    2638:	98 3e       	cpi	r25, 0xE8	; 232
    263a:	d4 f3       	brlt	.-12     	; 0x2630 <__mulsf3_pse+0x84>
    263c:	86 95       	lsr	r24
    263e:	77 95       	ror	r23
    2640:	67 95       	ror	r22
    2642:	b7 95       	ror	r27
    2644:	f7 95       	ror	r31
    2646:	e7 95       	ror	r30
    2648:	9f 5f       	subi	r25, 0xFF	; 255
    264a:	c1 f7       	brne	.-16     	; 0x263c <__mulsf3_pse+0x90>
    264c:	fe 2b       	or	r31, r30
    264e:	88 0f       	add	r24, r24
    2650:	91 1d       	adc	r25, r1
    2652:	96 95       	lsr	r25
    2654:	87 95       	ror	r24
    2656:	97 f9       	bld	r25, 7
    2658:	08 95       	ret

0000265a <__udivmodsi4>:
    265a:	a1 e2       	ldi	r26, 0x21	; 33
    265c:	1a 2e       	mov	r1, r26
    265e:	aa 1b       	sub	r26, r26
    2660:	bb 1b       	sub	r27, r27
    2662:	fd 01       	movw	r30, r26
    2664:	0d c0       	rjmp	.+26     	; 0x2680 <__udivmodsi4_ep>

00002666 <__udivmodsi4_loop>:
    2666:	aa 1f       	adc	r26, r26
    2668:	bb 1f       	adc	r27, r27
    266a:	ee 1f       	adc	r30, r30
    266c:	ff 1f       	adc	r31, r31
    266e:	a2 17       	cp	r26, r18
    2670:	b3 07       	cpc	r27, r19
    2672:	e4 07       	cpc	r30, r20
    2674:	f5 07       	cpc	r31, r21
    2676:	20 f0       	brcs	.+8      	; 0x2680 <__udivmodsi4_ep>
    2678:	a2 1b       	sub	r26, r18
    267a:	b3 0b       	sbc	r27, r19
    267c:	e4 0b       	sbc	r30, r20
    267e:	f5 0b       	sbc	r31, r21

00002680 <__udivmodsi4_ep>:
    2680:	66 1f       	adc	r22, r22
    2682:	77 1f       	adc	r23, r23
    2684:	88 1f       	adc	r24, r24
    2686:	99 1f       	adc	r25, r25
    2688:	1a 94       	dec	r1
    268a:	69 f7       	brne	.-38     	; 0x2666 <__udivmodsi4_loop>
    268c:	60 95       	com	r22
    268e:	70 95       	com	r23
    2690:	80 95       	com	r24
    2692:	90 95       	com	r25
    2694:	9b 01       	movw	r18, r22
    2696:	ac 01       	movw	r20, r24
    2698:	bd 01       	movw	r22, r26
    269a:	cf 01       	movw	r24, r30
    269c:	08 95       	ret

0000269e <__divmodsi4>:
    269e:	05 2e       	mov	r0, r21
    26a0:	97 fb       	bst	r25, 7
    26a2:	1e f4       	brtc	.+6      	; 0x26aa <__divmodsi4+0xc>
    26a4:	00 94       	com	r0
    26a6:	0e 94 66 13 	call	0x26cc	; 0x26cc <__negsi2>
    26aa:	57 fd       	sbrc	r21, 7
    26ac:	07 d0       	rcall	.+14     	; 0x26bc <__divmodsi4_neg2>
    26ae:	0e 94 2d 13 	call	0x265a	; 0x265a <__udivmodsi4>
    26b2:	07 fc       	sbrc	r0, 7
    26b4:	03 d0       	rcall	.+6      	; 0x26bc <__divmodsi4_neg2>
    26b6:	4e f4       	brtc	.+18     	; 0x26ca <__divmodsi4_exit>
    26b8:	0c 94 66 13 	jmp	0x26cc	; 0x26cc <__negsi2>

000026bc <__divmodsi4_neg2>:
    26bc:	50 95       	com	r21
    26be:	40 95       	com	r20
    26c0:	30 95       	com	r19
    26c2:	21 95       	neg	r18
    26c4:	3f 4f       	sbci	r19, 0xFF	; 255
    26c6:	4f 4f       	sbci	r20, 0xFF	; 255
    26c8:	5f 4f       	sbci	r21, 0xFF	; 255

000026ca <__divmodsi4_exit>:
    26ca:	08 95       	ret

000026cc <__negsi2>:
    26cc:	90 95       	com	r25
    26ce:	80 95       	com	r24
    26d0:	70 95       	com	r23
    26d2:	61 95       	neg	r22
    26d4:	7f 4f       	sbci	r23, 0xFF	; 255
    26d6:	8f 4f       	sbci	r24, 0xFF	; 255
    26d8:	9f 4f       	sbci	r25, 0xFF	; 255
    26da:	08 95       	ret

000026dc <__tablejump2__>:
    26dc:	ee 0f       	add	r30, r30
    26de:	ff 1f       	adc	r31, r31
    26e0:	05 90       	lpm	r0, Z+
    26e2:	f4 91       	lpm	r31, Z
    26e4:	e0 2d       	mov	r30, r0
    26e6:	09 94       	ijmp

000026e8 <atoi>:
    26e8:	fc 01       	movw	r30, r24
    26ea:	88 27       	eor	r24, r24
    26ec:	99 27       	eor	r25, r25
    26ee:	e8 94       	clt
    26f0:	21 91       	ld	r18, Z+
    26f2:	20 32       	cpi	r18, 0x20	; 32
    26f4:	e9 f3       	breq	.-6      	; 0x26f0 <atoi+0x8>
    26f6:	29 30       	cpi	r18, 0x09	; 9
    26f8:	10 f0       	brcs	.+4      	; 0x26fe <atoi+0x16>
    26fa:	2e 30       	cpi	r18, 0x0E	; 14
    26fc:	c8 f3       	brcs	.-14     	; 0x26f0 <atoi+0x8>
    26fe:	2b 32       	cpi	r18, 0x2B	; 43
    2700:	41 f0       	breq	.+16     	; 0x2712 <atoi+0x2a>
    2702:	2d 32       	cpi	r18, 0x2D	; 45
    2704:	39 f4       	brne	.+14     	; 0x2714 <atoi+0x2c>
    2706:	68 94       	set
    2708:	04 c0       	rjmp	.+8      	; 0x2712 <atoi+0x2a>
    270a:	0e 94 92 13 	call	0x2724	; 0x2724 <__mulhi_const_10>
    270e:	82 0f       	add	r24, r18
    2710:	91 1d       	adc	r25, r1
    2712:	21 91       	ld	r18, Z+
    2714:	20 53       	subi	r18, 0x30	; 48
    2716:	2a 30       	cpi	r18, 0x0A	; 10
    2718:	c0 f3       	brcs	.-16     	; 0x270a <atoi+0x22>
    271a:	1e f4       	brtc	.+6      	; 0x2722 <atoi+0x3a>
    271c:	90 95       	com	r25
    271e:	81 95       	neg	r24
    2720:	9f 4f       	sbci	r25, 0xFF	; 255
    2722:	08 95       	ret

00002724 <__mulhi_const_10>:
    2724:	7a e0       	ldi	r23, 0x0A	; 10
    2726:	97 9f       	mul	r25, r23
    2728:	90 2d       	mov	r25, r0
    272a:	87 9f       	mul	r24, r23
    272c:	80 2d       	mov	r24, r0
    272e:	91 0d       	add	r25, r1
    2730:	11 24       	eor	r1, r1
    2732:	08 95       	ret

00002734 <printf>:
    2734:	a0 e0       	ldi	r26, 0x00	; 0
    2736:	b0 e0       	ldi	r27, 0x00	; 0
    2738:	e0 ea       	ldi	r30, 0xA0	; 160
    273a:	f3 e1       	ldi	r31, 0x13	; 19
    273c:	0c 94 81 16 	jmp	0x2d02	; 0x2d02 <__prologue_saves__+0x20>
    2740:	ae 01       	movw	r20, r28
    2742:	4b 5f       	subi	r20, 0xFB	; 251
    2744:	5f 4f       	sbci	r21, 0xFF	; 255
    2746:	fa 01       	movw	r30, r20
    2748:	61 91       	ld	r22, Z+
    274a:	71 91       	ld	r23, Z+
    274c:	af 01       	movw	r20, r30
    274e:	80 91 8f 07 	lds	r24, 0x078F	; 0x80078f <__iob+0x2>
    2752:	90 91 90 07 	lds	r25, 0x0790	; 0x800790 <__iob+0x3>
    2756:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <vfprintf>
    275a:	e2 e0       	ldi	r30, 0x02	; 2
    275c:	0c 94 9d 16 	jmp	0x2d3a	; 0x2d3a <__epilogue_restores__+0x20>

00002760 <puts>:
    2760:	0f 93       	push	r16
    2762:	1f 93       	push	r17
    2764:	cf 93       	push	r28
    2766:	df 93       	push	r29
    2768:	e0 91 8f 07 	lds	r30, 0x078F	; 0x80078f <__iob+0x2>
    276c:	f0 91 90 07 	lds	r31, 0x0790	; 0x800790 <__iob+0x3>
    2770:	23 81       	ldd	r18, Z+3	; 0x03
    2772:	21 ff       	sbrs	r18, 1
    2774:	1b c0       	rjmp	.+54     	; 0x27ac <puts+0x4c>
    2776:	8c 01       	movw	r16, r24
    2778:	d0 e0       	ldi	r29, 0x00	; 0
    277a:	c0 e0       	ldi	r28, 0x00	; 0
    277c:	f8 01       	movw	r30, r16
    277e:	81 91       	ld	r24, Z+
    2780:	8f 01       	movw	r16, r30
    2782:	60 91 8f 07 	lds	r22, 0x078F	; 0x80078f <__iob+0x2>
    2786:	70 91 90 07 	lds	r23, 0x0790	; 0x800790 <__iob+0x3>
    278a:	db 01       	movw	r26, r22
    278c:	18 96       	adiw	r26, 0x08	; 8
    278e:	ed 91       	ld	r30, X+
    2790:	fc 91       	ld	r31, X
    2792:	19 97       	sbiw	r26, 0x09	; 9
    2794:	88 23       	and	r24, r24
    2796:	31 f0       	breq	.+12     	; 0x27a4 <puts+0x44>
    2798:	09 95       	icall
    279a:	89 2b       	or	r24, r25
    279c:	79 f3       	breq	.-34     	; 0x277c <puts+0x1c>
    279e:	df ef       	ldi	r29, 0xFF	; 255
    27a0:	cf ef       	ldi	r28, 0xFF	; 255
    27a2:	ec cf       	rjmp	.-40     	; 0x277c <puts+0x1c>
    27a4:	8a e0       	ldi	r24, 0x0A	; 10
    27a6:	09 95       	icall
    27a8:	89 2b       	or	r24, r25
    27aa:	19 f0       	breq	.+6      	; 0x27b2 <puts+0x52>
    27ac:	8f ef       	ldi	r24, 0xFF	; 255
    27ae:	9f ef       	ldi	r25, 0xFF	; 255
    27b0:	02 c0       	rjmp	.+4      	; 0x27b6 <puts+0x56>
    27b2:	8d 2f       	mov	r24, r29
    27b4:	9c 2f       	mov	r25, r28
    27b6:	df 91       	pop	r29
    27b8:	cf 91       	pop	r28
    27ba:	1f 91       	pop	r17
    27bc:	0f 91       	pop	r16
    27be:	08 95       	ret

000027c0 <vfprintf>:
    27c0:	ab e0       	ldi	r26, 0x0B	; 11
    27c2:	b0 e0       	ldi	r27, 0x00	; 0
    27c4:	e6 ee       	ldi	r30, 0xE6	; 230
    27c6:	f3 e1       	ldi	r31, 0x13	; 19
    27c8:	0c 94 71 16 	jmp	0x2ce2	; 0x2ce2 <__prologue_saves__>
    27cc:	6c 01       	movw	r12, r24
    27ce:	7b 01       	movw	r14, r22
    27d0:	8a 01       	movw	r16, r20
    27d2:	fc 01       	movw	r30, r24
    27d4:	17 82       	std	Z+7, r1	; 0x07
    27d6:	16 82       	std	Z+6, r1	; 0x06
    27d8:	83 81       	ldd	r24, Z+3	; 0x03
    27da:	81 ff       	sbrs	r24, 1
    27dc:	cc c1       	rjmp	.+920    	; 0x2b76 <vfprintf+0x3b6>
    27de:	ce 01       	movw	r24, r28
    27e0:	01 96       	adiw	r24, 0x01	; 1
    27e2:	3c 01       	movw	r6, r24
    27e4:	f6 01       	movw	r30, r12
    27e6:	93 81       	ldd	r25, Z+3	; 0x03
    27e8:	f7 01       	movw	r30, r14
    27ea:	93 fd       	sbrc	r25, 3
    27ec:	85 91       	lpm	r24, Z+
    27ee:	93 ff       	sbrs	r25, 3
    27f0:	81 91       	ld	r24, Z+
    27f2:	7f 01       	movw	r14, r30
    27f4:	88 23       	and	r24, r24
    27f6:	09 f4       	brne	.+2      	; 0x27fa <vfprintf+0x3a>
    27f8:	ba c1       	rjmp	.+884    	; 0x2b6e <vfprintf+0x3ae>
    27fa:	85 32       	cpi	r24, 0x25	; 37
    27fc:	39 f4       	brne	.+14     	; 0x280c <vfprintf+0x4c>
    27fe:	93 fd       	sbrc	r25, 3
    2800:	85 91       	lpm	r24, Z+
    2802:	93 ff       	sbrs	r25, 3
    2804:	81 91       	ld	r24, Z+
    2806:	7f 01       	movw	r14, r30
    2808:	85 32       	cpi	r24, 0x25	; 37
    280a:	29 f4       	brne	.+10     	; 0x2816 <vfprintf+0x56>
    280c:	b6 01       	movw	r22, r12
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	0e 94 d7 15 	call	0x2bae	; 0x2bae <fputc>
    2814:	e7 cf       	rjmp	.-50     	; 0x27e4 <vfprintf+0x24>
    2816:	91 2c       	mov	r9, r1
    2818:	21 2c       	mov	r2, r1
    281a:	31 2c       	mov	r3, r1
    281c:	ff e1       	ldi	r31, 0x1F	; 31
    281e:	f3 15       	cp	r31, r3
    2820:	d8 f0       	brcs	.+54     	; 0x2858 <vfprintf+0x98>
    2822:	8b 32       	cpi	r24, 0x2B	; 43
    2824:	79 f0       	breq	.+30     	; 0x2844 <vfprintf+0x84>
    2826:	38 f4       	brcc	.+14     	; 0x2836 <vfprintf+0x76>
    2828:	80 32       	cpi	r24, 0x20	; 32
    282a:	79 f0       	breq	.+30     	; 0x284a <vfprintf+0x8a>
    282c:	83 32       	cpi	r24, 0x23	; 35
    282e:	a1 f4       	brne	.+40     	; 0x2858 <vfprintf+0x98>
    2830:	23 2d       	mov	r18, r3
    2832:	20 61       	ori	r18, 0x10	; 16
    2834:	1d c0       	rjmp	.+58     	; 0x2870 <vfprintf+0xb0>
    2836:	8d 32       	cpi	r24, 0x2D	; 45
    2838:	61 f0       	breq	.+24     	; 0x2852 <vfprintf+0x92>
    283a:	80 33       	cpi	r24, 0x30	; 48
    283c:	69 f4       	brne	.+26     	; 0x2858 <vfprintf+0x98>
    283e:	23 2d       	mov	r18, r3
    2840:	21 60       	ori	r18, 0x01	; 1
    2842:	16 c0       	rjmp	.+44     	; 0x2870 <vfprintf+0xb0>
    2844:	83 2d       	mov	r24, r3
    2846:	82 60       	ori	r24, 0x02	; 2
    2848:	38 2e       	mov	r3, r24
    284a:	e3 2d       	mov	r30, r3
    284c:	e4 60       	ori	r30, 0x04	; 4
    284e:	3e 2e       	mov	r3, r30
    2850:	2a c0       	rjmp	.+84     	; 0x28a6 <vfprintf+0xe6>
    2852:	f3 2d       	mov	r31, r3
    2854:	f8 60       	ori	r31, 0x08	; 8
    2856:	1d c0       	rjmp	.+58     	; 0x2892 <vfprintf+0xd2>
    2858:	37 fc       	sbrc	r3, 7
    285a:	2d c0       	rjmp	.+90     	; 0x28b6 <vfprintf+0xf6>
    285c:	20 ed       	ldi	r18, 0xD0	; 208
    285e:	28 0f       	add	r18, r24
    2860:	2a 30       	cpi	r18, 0x0A	; 10
    2862:	40 f0       	brcs	.+16     	; 0x2874 <vfprintf+0xb4>
    2864:	8e 32       	cpi	r24, 0x2E	; 46
    2866:	b9 f4       	brne	.+46     	; 0x2896 <vfprintf+0xd6>
    2868:	36 fc       	sbrc	r3, 6
    286a:	81 c1       	rjmp	.+770    	; 0x2b6e <vfprintf+0x3ae>
    286c:	23 2d       	mov	r18, r3
    286e:	20 64       	ori	r18, 0x40	; 64
    2870:	32 2e       	mov	r3, r18
    2872:	19 c0       	rjmp	.+50     	; 0x28a6 <vfprintf+0xe6>
    2874:	36 fe       	sbrs	r3, 6
    2876:	06 c0       	rjmp	.+12     	; 0x2884 <vfprintf+0xc4>
    2878:	8a e0       	ldi	r24, 0x0A	; 10
    287a:	98 9e       	mul	r9, r24
    287c:	20 0d       	add	r18, r0
    287e:	11 24       	eor	r1, r1
    2880:	92 2e       	mov	r9, r18
    2882:	11 c0       	rjmp	.+34     	; 0x28a6 <vfprintf+0xe6>
    2884:	ea e0       	ldi	r30, 0x0A	; 10
    2886:	2e 9e       	mul	r2, r30
    2888:	20 0d       	add	r18, r0
    288a:	11 24       	eor	r1, r1
    288c:	22 2e       	mov	r2, r18
    288e:	f3 2d       	mov	r31, r3
    2890:	f0 62       	ori	r31, 0x20	; 32
    2892:	3f 2e       	mov	r3, r31
    2894:	08 c0       	rjmp	.+16     	; 0x28a6 <vfprintf+0xe6>
    2896:	8c 36       	cpi	r24, 0x6C	; 108
    2898:	21 f4       	brne	.+8      	; 0x28a2 <vfprintf+0xe2>
    289a:	83 2d       	mov	r24, r3
    289c:	80 68       	ori	r24, 0x80	; 128
    289e:	38 2e       	mov	r3, r24
    28a0:	02 c0       	rjmp	.+4      	; 0x28a6 <vfprintf+0xe6>
    28a2:	88 36       	cpi	r24, 0x68	; 104
    28a4:	41 f4       	brne	.+16     	; 0x28b6 <vfprintf+0xf6>
    28a6:	f7 01       	movw	r30, r14
    28a8:	93 fd       	sbrc	r25, 3
    28aa:	85 91       	lpm	r24, Z+
    28ac:	93 ff       	sbrs	r25, 3
    28ae:	81 91       	ld	r24, Z+
    28b0:	7f 01       	movw	r14, r30
    28b2:	81 11       	cpse	r24, r1
    28b4:	b3 cf       	rjmp	.-154    	; 0x281c <vfprintf+0x5c>
    28b6:	98 2f       	mov	r25, r24
    28b8:	9f 7d       	andi	r25, 0xDF	; 223
    28ba:	95 54       	subi	r25, 0x45	; 69
    28bc:	93 30       	cpi	r25, 0x03	; 3
    28be:	28 f4       	brcc	.+10     	; 0x28ca <vfprintf+0x10a>
    28c0:	0c 5f       	subi	r16, 0xFC	; 252
    28c2:	1f 4f       	sbci	r17, 0xFF	; 255
    28c4:	9f e3       	ldi	r25, 0x3F	; 63
    28c6:	99 83       	std	Y+1, r25	; 0x01
    28c8:	0d c0       	rjmp	.+26     	; 0x28e4 <vfprintf+0x124>
    28ca:	83 36       	cpi	r24, 0x63	; 99
    28cc:	31 f0       	breq	.+12     	; 0x28da <vfprintf+0x11a>
    28ce:	83 37       	cpi	r24, 0x73	; 115
    28d0:	71 f0       	breq	.+28     	; 0x28ee <vfprintf+0x12e>
    28d2:	83 35       	cpi	r24, 0x53	; 83
    28d4:	09 f0       	breq	.+2      	; 0x28d8 <vfprintf+0x118>
    28d6:	59 c0       	rjmp	.+178    	; 0x298a <vfprintf+0x1ca>
    28d8:	21 c0       	rjmp	.+66     	; 0x291c <vfprintf+0x15c>
    28da:	f8 01       	movw	r30, r16
    28dc:	80 81       	ld	r24, Z
    28de:	89 83       	std	Y+1, r24	; 0x01
    28e0:	0e 5f       	subi	r16, 0xFE	; 254
    28e2:	1f 4f       	sbci	r17, 0xFF	; 255
    28e4:	88 24       	eor	r8, r8
    28e6:	83 94       	inc	r8
    28e8:	91 2c       	mov	r9, r1
    28ea:	53 01       	movw	r10, r6
    28ec:	13 c0       	rjmp	.+38     	; 0x2914 <vfprintf+0x154>
    28ee:	28 01       	movw	r4, r16
    28f0:	f2 e0       	ldi	r31, 0x02	; 2
    28f2:	4f 0e       	add	r4, r31
    28f4:	51 1c       	adc	r5, r1
    28f6:	f8 01       	movw	r30, r16
    28f8:	a0 80       	ld	r10, Z
    28fa:	b1 80       	ldd	r11, Z+1	; 0x01
    28fc:	36 fe       	sbrs	r3, 6
    28fe:	03 c0       	rjmp	.+6      	; 0x2906 <vfprintf+0x146>
    2900:	69 2d       	mov	r22, r9
    2902:	70 e0       	ldi	r23, 0x00	; 0
    2904:	02 c0       	rjmp	.+4      	; 0x290a <vfprintf+0x14a>
    2906:	6f ef       	ldi	r22, 0xFF	; 255
    2908:	7f ef       	ldi	r23, 0xFF	; 255
    290a:	c5 01       	movw	r24, r10
    290c:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <strnlen>
    2910:	4c 01       	movw	r8, r24
    2912:	82 01       	movw	r16, r4
    2914:	f3 2d       	mov	r31, r3
    2916:	ff 77       	andi	r31, 0x7F	; 127
    2918:	3f 2e       	mov	r3, r31
    291a:	16 c0       	rjmp	.+44     	; 0x2948 <vfprintf+0x188>
    291c:	28 01       	movw	r4, r16
    291e:	22 e0       	ldi	r18, 0x02	; 2
    2920:	42 0e       	add	r4, r18
    2922:	51 1c       	adc	r5, r1
    2924:	f8 01       	movw	r30, r16
    2926:	a0 80       	ld	r10, Z
    2928:	b1 80       	ldd	r11, Z+1	; 0x01
    292a:	36 fe       	sbrs	r3, 6
    292c:	03 c0       	rjmp	.+6      	; 0x2934 <vfprintf+0x174>
    292e:	69 2d       	mov	r22, r9
    2930:	70 e0       	ldi	r23, 0x00	; 0
    2932:	02 c0       	rjmp	.+4      	; 0x2938 <vfprintf+0x178>
    2934:	6f ef       	ldi	r22, 0xFF	; 255
    2936:	7f ef       	ldi	r23, 0xFF	; 255
    2938:	c5 01       	movw	r24, r10
    293a:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <strnlen_P>
    293e:	4c 01       	movw	r8, r24
    2940:	f3 2d       	mov	r31, r3
    2942:	f0 68       	ori	r31, 0x80	; 128
    2944:	3f 2e       	mov	r3, r31
    2946:	82 01       	movw	r16, r4
    2948:	33 fc       	sbrc	r3, 3
    294a:	1b c0       	rjmp	.+54     	; 0x2982 <vfprintf+0x1c2>
    294c:	82 2d       	mov	r24, r2
    294e:	90 e0       	ldi	r25, 0x00	; 0
    2950:	88 16       	cp	r8, r24
    2952:	99 06       	cpc	r9, r25
    2954:	b0 f4       	brcc	.+44     	; 0x2982 <vfprintf+0x1c2>
    2956:	b6 01       	movw	r22, r12
    2958:	80 e2       	ldi	r24, 0x20	; 32
    295a:	90 e0       	ldi	r25, 0x00	; 0
    295c:	0e 94 d7 15 	call	0x2bae	; 0x2bae <fputc>
    2960:	2a 94       	dec	r2
    2962:	f4 cf       	rjmp	.-24     	; 0x294c <vfprintf+0x18c>
    2964:	f5 01       	movw	r30, r10
    2966:	37 fc       	sbrc	r3, 7
    2968:	85 91       	lpm	r24, Z+
    296a:	37 fe       	sbrs	r3, 7
    296c:	81 91       	ld	r24, Z+
    296e:	5f 01       	movw	r10, r30
    2970:	b6 01       	movw	r22, r12
    2972:	90 e0       	ldi	r25, 0x00	; 0
    2974:	0e 94 d7 15 	call	0x2bae	; 0x2bae <fputc>
    2978:	21 10       	cpse	r2, r1
    297a:	2a 94       	dec	r2
    297c:	21 e0       	ldi	r18, 0x01	; 1
    297e:	82 1a       	sub	r8, r18
    2980:	91 08       	sbc	r9, r1
    2982:	81 14       	cp	r8, r1
    2984:	91 04       	cpc	r9, r1
    2986:	71 f7       	brne	.-36     	; 0x2964 <vfprintf+0x1a4>
    2988:	e8 c0       	rjmp	.+464    	; 0x2b5a <vfprintf+0x39a>
    298a:	84 36       	cpi	r24, 0x64	; 100
    298c:	11 f0       	breq	.+4      	; 0x2992 <vfprintf+0x1d2>
    298e:	89 36       	cpi	r24, 0x69	; 105
    2990:	41 f5       	brne	.+80     	; 0x29e2 <vfprintf+0x222>
    2992:	f8 01       	movw	r30, r16
    2994:	37 fe       	sbrs	r3, 7
    2996:	07 c0       	rjmp	.+14     	; 0x29a6 <vfprintf+0x1e6>
    2998:	60 81       	ld	r22, Z
    299a:	71 81       	ldd	r23, Z+1	; 0x01
    299c:	82 81       	ldd	r24, Z+2	; 0x02
    299e:	93 81       	ldd	r25, Z+3	; 0x03
    29a0:	0c 5f       	subi	r16, 0xFC	; 252
    29a2:	1f 4f       	sbci	r17, 0xFF	; 255
    29a4:	08 c0       	rjmp	.+16     	; 0x29b6 <vfprintf+0x1f6>
    29a6:	60 81       	ld	r22, Z
    29a8:	71 81       	ldd	r23, Z+1	; 0x01
    29aa:	07 2e       	mov	r0, r23
    29ac:	00 0c       	add	r0, r0
    29ae:	88 0b       	sbc	r24, r24
    29b0:	99 0b       	sbc	r25, r25
    29b2:	0e 5f       	subi	r16, 0xFE	; 254
    29b4:	1f 4f       	sbci	r17, 0xFF	; 255
    29b6:	f3 2d       	mov	r31, r3
    29b8:	ff 76       	andi	r31, 0x6F	; 111
    29ba:	3f 2e       	mov	r3, r31
    29bc:	97 ff       	sbrs	r25, 7
    29be:	09 c0       	rjmp	.+18     	; 0x29d2 <vfprintf+0x212>
    29c0:	90 95       	com	r25
    29c2:	80 95       	com	r24
    29c4:	70 95       	com	r23
    29c6:	61 95       	neg	r22
    29c8:	7f 4f       	sbci	r23, 0xFF	; 255
    29ca:	8f 4f       	sbci	r24, 0xFF	; 255
    29cc:	9f 4f       	sbci	r25, 0xFF	; 255
    29ce:	f0 68       	ori	r31, 0x80	; 128
    29d0:	3f 2e       	mov	r3, r31
    29d2:	2a e0       	ldi	r18, 0x0A	; 10
    29d4:	30 e0       	ldi	r19, 0x00	; 0
    29d6:	a3 01       	movw	r20, r6
    29d8:	0e 94 13 16 	call	0x2c26	; 0x2c26 <__ultoa_invert>
    29dc:	88 2e       	mov	r8, r24
    29de:	86 18       	sub	r8, r6
    29e0:	45 c0       	rjmp	.+138    	; 0x2a6c <vfprintf+0x2ac>
    29e2:	85 37       	cpi	r24, 0x75	; 117
    29e4:	31 f4       	brne	.+12     	; 0x29f2 <vfprintf+0x232>
    29e6:	23 2d       	mov	r18, r3
    29e8:	2f 7e       	andi	r18, 0xEF	; 239
    29ea:	b2 2e       	mov	r11, r18
    29ec:	2a e0       	ldi	r18, 0x0A	; 10
    29ee:	30 e0       	ldi	r19, 0x00	; 0
    29f0:	25 c0       	rjmp	.+74     	; 0x2a3c <vfprintf+0x27c>
    29f2:	93 2d       	mov	r25, r3
    29f4:	99 7f       	andi	r25, 0xF9	; 249
    29f6:	b9 2e       	mov	r11, r25
    29f8:	8f 36       	cpi	r24, 0x6F	; 111
    29fa:	c1 f0       	breq	.+48     	; 0x2a2c <vfprintf+0x26c>
    29fc:	18 f4       	brcc	.+6      	; 0x2a04 <vfprintf+0x244>
    29fe:	88 35       	cpi	r24, 0x58	; 88
    2a00:	79 f0       	breq	.+30     	; 0x2a20 <vfprintf+0x260>
    2a02:	b5 c0       	rjmp	.+362    	; 0x2b6e <vfprintf+0x3ae>
    2a04:	80 37       	cpi	r24, 0x70	; 112
    2a06:	19 f0       	breq	.+6      	; 0x2a0e <vfprintf+0x24e>
    2a08:	88 37       	cpi	r24, 0x78	; 120
    2a0a:	21 f0       	breq	.+8      	; 0x2a14 <vfprintf+0x254>
    2a0c:	b0 c0       	rjmp	.+352    	; 0x2b6e <vfprintf+0x3ae>
    2a0e:	e9 2f       	mov	r30, r25
    2a10:	e0 61       	ori	r30, 0x10	; 16
    2a12:	be 2e       	mov	r11, r30
    2a14:	b4 fe       	sbrs	r11, 4
    2a16:	0d c0       	rjmp	.+26     	; 0x2a32 <vfprintf+0x272>
    2a18:	fb 2d       	mov	r31, r11
    2a1a:	f4 60       	ori	r31, 0x04	; 4
    2a1c:	bf 2e       	mov	r11, r31
    2a1e:	09 c0       	rjmp	.+18     	; 0x2a32 <vfprintf+0x272>
    2a20:	34 fe       	sbrs	r3, 4
    2a22:	0a c0       	rjmp	.+20     	; 0x2a38 <vfprintf+0x278>
    2a24:	29 2f       	mov	r18, r25
    2a26:	26 60       	ori	r18, 0x06	; 6
    2a28:	b2 2e       	mov	r11, r18
    2a2a:	06 c0       	rjmp	.+12     	; 0x2a38 <vfprintf+0x278>
    2a2c:	28 e0       	ldi	r18, 0x08	; 8
    2a2e:	30 e0       	ldi	r19, 0x00	; 0
    2a30:	05 c0       	rjmp	.+10     	; 0x2a3c <vfprintf+0x27c>
    2a32:	20 e1       	ldi	r18, 0x10	; 16
    2a34:	30 e0       	ldi	r19, 0x00	; 0
    2a36:	02 c0       	rjmp	.+4      	; 0x2a3c <vfprintf+0x27c>
    2a38:	20 e1       	ldi	r18, 0x10	; 16
    2a3a:	32 e0       	ldi	r19, 0x02	; 2
    2a3c:	f8 01       	movw	r30, r16
    2a3e:	b7 fe       	sbrs	r11, 7
    2a40:	07 c0       	rjmp	.+14     	; 0x2a50 <vfprintf+0x290>
    2a42:	60 81       	ld	r22, Z
    2a44:	71 81       	ldd	r23, Z+1	; 0x01
    2a46:	82 81       	ldd	r24, Z+2	; 0x02
    2a48:	93 81       	ldd	r25, Z+3	; 0x03
    2a4a:	0c 5f       	subi	r16, 0xFC	; 252
    2a4c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a4e:	06 c0       	rjmp	.+12     	; 0x2a5c <vfprintf+0x29c>
    2a50:	60 81       	ld	r22, Z
    2a52:	71 81       	ldd	r23, Z+1	; 0x01
    2a54:	80 e0       	ldi	r24, 0x00	; 0
    2a56:	90 e0       	ldi	r25, 0x00	; 0
    2a58:	0e 5f       	subi	r16, 0xFE	; 254
    2a5a:	1f 4f       	sbci	r17, 0xFF	; 255
    2a5c:	a3 01       	movw	r20, r6
    2a5e:	0e 94 13 16 	call	0x2c26	; 0x2c26 <__ultoa_invert>
    2a62:	88 2e       	mov	r8, r24
    2a64:	86 18       	sub	r8, r6
    2a66:	fb 2d       	mov	r31, r11
    2a68:	ff 77       	andi	r31, 0x7F	; 127
    2a6a:	3f 2e       	mov	r3, r31
    2a6c:	36 fe       	sbrs	r3, 6
    2a6e:	0d c0       	rjmp	.+26     	; 0x2a8a <vfprintf+0x2ca>
    2a70:	23 2d       	mov	r18, r3
    2a72:	2e 7f       	andi	r18, 0xFE	; 254
    2a74:	a2 2e       	mov	r10, r18
    2a76:	89 14       	cp	r8, r9
    2a78:	58 f4       	brcc	.+22     	; 0x2a90 <vfprintf+0x2d0>
    2a7a:	34 fe       	sbrs	r3, 4
    2a7c:	0b c0       	rjmp	.+22     	; 0x2a94 <vfprintf+0x2d4>
    2a7e:	32 fc       	sbrc	r3, 2
    2a80:	09 c0       	rjmp	.+18     	; 0x2a94 <vfprintf+0x2d4>
    2a82:	83 2d       	mov	r24, r3
    2a84:	8e 7e       	andi	r24, 0xEE	; 238
    2a86:	a8 2e       	mov	r10, r24
    2a88:	05 c0       	rjmp	.+10     	; 0x2a94 <vfprintf+0x2d4>
    2a8a:	b8 2c       	mov	r11, r8
    2a8c:	a3 2c       	mov	r10, r3
    2a8e:	03 c0       	rjmp	.+6      	; 0x2a96 <vfprintf+0x2d6>
    2a90:	b8 2c       	mov	r11, r8
    2a92:	01 c0       	rjmp	.+2      	; 0x2a96 <vfprintf+0x2d6>
    2a94:	b9 2c       	mov	r11, r9
    2a96:	a4 fe       	sbrs	r10, 4
    2a98:	0f c0       	rjmp	.+30     	; 0x2ab8 <vfprintf+0x2f8>
    2a9a:	fe 01       	movw	r30, r28
    2a9c:	e8 0d       	add	r30, r8
    2a9e:	f1 1d       	adc	r31, r1
    2aa0:	80 81       	ld	r24, Z
    2aa2:	80 33       	cpi	r24, 0x30	; 48
    2aa4:	21 f4       	brne	.+8      	; 0x2aae <vfprintf+0x2ee>
    2aa6:	9a 2d       	mov	r25, r10
    2aa8:	99 7e       	andi	r25, 0xE9	; 233
    2aaa:	a9 2e       	mov	r10, r25
    2aac:	09 c0       	rjmp	.+18     	; 0x2ac0 <vfprintf+0x300>
    2aae:	a2 fe       	sbrs	r10, 2
    2ab0:	06 c0       	rjmp	.+12     	; 0x2abe <vfprintf+0x2fe>
    2ab2:	b3 94       	inc	r11
    2ab4:	b3 94       	inc	r11
    2ab6:	04 c0       	rjmp	.+8      	; 0x2ac0 <vfprintf+0x300>
    2ab8:	8a 2d       	mov	r24, r10
    2aba:	86 78       	andi	r24, 0x86	; 134
    2abc:	09 f0       	breq	.+2      	; 0x2ac0 <vfprintf+0x300>
    2abe:	b3 94       	inc	r11
    2ac0:	a3 fc       	sbrc	r10, 3
    2ac2:	11 c0       	rjmp	.+34     	; 0x2ae6 <vfprintf+0x326>
    2ac4:	a0 fe       	sbrs	r10, 0
    2ac6:	06 c0       	rjmp	.+12     	; 0x2ad4 <vfprintf+0x314>
    2ac8:	b2 14       	cp	r11, r2
    2aca:	88 f4       	brcc	.+34     	; 0x2aee <vfprintf+0x32e>
    2acc:	28 0c       	add	r2, r8
    2ace:	92 2c       	mov	r9, r2
    2ad0:	9b 18       	sub	r9, r11
    2ad2:	0e c0       	rjmp	.+28     	; 0x2af0 <vfprintf+0x330>
    2ad4:	b2 14       	cp	r11, r2
    2ad6:	60 f4       	brcc	.+24     	; 0x2af0 <vfprintf+0x330>
    2ad8:	b6 01       	movw	r22, r12
    2ada:	80 e2       	ldi	r24, 0x20	; 32
    2adc:	90 e0       	ldi	r25, 0x00	; 0
    2ade:	0e 94 d7 15 	call	0x2bae	; 0x2bae <fputc>
    2ae2:	b3 94       	inc	r11
    2ae4:	f7 cf       	rjmp	.-18     	; 0x2ad4 <vfprintf+0x314>
    2ae6:	b2 14       	cp	r11, r2
    2ae8:	18 f4       	brcc	.+6      	; 0x2af0 <vfprintf+0x330>
    2aea:	2b 18       	sub	r2, r11
    2aec:	02 c0       	rjmp	.+4      	; 0x2af2 <vfprintf+0x332>
    2aee:	98 2c       	mov	r9, r8
    2af0:	21 2c       	mov	r2, r1
    2af2:	a4 fe       	sbrs	r10, 4
    2af4:	10 c0       	rjmp	.+32     	; 0x2b16 <vfprintf+0x356>
    2af6:	b6 01       	movw	r22, r12
    2af8:	80 e3       	ldi	r24, 0x30	; 48
    2afa:	90 e0       	ldi	r25, 0x00	; 0
    2afc:	0e 94 d7 15 	call	0x2bae	; 0x2bae <fputc>
    2b00:	a2 fe       	sbrs	r10, 2
    2b02:	17 c0       	rjmp	.+46     	; 0x2b32 <vfprintf+0x372>
    2b04:	a1 fc       	sbrc	r10, 1
    2b06:	03 c0       	rjmp	.+6      	; 0x2b0e <vfprintf+0x34e>
    2b08:	88 e7       	ldi	r24, 0x78	; 120
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	02 c0       	rjmp	.+4      	; 0x2b12 <vfprintf+0x352>
    2b0e:	88 e5       	ldi	r24, 0x58	; 88
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	b6 01       	movw	r22, r12
    2b14:	0c c0       	rjmp	.+24     	; 0x2b2e <vfprintf+0x36e>
    2b16:	8a 2d       	mov	r24, r10
    2b18:	86 78       	andi	r24, 0x86	; 134
    2b1a:	59 f0       	breq	.+22     	; 0x2b32 <vfprintf+0x372>
    2b1c:	a1 fe       	sbrs	r10, 1
    2b1e:	02 c0       	rjmp	.+4      	; 0x2b24 <vfprintf+0x364>
    2b20:	8b e2       	ldi	r24, 0x2B	; 43
    2b22:	01 c0       	rjmp	.+2      	; 0x2b26 <vfprintf+0x366>
    2b24:	80 e2       	ldi	r24, 0x20	; 32
    2b26:	a7 fc       	sbrc	r10, 7
    2b28:	8d e2       	ldi	r24, 0x2D	; 45
    2b2a:	b6 01       	movw	r22, r12
    2b2c:	90 e0       	ldi	r25, 0x00	; 0
    2b2e:	0e 94 d7 15 	call	0x2bae	; 0x2bae <fputc>
    2b32:	89 14       	cp	r8, r9
    2b34:	38 f4       	brcc	.+14     	; 0x2b44 <vfprintf+0x384>
    2b36:	b6 01       	movw	r22, r12
    2b38:	80 e3       	ldi	r24, 0x30	; 48
    2b3a:	90 e0       	ldi	r25, 0x00	; 0
    2b3c:	0e 94 d7 15 	call	0x2bae	; 0x2bae <fputc>
    2b40:	9a 94       	dec	r9
    2b42:	f7 cf       	rjmp	.-18     	; 0x2b32 <vfprintf+0x372>
    2b44:	8a 94       	dec	r8
    2b46:	f3 01       	movw	r30, r6
    2b48:	e8 0d       	add	r30, r8
    2b4a:	f1 1d       	adc	r31, r1
    2b4c:	80 81       	ld	r24, Z
    2b4e:	b6 01       	movw	r22, r12
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	0e 94 d7 15 	call	0x2bae	; 0x2bae <fputc>
    2b56:	81 10       	cpse	r8, r1
    2b58:	f5 cf       	rjmp	.-22     	; 0x2b44 <vfprintf+0x384>
    2b5a:	22 20       	and	r2, r2
    2b5c:	09 f4       	brne	.+2      	; 0x2b60 <vfprintf+0x3a0>
    2b5e:	42 ce       	rjmp	.-892    	; 0x27e4 <vfprintf+0x24>
    2b60:	b6 01       	movw	r22, r12
    2b62:	80 e2       	ldi	r24, 0x20	; 32
    2b64:	90 e0       	ldi	r25, 0x00	; 0
    2b66:	0e 94 d7 15 	call	0x2bae	; 0x2bae <fputc>
    2b6a:	2a 94       	dec	r2
    2b6c:	f6 cf       	rjmp	.-20     	; 0x2b5a <vfprintf+0x39a>
    2b6e:	f6 01       	movw	r30, r12
    2b70:	86 81       	ldd	r24, Z+6	; 0x06
    2b72:	97 81       	ldd	r25, Z+7	; 0x07
    2b74:	02 c0       	rjmp	.+4      	; 0x2b7a <vfprintf+0x3ba>
    2b76:	8f ef       	ldi	r24, 0xFF	; 255
    2b78:	9f ef       	ldi	r25, 0xFF	; 255
    2b7a:	2b 96       	adiw	r28, 0x0b	; 11
    2b7c:	e2 e1       	ldi	r30, 0x12	; 18
    2b7e:	0c 94 8d 16 	jmp	0x2d1a	; 0x2d1a <__epilogue_restores__>

00002b82 <strnlen_P>:
    2b82:	fc 01       	movw	r30, r24
    2b84:	05 90       	lpm	r0, Z+
    2b86:	61 50       	subi	r22, 0x01	; 1
    2b88:	70 40       	sbci	r23, 0x00	; 0
    2b8a:	01 10       	cpse	r0, r1
    2b8c:	d8 f7       	brcc	.-10     	; 0x2b84 <strnlen_P+0x2>
    2b8e:	80 95       	com	r24
    2b90:	90 95       	com	r25
    2b92:	8e 0f       	add	r24, r30
    2b94:	9f 1f       	adc	r25, r31
    2b96:	08 95       	ret

00002b98 <strnlen>:
    2b98:	fc 01       	movw	r30, r24
    2b9a:	61 50       	subi	r22, 0x01	; 1
    2b9c:	70 40       	sbci	r23, 0x00	; 0
    2b9e:	01 90       	ld	r0, Z+
    2ba0:	01 10       	cpse	r0, r1
    2ba2:	d8 f7       	brcc	.-10     	; 0x2b9a <strnlen+0x2>
    2ba4:	80 95       	com	r24
    2ba6:	90 95       	com	r25
    2ba8:	8e 0f       	add	r24, r30
    2baa:	9f 1f       	adc	r25, r31
    2bac:	08 95       	ret

00002bae <fputc>:
    2bae:	0f 93       	push	r16
    2bb0:	1f 93       	push	r17
    2bb2:	cf 93       	push	r28
    2bb4:	df 93       	push	r29
    2bb6:	fb 01       	movw	r30, r22
    2bb8:	23 81       	ldd	r18, Z+3	; 0x03
    2bba:	21 fd       	sbrc	r18, 1
    2bbc:	03 c0       	rjmp	.+6      	; 0x2bc4 <fputc+0x16>
    2bbe:	8f ef       	ldi	r24, 0xFF	; 255
    2bc0:	9f ef       	ldi	r25, 0xFF	; 255
    2bc2:	2c c0       	rjmp	.+88     	; 0x2c1c <fputc+0x6e>
    2bc4:	22 ff       	sbrs	r18, 2
    2bc6:	16 c0       	rjmp	.+44     	; 0x2bf4 <fputc+0x46>
    2bc8:	46 81       	ldd	r20, Z+6	; 0x06
    2bca:	57 81       	ldd	r21, Z+7	; 0x07
    2bcc:	24 81       	ldd	r18, Z+4	; 0x04
    2bce:	35 81       	ldd	r19, Z+5	; 0x05
    2bd0:	42 17       	cp	r20, r18
    2bd2:	53 07       	cpc	r21, r19
    2bd4:	44 f4       	brge	.+16     	; 0x2be6 <fputc+0x38>
    2bd6:	a0 81       	ld	r26, Z
    2bd8:	b1 81       	ldd	r27, Z+1	; 0x01
    2bda:	9d 01       	movw	r18, r26
    2bdc:	2f 5f       	subi	r18, 0xFF	; 255
    2bde:	3f 4f       	sbci	r19, 0xFF	; 255
    2be0:	31 83       	std	Z+1, r19	; 0x01
    2be2:	20 83       	st	Z, r18
    2be4:	8c 93       	st	X, r24
    2be6:	26 81       	ldd	r18, Z+6	; 0x06
    2be8:	37 81       	ldd	r19, Z+7	; 0x07
    2bea:	2f 5f       	subi	r18, 0xFF	; 255
    2bec:	3f 4f       	sbci	r19, 0xFF	; 255
    2bee:	37 83       	std	Z+7, r19	; 0x07
    2bf0:	26 83       	std	Z+6, r18	; 0x06
    2bf2:	14 c0       	rjmp	.+40     	; 0x2c1c <fputc+0x6e>
    2bf4:	8b 01       	movw	r16, r22
    2bf6:	ec 01       	movw	r28, r24
    2bf8:	fb 01       	movw	r30, r22
    2bfa:	00 84       	ldd	r0, Z+8	; 0x08
    2bfc:	f1 85       	ldd	r31, Z+9	; 0x09
    2bfe:	e0 2d       	mov	r30, r0
    2c00:	09 95       	icall
    2c02:	89 2b       	or	r24, r25
    2c04:	e1 f6       	brne	.-72     	; 0x2bbe <fputc+0x10>
    2c06:	d8 01       	movw	r26, r16
    2c08:	16 96       	adiw	r26, 0x06	; 6
    2c0a:	8d 91       	ld	r24, X+
    2c0c:	9c 91       	ld	r25, X
    2c0e:	17 97       	sbiw	r26, 0x07	; 7
    2c10:	01 96       	adiw	r24, 0x01	; 1
    2c12:	17 96       	adiw	r26, 0x07	; 7
    2c14:	9c 93       	st	X, r25
    2c16:	8e 93       	st	-X, r24
    2c18:	16 97       	sbiw	r26, 0x06	; 6
    2c1a:	ce 01       	movw	r24, r28
    2c1c:	df 91       	pop	r29
    2c1e:	cf 91       	pop	r28
    2c20:	1f 91       	pop	r17
    2c22:	0f 91       	pop	r16
    2c24:	08 95       	ret

00002c26 <__ultoa_invert>:
    2c26:	fa 01       	movw	r30, r20
    2c28:	aa 27       	eor	r26, r26
    2c2a:	28 30       	cpi	r18, 0x08	; 8
    2c2c:	51 f1       	breq	.+84     	; 0x2c82 <__ultoa_invert+0x5c>
    2c2e:	20 31       	cpi	r18, 0x10	; 16
    2c30:	81 f1       	breq	.+96     	; 0x2c92 <__ultoa_invert+0x6c>
    2c32:	e8 94       	clt
    2c34:	6f 93       	push	r22
    2c36:	6e 7f       	andi	r22, 0xFE	; 254
    2c38:	6e 5f       	subi	r22, 0xFE	; 254
    2c3a:	7f 4f       	sbci	r23, 0xFF	; 255
    2c3c:	8f 4f       	sbci	r24, 0xFF	; 255
    2c3e:	9f 4f       	sbci	r25, 0xFF	; 255
    2c40:	af 4f       	sbci	r26, 0xFF	; 255
    2c42:	b1 e0       	ldi	r27, 0x01	; 1
    2c44:	3e d0       	rcall	.+124    	; 0x2cc2 <__ultoa_invert+0x9c>
    2c46:	b4 e0       	ldi	r27, 0x04	; 4
    2c48:	3c d0       	rcall	.+120    	; 0x2cc2 <__ultoa_invert+0x9c>
    2c4a:	67 0f       	add	r22, r23
    2c4c:	78 1f       	adc	r23, r24
    2c4e:	89 1f       	adc	r24, r25
    2c50:	9a 1f       	adc	r25, r26
    2c52:	a1 1d       	adc	r26, r1
    2c54:	68 0f       	add	r22, r24
    2c56:	79 1f       	adc	r23, r25
    2c58:	8a 1f       	adc	r24, r26
    2c5a:	91 1d       	adc	r25, r1
    2c5c:	a1 1d       	adc	r26, r1
    2c5e:	6a 0f       	add	r22, r26
    2c60:	71 1d       	adc	r23, r1
    2c62:	81 1d       	adc	r24, r1
    2c64:	91 1d       	adc	r25, r1
    2c66:	a1 1d       	adc	r26, r1
    2c68:	20 d0       	rcall	.+64     	; 0x2caa <__ultoa_invert+0x84>
    2c6a:	09 f4       	brne	.+2      	; 0x2c6e <__ultoa_invert+0x48>
    2c6c:	68 94       	set
    2c6e:	3f 91       	pop	r19
    2c70:	2a e0       	ldi	r18, 0x0A	; 10
    2c72:	26 9f       	mul	r18, r22
    2c74:	11 24       	eor	r1, r1
    2c76:	30 19       	sub	r19, r0
    2c78:	30 5d       	subi	r19, 0xD0	; 208
    2c7a:	31 93       	st	Z+, r19
    2c7c:	de f6       	brtc	.-74     	; 0x2c34 <__ultoa_invert+0xe>
    2c7e:	cf 01       	movw	r24, r30
    2c80:	08 95       	ret
    2c82:	46 2f       	mov	r20, r22
    2c84:	47 70       	andi	r20, 0x07	; 7
    2c86:	40 5d       	subi	r20, 0xD0	; 208
    2c88:	41 93       	st	Z+, r20
    2c8a:	b3 e0       	ldi	r27, 0x03	; 3
    2c8c:	0f d0       	rcall	.+30     	; 0x2cac <__ultoa_invert+0x86>
    2c8e:	c9 f7       	brne	.-14     	; 0x2c82 <__ultoa_invert+0x5c>
    2c90:	f6 cf       	rjmp	.-20     	; 0x2c7e <__ultoa_invert+0x58>
    2c92:	46 2f       	mov	r20, r22
    2c94:	4f 70       	andi	r20, 0x0F	; 15
    2c96:	40 5d       	subi	r20, 0xD0	; 208
    2c98:	4a 33       	cpi	r20, 0x3A	; 58
    2c9a:	18 f0       	brcs	.+6      	; 0x2ca2 <__ultoa_invert+0x7c>
    2c9c:	49 5d       	subi	r20, 0xD9	; 217
    2c9e:	31 fd       	sbrc	r19, 1
    2ca0:	40 52       	subi	r20, 0x20	; 32
    2ca2:	41 93       	st	Z+, r20
    2ca4:	02 d0       	rcall	.+4      	; 0x2caa <__ultoa_invert+0x84>
    2ca6:	a9 f7       	brne	.-22     	; 0x2c92 <__ultoa_invert+0x6c>
    2ca8:	ea cf       	rjmp	.-44     	; 0x2c7e <__ultoa_invert+0x58>
    2caa:	b4 e0       	ldi	r27, 0x04	; 4
    2cac:	a6 95       	lsr	r26
    2cae:	97 95       	ror	r25
    2cb0:	87 95       	ror	r24
    2cb2:	77 95       	ror	r23
    2cb4:	67 95       	ror	r22
    2cb6:	ba 95       	dec	r27
    2cb8:	c9 f7       	brne	.-14     	; 0x2cac <__ultoa_invert+0x86>
    2cba:	00 97       	sbiw	r24, 0x00	; 0
    2cbc:	61 05       	cpc	r22, r1
    2cbe:	71 05       	cpc	r23, r1
    2cc0:	08 95       	ret
    2cc2:	9b 01       	movw	r18, r22
    2cc4:	ac 01       	movw	r20, r24
    2cc6:	0a 2e       	mov	r0, r26
    2cc8:	06 94       	lsr	r0
    2cca:	57 95       	ror	r21
    2ccc:	47 95       	ror	r20
    2cce:	37 95       	ror	r19
    2cd0:	27 95       	ror	r18
    2cd2:	ba 95       	dec	r27
    2cd4:	c9 f7       	brne	.-14     	; 0x2cc8 <__ultoa_invert+0xa2>
    2cd6:	62 0f       	add	r22, r18
    2cd8:	73 1f       	adc	r23, r19
    2cda:	84 1f       	adc	r24, r20
    2cdc:	95 1f       	adc	r25, r21
    2cde:	a0 1d       	adc	r26, r0
    2ce0:	08 95       	ret

00002ce2 <__prologue_saves__>:
    2ce2:	2f 92       	push	r2
    2ce4:	3f 92       	push	r3
    2ce6:	4f 92       	push	r4
    2ce8:	5f 92       	push	r5
    2cea:	6f 92       	push	r6
    2cec:	7f 92       	push	r7
    2cee:	8f 92       	push	r8
    2cf0:	9f 92       	push	r9
    2cf2:	af 92       	push	r10
    2cf4:	bf 92       	push	r11
    2cf6:	cf 92       	push	r12
    2cf8:	df 92       	push	r13
    2cfa:	ef 92       	push	r14
    2cfc:	ff 92       	push	r15
    2cfe:	0f 93       	push	r16
    2d00:	1f 93       	push	r17
    2d02:	cf 93       	push	r28
    2d04:	df 93       	push	r29
    2d06:	cd b7       	in	r28, 0x3d	; 61
    2d08:	de b7       	in	r29, 0x3e	; 62
    2d0a:	ca 1b       	sub	r28, r26
    2d0c:	db 0b       	sbc	r29, r27
    2d0e:	0f b6       	in	r0, 0x3f	; 63
    2d10:	f8 94       	cli
    2d12:	de bf       	out	0x3e, r29	; 62
    2d14:	0f be       	out	0x3f, r0	; 63
    2d16:	cd bf       	out	0x3d, r28	; 61
    2d18:	09 94       	ijmp

00002d1a <__epilogue_restores__>:
    2d1a:	2a 88       	ldd	r2, Y+18	; 0x12
    2d1c:	39 88       	ldd	r3, Y+17	; 0x11
    2d1e:	48 88       	ldd	r4, Y+16	; 0x10
    2d20:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d22:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d24:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d26:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d28:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d2a:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d2c:	b9 84       	ldd	r11, Y+9	; 0x09
    2d2e:	c8 84       	ldd	r12, Y+8	; 0x08
    2d30:	df 80       	ldd	r13, Y+7	; 0x07
    2d32:	ee 80       	ldd	r14, Y+6	; 0x06
    2d34:	fd 80       	ldd	r15, Y+5	; 0x05
    2d36:	0c 81       	ldd	r16, Y+4	; 0x04
    2d38:	1b 81       	ldd	r17, Y+3	; 0x03
    2d3a:	aa 81       	ldd	r26, Y+2	; 0x02
    2d3c:	b9 81       	ldd	r27, Y+1	; 0x01
    2d3e:	ce 0f       	add	r28, r30
    2d40:	d1 1d       	adc	r29, r1
    2d42:	0f b6       	in	r0, 0x3f	; 63
    2d44:	f8 94       	cli
    2d46:	de bf       	out	0x3e, r29	; 62
    2d48:	0f be       	out	0x3f, r0	; 63
    2d4a:	cd bf       	out	0x3d, r28	; 61
    2d4c:	ed 01       	movw	r28, r26
    2d4e:	08 95       	ret

00002d50 <_exit>:
    2d50:	f8 94       	cli

00002d52 <__stop_program>:
    2d52:	ff cf       	rjmp	.-2      	; 0x2d52 <__stop_program>
