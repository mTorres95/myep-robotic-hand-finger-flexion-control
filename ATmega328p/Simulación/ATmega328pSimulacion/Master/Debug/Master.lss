
Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  0000053c  000005d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000053c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  00800116  00800116  000005e6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000618  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000658  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001064  00000000  00000000  00000728  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b1a  00000000  00000000  0000178c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007e6  00000000  00000000  000022a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000210  00000000  00000000  00002a8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000583  00000000  00000000  00002c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004bf  00000000  00000000  0000321f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  000036de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 d8 01 	jmp	0x3b0	; 0x3b0 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <__vector_24>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e3       	ldi	r30, 0x3C	; 60
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 31       	cpi	r26, 0x16	; 22
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e1       	ldi	r26, 0x16	; 22
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 33       	cpi	r26, 0x3E	; 62
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 39 02 	call	0x472	; 0x472 <main>
  9e:	0c 94 9c 02 	jmp	0x538	; 0x538 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <I2C_init_master>:
	// Wait for hardware action: TWINT Flag set
	while (!(TWCR &	(1<<TWINT)));
	// Check value if REPERATED START condition correctly transmitted.
	if(TW_STATUS != TW_REP_START) return 0;		// if not, device is not ready
	return 1;
}
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	8b 01       	movw	r16, r22
  ae:	9c 01       	movw	r18, r24
  b0:	c4 2f       	mov	r28, r20
  b2:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  b6:	60 e0       	ldi	r22, 0x00	; 0
  b8:	74 e2       	ldi	r23, 0x24	; 36
  ba:	84 ef       	ldi	r24, 0xF4	; 244
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	a9 01       	movw	r20, r18
  c0:	98 01       	movw	r18, r16
  c2:	0e 94 4a 02 	call	0x494	; 0x494 <__udivmodsi4>
  c6:	da 01       	movw	r26, r20
  c8:	c9 01       	movw	r24, r18
  ca:	40 97       	sbiw	r24, 0x10	; 16
  cc:	a1 09       	sbc	r26, r1
  ce:	b1 09       	sbc	r27, r1
  d0:	b6 95       	lsr	r27
  d2:	a7 95       	ror	r26
  d4:	97 95       	ror	r25
  d6:	87 95       	ror	r24
  d8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
  dc:	c0 93 18 01 	sts	0x0118, r28	; 0x800118 <inter>
  e0:	cf 91       	pop	r28
  e2:	1f 91       	pop	r17
  e4:	0f 91       	pop	r16
  e6:	08 95       	ret

000000e8 <I2C_STARTcond>:
  e8:	84 ea       	ldi	r24, 0xA4	; 164
  ea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  ee:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  f2:	88 23       	and	r24, r24
  f4:	e4 f7       	brge	.-8      	; 0xee <I2C_STARTcond+0x6>
  f6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  fa:	88 7f       	andi	r24, 0xF8	; 248
  fc:	88 30       	cpi	r24, 0x08	; 8
  fe:	11 f0       	breq	.+4      	; 0x104 <I2C_STARTcond+0x1c>
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	08 95       	ret
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	08 95       	ret

00000108 <I2C_STOPcond>:
/*
	Transmit STOP condition
*/
void I2C_STOPcond(){
	// Enable TWI interface; transmit a STOP condition; clear TWINT flag
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//(1<<TWEN)|(1<<TWSTO)|(1<<TWINT);
 108:	84 e9       	ldi	r24, 0x94	; 148
 10a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 10e:	08 95       	ret

00000110 <I2C_write_data>:
	acknowledgement of the device’s own slave address
*/

uint8_t I2C_write_data(uint8_t data, uint8_t TWEA_val, uint8_t cond){
	// write data byte to TWDR
	TWDR = data;
 110:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	// Clear TWINT;  get ACK; enable TWI interface; set interruptions on or off
	TWCR = (1<<TWINT)|(TWEA_val<<TWEA)|(1<<TWEN)|(inter<<TWIE);
 114:	80 e4       	ldi	r24, 0x40	; 64
 116:	68 9f       	mul	r22, r24
 118:	b0 01       	movw	r22, r0
 11a:	11 24       	eor	r1, r1
 11c:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <inter>
 120:	68 2b       	or	r22, r24
 122:	64 68       	ori	r22, 0x84	; 132
 124:	60 93 bc 00 	sts	0x00BC, r22	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	// Wait for hardware action: TWINT Flag set
	while (!(TWCR &	(1<<TWINT)));
 128:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 12c:	88 23       	and	r24, r24
 12e:	e4 f7       	brge	.-8      	; 0x128 <I2C_write_data+0x18>
	// Check if data sent and AKC received
	if(TW_STATUS != cond) return 0;		// if not, NACK
 130:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 134:	88 7f       	andi	r24, 0xF8	; 248
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	50 e0       	ldi	r21, 0x00	; 0
 13a:	84 17       	cp	r24, r20
 13c:	95 07       	cpc	r25, r21
 13e:	11 f0       	breq	.+4      	; 0x144 <I2C_write_data+0x34>
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	08 95       	ret
	return 1;
 144:	81 e0       	ldi	r24, 0x01	; 1
}
 146:	08 95       	ret

00000148 <I2C_read_data>:
	The TWEA bit must be written to one to enable the
	acknowledgement of the device’s own slave address
*/
void I2C_read_data(uint8_t TWEA_val, uint8_t cond){
	// Clear TWINT;  get ACK; enable TWI interface; set interruptions on or off
	TWCR = (1<<TWINT)|(TWEA_val<<TWEA)|(1<<TWEN)|(inter<<TWIE);
 148:	20 e4       	ldi	r18, 0x40	; 64
 14a:	82 9f       	mul	r24, r18
 14c:	c0 01       	movw	r24, r0
 14e:	11 24       	eor	r1, r1
 150:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <inter>
 154:	89 2b       	or	r24, r25
 156:	84 68       	ori	r24, 0x84	; 132
 158:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	// Wait for hardware action: TWINT Flag set
	while (!(TWCR &	(1<<TWINT)));
 15c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 160:	88 23       	and	r24, r24
 162:	e4 f7       	brge	.-8      	; 0x15c <I2C_read_data+0x14>
	// Check if data received and AKC returned -> 		// Put in buffer the value from TWDR
	if(TW_STATUS == cond){
 164:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 168:	88 7f       	andi	r24, 0xF8	; 248
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	70 e0       	ldi	r23, 0x00	; 0
 16e:	86 17       	cp	r24, r22
 170:	97 07       	cpc	r25, r23
 172:	69 f5       	brne	.+90     	; 0x1ce <I2C_read_data+0x86>
		switch(TWDR){
 174:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 178:	88 23       	and	r24, r24
 17a:	41 f0       	breq	.+16     	; 0x18c <I2C_read_data+0x44>
 17c:	8a 33       	cpi	r24, 0x3A	; 58
 17e:	a9 f4       	brne	.+42     	; 0x1aa <I2C_read_data+0x62>
			case ':':
				flagcom = 1;
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <flagcom>
				indcom = 0;
 186:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <__data_end>
				break;
 18a:	08 95       	ret
			case 0:
				if(flagcom){
 18c:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <flagcom>
 190:	88 23       	and	r24, r24
 192:	41 f0       	breq	.+16     	; 0x1a4 <I2C_read_data+0x5c>
					comando[indcom] = 0;
 194:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <__data_end>
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	e7 5e       	subi	r30, 0xE7	; 231
 19c:	fe 4f       	sbci	r31, 0xFE	; 254
 19e:	10 82       	st	Z, r1
					indcom = 0;
 1a0:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <__data_end>
					//i2c_interpreter();
				}
				flagcom = 0;
 1a4:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <flagcom>
				break;
 1a8:	08 95       	ret
			default:
				if(flagcom && indcom<comSize)	comando[indcom++] = TWDR;
 1aa:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <flagcom>
 1ae:	88 23       	and	r24, r24
 1b0:	71 f0       	breq	.+28     	; 0x1ce <I2C_read_data+0x86>
 1b2:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <__data_end>
 1b6:	ee 31       	cpi	r30, 0x1E	; 30
 1b8:	50 f4       	brcc	.+20     	; 0x1ce <I2C_read_data+0x86>
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	8e 0f       	add	r24, r30
 1be:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 1c8:	e7 5e       	subi	r30, 0xE7	; 231
 1ca:	fe 4f       	sbci	r31, 0xFE	; 254
 1cc:	80 83       	st	Z, r24
 1ce:	08 95       	ret

000001d0 <__vector_24>:

/*
	Interruption service rutine
*/
ISR(TWI_vect)
{
 1d0:	1f 92       	push	r1
 1d2:	0f 92       	push	r0
 1d4:	0f b6       	in	r0, 0x3f	; 63
 1d6:	0f 92       	push	r0
 1d8:	11 24       	eor	r1, r1
 1da:	2f 93       	push	r18
 1dc:	3f 93       	push	r19
 1de:	4f 93       	push	r20
 1e0:	5f 93       	push	r21
 1e2:	6f 93       	push	r22
 1e4:	7f 93       	push	r23
 1e6:	8f 93       	push	r24
 1e8:	9f 93       	push	r25
 1ea:	af 93       	push	r26
 1ec:	bf 93       	push	r27
 1ee:	ef 93       	push	r30
 1f0:	ff 93       	push	r31
	switch(TW_STATUS)
 1f2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 1f6:	88 7f       	andi	r24, 0xF8	; 248
 1f8:	80 38       	cpi	r24, 0x80	; 128
 1fa:	a1 f0       	breq	.+40     	; 0x224 <__vector_24+0x54>
 1fc:	28 f4       	brcc	.+10     	; 0x208 <__vector_24+0x38>
 1fe:	88 23       	and	r24, r24
 200:	a1 f1       	breq	.+104    	; 0x26a <__vector_24+0x9a>
 202:	80 36       	cpi	r24, 0x60	; 96
 204:	41 f0       	breq	.+16     	; 0x216 <__vector_24+0x46>
 206:	38 c0       	rjmp	.+112    	; 0x278 <__vector_24+0xa8>
 208:	88 3a       	cpi	r24, 0xA8	; 168
 20a:	e9 f0       	breq	.+58     	; 0x246 <__vector_24+0x76>
 20c:	88 3b       	cpi	r24, 0xB8	; 184
 20e:	21 f1       	breq	.+72     	; 0x258 <__vector_24+0x88>
 210:	80 3a       	cpi	r24, 0xA0	; 160
 212:	91 f5       	brne	.+100    	; 0x278 <__vector_24+0xa8>
 214:	0e c0       	rjmp	.+28     	; 0x232 <__vector_24+0x62>
	{
		case TW_SR_SLA_ACK:
			I2C_read_data(TWEA_slave, TW_STATUS);
 216:	60 91 b9 00 	lds	r22, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 21a:	68 7f       	andi	r22, 0xF8	; 248
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	0e 94 a4 00 	call	0x148	; 0x148 <I2C_read_data>
			break;
 222:	2a c0       	rjmp	.+84     	; 0x278 <__vector_24+0xa8>
		case TW_SR_DATA_ACK:
			I2C_read_data(TWEA_slave, TW_STATUS);
 224:	60 91 b9 00 	lds	r22, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 228:	68 7f       	andi	r22, 0xF8	; 248
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	0e 94 a4 00 	call	0x148	; 0x148 <I2C_read_data>
			break;
 230:	23 c0       	rjmp	.+70     	; 0x278 <__vector_24+0xa8>
		case TW_SR_STOP:
			printf("\r\n");
 232:	84 e1       	ldi	r24, 0x14	; 20
 234:	91 e0       	ldi	r25, 0x01	; 1
 236:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <puts>
			TWCR |= (1<<TWINT);		// Clear TWINT flag
 23a:	ec eb       	ldi	r30, 0xBC	; 188
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	80 81       	ld	r24, Z
 240:	80 68       	ori	r24, 0x80	; 128
 242:	80 83       	st	Z, r24
			break;
 244:	19 c0       	rjmp	.+50     	; 0x278 <__vector_24+0xa8>
		case TW_ST_SLA_ACK:
			I2C_write_data(TWDR, 1, TW_STATUS);
 246:	40 91 b9 00 	lds	r20, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 24a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 24e:	48 7f       	andi	r20, 0xF8	; 248
 250:	61 e0       	ldi	r22, 0x01	; 1
 252:	0e 94 88 00 	call	0x110	; 0x110 <I2C_write_data>
			break;
 256:	10 c0       	rjmp	.+32     	; 0x278 <__vector_24+0xa8>
		case TW_ST_DATA_ACK:
			I2C_write_data(TWDR, 1, TW_STATUS);
 258:	40 91 b9 00 	lds	r20, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 25c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 260:	48 7f       	andi	r20, 0xF8	; 248
 262:	61 e0       	ldi	r22, 0x01	; 1
 264:	0e 94 88 00 	call	0x110	; 0x110 <I2C_write_data>
			break;
 268:	07 c0       	rjmp	.+14     	; 0x278 <__vector_24+0xa8>
		case TW_BUS_ERROR:
			printf("ERROR!\r\n");
 26a:	8e e0       	ldi	r24, 0x0E	; 14
 26c:	91 e0       	ldi	r25, 0x01	; 1
 26e:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <puts>
			// illegal start or stop condition
 			//TWCR = 0;
 			TWCR = (1 << TWIE) | (1 << TWINT) | (1 << TWEA) | (1 << TWEN);
 272:	85 ec       	ldi	r24, 0xC5	; 197
 274:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		default:
			//printf("default\r\n");
			//TWCR = (1 << TWIE) | (1 << TWINT) | (1 << TWEA) | (1 << TWEN);
			break;
	}
}
 278:	ff 91       	pop	r31
 27a:	ef 91       	pop	r30
 27c:	bf 91       	pop	r27
 27e:	af 91       	pop	r26
 280:	9f 91       	pop	r25
 282:	8f 91       	pop	r24
 284:	7f 91       	pop	r23
 286:	6f 91       	pop	r22
 288:	5f 91       	pop	r21
 28a:	4f 91       	pop	r20
 28c:	3f 91       	pop	r19
 28e:	2f 91       	pop	r18
 290:	0f 90       	pop	r0
 292:	0f be       	out	0x3f, r0	; 63
 294:	0f 90       	pop	r0
 296:	1f 90       	pop	r1
 298:	18 95       	reti

0000029a <send_instruction>:

#include "main.h"

// Nota: TWEA_master 0 -> Master no necesita enviar ACK

void send_instruction(char comando[]){
 29a:	ef 92       	push	r14
 29c:	ff 92       	push	r15
 29e:	0f 93       	push	r16
 2a0:	1f 93       	push	r17
 2a2:	cf 93       	push	r28
 2a4:	df 93       	push	r29
 2a6:	7c 01       	movw	r14, r24
	// Envio de la condicion de START
	I2C_STARTcond();
 2a8:	0e 94 74 00 	call	0xe8	; 0xe8 <I2C_STARTcond>
	
	// Envio de la direccion del slave
	uint8_t sla_add;
	sla_add = (SLA << 1);	// 7 bits de direccion
	sla_add &=~ 1;					// W -> 8vo bit en '0'
	I2C_write_data(sla_add, TWEA_master, TW_MT_SLA_ACK);
 2ac:	48 e1       	ldi	r20, 0x18	; 24
 2ae:	60 e0       	ldi	r22, 0x00	; 0
 2b0:	80 e4       	ldi	r24, 0x40	; 64
 2b2:	0e 94 88 00 	call	0x110	; 0x110 <I2C_write_data>
	
	// Envio del registro del slave
	uint8_t sla_TWDR = 0xBB;			// posicion en memoria del registro TWDR de un ATmega328p
	I2C_write_data(sla_TWDR, TWEA_master, TW_MT_DATA_ACK);
 2b6:	48 e2       	ldi	r20, 0x28	; 40
 2b8:	60 e0       	ldi	r22, 0x00	; 0
 2ba:	8b eb       	ldi	r24, 0xBB	; 187
 2bc:	0e 94 88 00 	call	0x110	; 0x110 <I2C_write_data>
	
	// Envio de datos
	for(int i=0; i<comSize; i++){
 2c0:	00 e0       	ldi	r16, 0x00	; 0
 2c2:	10 e0       	ldi	r17, 0x00	; 0
 2c4:	11 c0       	rjmp	.+34     	; 0x2e8 <send_instruction+0x4e>
		I2C_write_data(comando[i], TWEA_master, TW_MT_DATA_ACK);
 2c6:	48 e2       	ldi	r20, 0x28	; 40
 2c8:	60 e0       	ldi	r22, 0x00	; 0
 2ca:	e7 01       	movw	r28, r14
 2cc:	c0 0f       	add	r28, r16
 2ce:	d1 1f       	adc	r29, r17
 2d0:	88 81       	ld	r24, Y
 2d2:	0e 94 88 00 	call	0x110	; 0x110 <I2C_write_data>
		if(comando[i] == 0) break;
 2d6:	88 81       	ld	r24, Y
 2d8:	88 23       	and	r24, r24
 2da:	49 f0       	breq	.+18     	; 0x2ee <send_instruction+0x54>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2dc:	8a e0       	ldi	r24, 0x0A	; 10
 2de:	8a 95       	dec	r24
 2e0:	f1 f7       	brne	.-4      	; 0x2de <send_instruction+0x44>
 2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <send_instruction+0x4a>
	// Envio del registro del slave
	uint8_t sla_TWDR = 0xBB;			// posicion en memoria del registro TWDR de un ATmega328p
	I2C_write_data(sla_TWDR, TWEA_master, TW_MT_DATA_ACK);
	
	// Envio de datos
	for(int i=0; i<comSize; i++){
 2e4:	0f 5f       	subi	r16, 0xFF	; 255
 2e6:	1f 4f       	sbci	r17, 0xFF	; 255
 2e8:	0e 31       	cpi	r16, 0x1E	; 30
 2ea:	11 05       	cpc	r17, r1
 2ec:	64 f3       	brlt	.-40     	; 0x2c6 <send_instruction+0x2c>
		_delay_us(2);
		//printf("Envia %c\r\n", comando[i]);
	}
	
	// Envio de la condicion de STOP
	I2C_STOPcond();
 2ee:	0e 94 84 00 	call	0x108	; 0x108 <I2C_STOPcond>
}
 2f2:	df 91       	pop	r29
 2f4:	cf 91       	pop	r28
 2f6:	1f 91       	pop	r17
 2f8:	0f 91       	pop	r16
 2fa:	ff 90       	pop	r15
 2fc:	ef 90       	pop	r14
 2fe:	08 95       	ret

00000300 <mi_putc>:
	}
}


int mi_putc(char c, FILE *stream){
	while(!(UCSR0A & (1<<UDRE0)));		// Esperar hasta que se desocupe el buffer de transmision
 300:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 304:	95 ff       	sbrs	r25, 5
 306:	fc cf       	rjmp	.-8      	; 0x300 <mi_putc>
	UDR0 = c;							// Poner el dato en el registro UDR0
 308:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	return 0; 
}
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	08 95       	ret

00000312 <mi_getc>:


int mi_getc(FILE *stream){
	while ( !(UCSR0A & (1<<RXC0)));		// Esperar hasta que la recepcion se complete
 312:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 316:	88 23       	and	r24, r24
 318:	e4 f7       	brge	.-8      	; 0x312 <mi_getc>
	return UDR0;						// Leer el dato del registro UDR0
 31a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	08 95       	ret

00000322 <UART_init>:
#include "main.h"
//#include "uart.h"

FILE uart_io = FDEV_SETUP_STREAM(mi_putc, mi_getc, _FDEV_SETUP_RW);

void UART_init(uint32_t baud, uint8_t InterRx, uint8_t InterTx){
 322:	cf 92       	push	r12
 324:	df 92       	push	r13
 326:	ef 92       	push	r14
 328:	ff 92       	push	r15
 32a:	cf 93       	push	r28
 32c:	df 93       	push	r29
 32e:	6b 01       	movw	r12, r22
 330:	7c 01       	movw	r14, r24
 332:	d4 2f       	mov	r29, r20
 334:	c2 2f       	mov	r28, r18
	flagcom = 0;
 336:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <flagcom>
	
	stdout = stdin = &uart_io;
 33a:	e8 e3       	ldi	r30, 0x38	; 56
 33c:	f1 e0       	ldi	r31, 0x01	; 1
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	91 e0       	ldi	r25, 0x01	; 1
 342:	91 83       	std	Z+1, r25	; 0x01
 344:	80 83       	st	Z, r24
 346:	93 83       	std	Z+3, r25	; 0x03
 348:	82 83       	std	Z+2, r24	; 0x02
	
	UBRR0  = F_CPU/16/baud - 1;						// Configuracion del baudrate
 34a:	60 e4       	ldi	r22, 0x40	; 64
 34c:	72 e4       	ldi	r23, 0x42	; 66
 34e:	8f e0       	ldi	r24, 0x0F	; 15
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	a7 01       	movw	r20, r14
 354:	96 01       	movw	r18, r12
 356:	0e 94 4a 02 	call	0x494	; 0x494 <__udivmodsi4>
 35a:	21 50       	subi	r18, 0x01	; 1
 35c:	31 09       	sbc	r19, r1
 35e:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 362:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);		// Habilitacion del pin Rx y Tx. Habilitacion de interrupcion por recepcion completa
 366:	88 e9       	ldi	r24, 0x98	; 152
 368:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);				// 2 bits de STOP y 8 bits de datos
 36c:	8e e0       	ldi	r24, 0x0E	; 14
 36e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	
	// === INTERRUPCIONES DE UART (por recepcion) ===
	if(InterRx){
 372:	dd 23       	and	r29, r29
 374:	51 f0       	breq	.+20     	; 0x38a <UART_init+0x68>
		UCSR0A &=~ (1<<RXC0);		// Apagar el flag de interrupcion por recepcion completa
 376:	e0 ec       	ldi	r30, 0xC0	; 192
 378:	f0 e0       	ldi	r31, 0x00	; 0
 37a:	80 81       	ld	r24, Z
 37c:	8f 77       	andi	r24, 0x7F	; 127
 37e:	80 83       	st	Z, r24
		UCSR0B |=  (1<<RXCIE0);		// Habilitar la interrupcion Rx
 380:	e1 ec       	ldi	r30, 0xC1	; 193
 382:	f0 e0       	ldi	r31, 0x00	; 0
 384:	80 81       	ld	r24, Z
 386:	80 68       	ori	r24, 0x80	; 128
 388:	80 83       	st	Z, r24
	}
	// === INTERRUPCIONES DE UART (por transmision) ===
	if(InterTx){
 38a:	cc 23       	and	r28, r28
 38c:	51 f0       	breq	.+20     	; 0x3a2 <UART_init+0x80>
		UCSR0A &=~ (1<<TXC0);		// Apagar el flag de interrupcion por transmision completa
 38e:	e0 ec       	ldi	r30, 0xC0	; 192
 390:	f0 e0       	ldi	r31, 0x00	; 0
 392:	80 81       	ld	r24, Z
 394:	8f 7b       	andi	r24, 0xBF	; 191
 396:	80 83       	st	Z, r24
		UCSR0B |=  (1<<TXCIE0);		// Habilitar la interrupcion Tx
 398:	e1 ec       	ldi	r30, 0xC1	; 193
 39a:	f0 e0       	ldi	r31, 0x00	; 0
 39c:	80 81       	ld	r24, Z
 39e:	80 64       	ori	r24, 0x40	; 64
 3a0:	80 83       	st	Z, r24
	}
}
 3a2:	df 91       	pop	r29
 3a4:	cf 91       	pop	r28
 3a6:	ff 90       	pop	r15
 3a8:	ef 90       	pop	r14
 3aa:	df 90       	pop	r13
 3ac:	cf 90       	pop	r12
 3ae:	08 95       	ret

000003b0 <__vector_18>:
	while ( !(UCSR0A & (1<<RXC0)));		// Esperar hasta que la recepcion se complete
	return UDR0;						// Leer el dato del registro UDR0
}


ISR(USART_RX_vect){
 3b0:	1f 92       	push	r1
 3b2:	0f 92       	push	r0
 3b4:	0f b6       	in	r0, 0x3f	; 63
 3b6:	0f 92       	push	r0
 3b8:	11 24       	eor	r1, r1
 3ba:	2f 93       	push	r18
 3bc:	3f 93       	push	r19
 3be:	4f 93       	push	r20
 3c0:	5f 93       	push	r21
 3c2:	6f 93       	push	r22
 3c4:	7f 93       	push	r23
 3c6:	8f 93       	push	r24
 3c8:	9f 93       	push	r25
 3ca:	af 93       	push	r26
 3cc:	bf 93       	push	r27
 3ce:	ef 93       	push	r30
 3d0:	ff 93       	push	r31
	char dato;
	dato = getc();
 3d2:	80 e0       	ldi	r24, 0x00	; 0
 3d4:	91 e0       	ldi	r25, 0x01	; 1
 3d6:	0e 94 89 01 	call	0x312	; 0x312 <mi_getc>
	switch(dato)
 3da:	9c 01       	movw	r18, r24
 3dc:	33 27       	eor	r19, r19
 3de:	2d 30       	cpi	r18, 0x0D	; 13
 3e0:	31 05       	cpc	r19, r1
 3e2:	79 f0       	breq	.+30     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3e4:	2a 33       	cpi	r18, 0x3A	; 58
 3e6:	31 05       	cpc	r19, r1
 3e8:	21 f0       	breq	.+8      	; 0x3f2 <__vector_18+0x42>
 3ea:	28 30       	cpi	r18, 0x08	; 8
 3ec:	31 05       	cpc	r19, r1
 3ee:	01 f5       	brne	.+64     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 3f0:	19 c0       	rjmp	.+50     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
	{
		case ':':			// Delimitador de inicio
			flagcom = 1;
 3f2:	91 e0       	ldi	r25, 0x01	; 1
 3f4:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <flagcom>
			indcom = 0;		// Inicializa indice de buffer de recepcion
			comando[indcom++]=dato;
 3f8:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <__data_end>
 3fc:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <comando>
			break;
 400:	27 c0       	rjmp	.+78     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
		case '\r':						// Delimitador de final
			if(flagcom){
 402:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <flagcom>
 406:	88 23       	and	r24, r24
 408:	51 f0       	breq	.+20     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
				comando[indcom] = 0;		// coloca \0 luego del ultimo caracter recibido antes de \r
 40a:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <__data_end>
 40e:	f0 e0       	ldi	r31, 0x00	; 0
 410:	e7 5e       	subi	r30, 0xE7	; 231
 412:	fe 4f       	sbci	r31, 0xFE	; 254
 414:	10 82       	st	Z, r1
				send_instruction(comando);	// Envia el comando por I2C
 416:	89 e1       	ldi	r24, 0x19	; 25
 418:	91 e0       	ldi	r25, 0x01	; 1
 41a:	0e 94 4d 01 	call	0x29a	; 0x29a <send_instruction>
			}
			flagcom = 0;
 41e:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <flagcom>
			break;
 422:	16 c0       	rjmp	.+44     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
		case 8:						// Backspace
			indcom--;
 424:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 428:	81 50       	subi	r24, 0x01	; 1
 42a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
			break;
 42e:	10 c0       	rjmp	.+32     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
		default:								// Todo lo que este entre delimitadores
			if(flagcom && indcom<comSize) comando[indcom++]=dato; // Guarda en elemento del buffer e incrementa indcom para apuntar a siguiente
 430:	20 91 37 01 	lds	r18, 0x0137	; 0x800137 <flagcom>
 434:	22 23       	and	r18, r18
 436:	61 f0       	breq	.+24     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 438:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <__data_end>
 43c:	ee 31       	cpi	r30, 0x1E	; 30
 43e:	40 f4       	brcc	.+16     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 440:	91 e0       	ldi	r25, 0x01	; 1
 442:	9e 0f       	add	r25, r30
 444:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <__data_end>
 448:	f0 e0       	ldi	r31, 0x00	; 0
 44a:	e7 5e       	subi	r30, 0xE7	; 231
 44c:	fe 4f       	sbci	r31, 0xFE	; 254
 44e:	80 83       	st	Z, r24
			break;
	}
}
 450:	ff 91       	pop	r31
 452:	ef 91       	pop	r30
 454:	bf 91       	pop	r27
 456:	af 91       	pop	r26
 458:	9f 91       	pop	r25
 45a:	8f 91       	pop	r24
 45c:	7f 91       	pop	r23
 45e:	6f 91       	pop	r22
 460:	5f 91       	pop	r21
 462:	4f 91       	pop	r20
 464:	3f 91       	pop	r19
 466:	2f 91       	pop	r18
 468:	0f 90       	pop	r0
 46a:	0f be       	out	0x3f, r0	; 63
 46c:	0f 90       	pop	r0
 46e:	1f 90       	pop	r1
 470:	18 95       	reti

00000472 <main>:
#include "lib/main.h"

int main(void)
{
	// Configuracion de UART
	UART_init(BAUD, 1, 0);
 472:	20 e0       	ldi	r18, 0x00	; 0
 474:	41 e0       	ldi	r20, 0x01	; 1
 476:	60 e8       	ldi	r22, 0x80	; 128
 478:	75 e2       	ldi	r23, 0x25	; 37
 47a:	80 e0       	ldi	r24, 0x00	; 0
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	0e 94 91 01 	call	0x322	; 0x322 <UART_init>
	
	// Configuracion de I2C master
	I2C_init_master(100000,INTER_ON);
 482:	41 e0       	ldi	r20, 0x01	; 1
 484:	60 ea       	ldi	r22, 0xA0	; 160
 486:	76 e8       	ldi	r23, 0x86	; 134
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_init_master>
	
	sei();		// Habilitacion de interrupciones globales
 490:	78 94       	sei
 492:	ff cf       	rjmp	.-2      	; 0x492 <main+0x20>

00000494 <__udivmodsi4>:
 494:	a1 e2       	ldi	r26, 0x21	; 33
 496:	1a 2e       	mov	r1, r26
 498:	aa 1b       	sub	r26, r26
 49a:	bb 1b       	sub	r27, r27
 49c:	fd 01       	movw	r30, r26
 49e:	0d c0       	rjmp	.+26     	; 0x4ba <__udivmodsi4_ep>

000004a0 <__udivmodsi4_loop>:
 4a0:	aa 1f       	adc	r26, r26
 4a2:	bb 1f       	adc	r27, r27
 4a4:	ee 1f       	adc	r30, r30
 4a6:	ff 1f       	adc	r31, r31
 4a8:	a2 17       	cp	r26, r18
 4aa:	b3 07       	cpc	r27, r19
 4ac:	e4 07       	cpc	r30, r20
 4ae:	f5 07       	cpc	r31, r21
 4b0:	20 f0       	brcs	.+8      	; 0x4ba <__udivmodsi4_ep>
 4b2:	a2 1b       	sub	r26, r18
 4b4:	b3 0b       	sbc	r27, r19
 4b6:	e4 0b       	sbc	r30, r20
 4b8:	f5 0b       	sbc	r31, r21

000004ba <__udivmodsi4_ep>:
 4ba:	66 1f       	adc	r22, r22
 4bc:	77 1f       	adc	r23, r23
 4be:	88 1f       	adc	r24, r24
 4c0:	99 1f       	adc	r25, r25
 4c2:	1a 94       	dec	r1
 4c4:	69 f7       	brne	.-38     	; 0x4a0 <__udivmodsi4_loop>
 4c6:	60 95       	com	r22
 4c8:	70 95       	com	r23
 4ca:	80 95       	com	r24
 4cc:	90 95       	com	r25
 4ce:	9b 01       	movw	r18, r22
 4d0:	ac 01       	movw	r20, r24
 4d2:	bd 01       	movw	r22, r26
 4d4:	cf 01       	movw	r24, r30
 4d6:	08 95       	ret

000004d8 <puts>:
 4d8:	0f 93       	push	r16
 4da:	1f 93       	push	r17
 4dc:	cf 93       	push	r28
 4de:	df 93       	push	r29
 4e0:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <__iob+0x2>
 4e4:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <__iob+0x3>
 4e8:	23 81       	ldd	r18, Z+3	; 0x03
 4ea:	21 ff       	sbrs	r18, 1
 4ec:	1b c0       	rjmp	.+54     	; 0x524 <puts+0x4c>
 4ee:	8c 01       	movw	r16, r24
 4f0:	d0 e0       	ldi	r29, 0x00	; 0
 4f2:	c0 e0       	ldi	r28, 0x00	; 0
 4f4:	f8 01       	movw	r30, r16
 4f6:	81 91       	ld	r24, Z+
 4f8:	8f 01       	movw	r16, r30
 4fa:	60 91 3a 01 	lds	r22, 0x013A	; 0x80013a <__iob+0x2>
 4fe:	70 91 3b 01 	lds	r23, 0x013B	; 0x80013b <__iob+0x3>
 502:	db 01       	movw	r26, r22
 504:	18 96       	adiw	r26, 0x08	; 8
 506:	ed 91       	ld	r30, X+
 508:	fc 91       	ld	r31, X
 50a:	19 97       	sbiw	r26, 0x09	; 9
 50c:	88 23       	and	r24, r24
 50e:	31 f0       	breq	.+12     	; 0x51c <puts+0x44>
 510:	09 95       	icall
 512:	89 2b       	or	r24, r25
 514:	79 f3       	breq	.-34     	; 0x4f4 <puts+0x1c>
 516:	df ef       	ldi	r29, 0xFF	; 255
 518:	cf ef       	ldi	r28, 0xFF	; 255
 51a:	ec cf       	rjmp	.-40     	; 0x4f4 <puts+0x1c>
 51c:	8a e0       	ldi	r24, 0x0A	; 10
 51e:	09 95       	icall
 520:	89 2b       	or	r24, r25
 522:	19 f0       	breq	.+6      	; 0x52a <puts+0x52>
 524:	8f ef       	ldi	r24, 0xFF	; 255
 526:	9f ef       	ldi	r25, 0xFF	; 255
 528:	02 c0       	rjmp	.+4      	; 0x52e <puts+0x56>
 52a:	8d 2f       	mov	r24, r29
 52c:	9c 2f       	mov	r25, r28
 52e:	df 91       	pop	r29
 530:	cf 91       	pop	r28
 532:	1f 91       	pop	r17
 534:	0f 91       	pop	r16
 536:	08 95       	ret

00000538 <_exit>:
 538:	f8 94       	cli

0000053a <__stop_program>:
 53a:	ff cf       	rjmp	.-2      	; 0x53a <__stop_program>
