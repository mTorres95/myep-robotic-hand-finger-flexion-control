
ATmega328p_complete.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000006e4  00800100  00002ed0  00002f64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002ed0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000043  008007e4  008007e4  00003648  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003648  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000036a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f0  00000000  00000000  000036e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003ae5  00000000  00000000  000039d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012fd  00000000  00000000  000074b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001fe5  00000000  00000000  000087b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a7c  00000000  00000000  0000a79c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000cbd  00000000  00000000  0000b218  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002d4c  00000000  00000000  0000bed5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000278  00000000  00000000  0000ec21  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 76 00 	jmp	0xec	; 0xec <__ctors_end>
       4:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__vector_1>
       8:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__vector_2>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 da 0c 	jmp	0x19b4	; 0x19b4 <__vector_18>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 4d 02 	jmp	0x49a	; 0x49a <__vector_24>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	4d 08       	sbc	r4, r13
      6a:	cd 07       	cpc	r28, r29
      6c:	d3 07       	cpc	r29, r19
      6e:	d9 07       	cpc	r29, r25
      70:	df 07       	cpc	r29, r31
      72:	e5 07       	cpc	r30, r21
      74:	f0 07       	cpc	r31, r16
      76:	fb 07       	cpc	r31, r27
      78:	06 08       	sbc	r0, r6
      7a:	0c 08       	sbc	r0, r12
      7c:	17 08       	sbc	r1, r7
      7e:	22 08       	sbc	r2, r2
      80:	2d 08       	sbc	r2, r13
      82:	49 08       	sbc	r4, r9
      84:	33 08       	sbc	r3, r3
      86:	3e 08       	sbc	r3, r14
      88:	bd 0d       	add	r27, r13
      8a:	89 11       	cpse	r24, r9
      8c:	59 11       	cpse	r21, r9
      8e:	89 11       	cpse	r24, r9
      90:	89 11       	cpse	r24, r9
      92:	f9 0e       	add	r15, r25
      94:	89 11       	cpse	r24, r9
      96:	f6 10       	cpse	r15, r6
      98:	89 11       	cpse	r24, r9
      9a:	89 11       	cpse	r24, r9
      9c:	89 11       	cpse	r24, r9
      9e:	89 11       	cpse	r24, r9
      a0:	89 11       	cpse	r24, r9
      a2:	89 11       	cpse	r24, r9
      a4:	68 11       	cpse	r22, r8
      a6:	89 11       	cpse	r24, r9
      a8:	89 11       	cpse	r24, r9
      aa:	77 11       	cpse	r23, r7
      ac:	89 11       	cpse	r24, r9
      ae:	89 11       	cpse	r24, r9
      b0:	89 11       	cpse	r24, r9
      b2:	89 11       	cpse	r24, r9
      b4:	89 11       	cpse	r24, r9
      b6:	89 11       	cpse	r24, r9
      b8:	89 11       	cpse	r24, r9
      ba:	89 11       	cpse	r24, r9
      bc:	89 11       	cpse	r24, r9
      be:	89 11       	cpse	r24, r9
      c0:	89 11       	cpse	r24, r9
      c2:	89 11       	cpse	r24, r9
      c4:	89 11       	cpse	r24, r9
      c6:	89 11       	cpse	r24, r9
      c8:	bd 0d       	add	r27, r13
      ca:	89 11       	cpse	r24, r9
      cc:	59 11       	cpse	r21, r9
      ce:	89 11       	cpse	r24, r9
      d0:	89 11       	cpse	r24, r9
      d2:	f9 0e       	add	r15, r25
      d4:	89 11       	cpse	r24, r9
      d6:	86 11       	cpse	r24, r6
      d8:	89 11       	cpse	r24, r9
      da:	89 11       	cpse	r24, r9
      dc:	89 11       	cpse	r24, r9
      de:	89 11       	cpse	r24, r9
      e0:	89 11       	cpse	r24, r9
      e2:	89 11       	cpse	r24, r9
      e4:	68 11       	cpse	r22, r8
      e6:	89 11       	cpse	r24, r9
      e8:	89 11       	cpse	r24, r9
      ea:	77 11       	cpse	r23, r7

000000ec <__ctors_end>:
      ec:	11 24       	eor	r1, r1
      ee:	1f be       	out	0x3f, r1	; 63
      f0:	cf ef       	ldi	r28, 0xFF	; 255
      f2:	d8 e0       	ldi	r29, 0x08	; 8
      f4:	de bf       	out	0x3e, r29	; 62
      f6:	cd bf       	out	0x3d, r28	; 61

000000f8 <__do_copy_data>:
      f8:	17 e0       	ldi	r17, 0x07	; 7
      fa:	a0 e0       	ldi	r26, 0x00	; 0
      fc:	b1 e0       	ldi	r27, 0x01	; 1
      fe:	e0 ed       	ldi	r30, 0xD0	; 208
     100:	fe e2       	ldi	r31, 0x2E	; 46
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x10>
     104:	05 90       	lpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a4 3e       	cpi	r26, 0xE4	; 228
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0xc>

0000010e <__do_clear_bss>:
     10e:	28 e0       	ldi	r18, 0x08	; 8
     110:	a4 ee       	ldi	r26, 0xE4	; 228
     112:	b7 e0       	ldi	r27, 0x07	; 7
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a7 32       	cpi	r26, 0x27	; 39
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 98 11 	call	0x2330	; 0x2330 <main>
     122:	0c 94 66 17 	jmp	0x2ecc	; 0x2ecc <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <configuracion_INT0>:
	EICRA &=~ (3<<ISC10);
	EICRA |=  (evento<<ISC10);
	// Apagado del flag
	EIFR  |=  (1<<INTF1);
	// Habilitar interrupciones en INT0
	EIMSK |=  (1<<INT1);
     12a:	9a b1       	in	r25, 0x0a	; 10
     12c:	9b 7f       	andi	r25, 0xFB	; 251
     12e:	9a b9       	out	0x0a, r25	; 10
     130:	e9 e6       	ldi	r30, 0x69	; 105
     132:	f0 e0       	ldi	r31, 0x00	; 0
     134:	90 81       	ld	r25, Z
     136:	9c 7f       	andi	r25, 0xFC	; 252
     138:	90 83       	st	Z, r25
     13a:	90 81       	ld	r25, Z
     13c:	89 2b       	or	r24, r25
     13e:	80 83       	st	Z, r24
     140:	8c b3       	in	r24, 0x1c	; 28
     142:	81 60       	ori	r24, 0x01	; 1
     144:	8c bb       	out	0x1c, r24	; 28
     146:	8d b3       	in	r24, 0x1d	; 29
     148:	81 60       	ori	r24, 0x01	; 1
     14a:	8d bb       	out	0x1d, r24	; 29
     14c:	08 95       	ret

0000014e <__vector_1>:
}

// Rutina de servicio interrupcion externa INT0
ISR(INT0_vect)
{
     14e:	1f 92       	push	r1
     150:	0f 92       	push	r0
     152:	0f b6       	in	r0, 0x3f	; 63
     154:	0f 92       	push	r0
     156:	11 24       	eor	r1, r1
     158:	2f 93       	push	r18
     15a:	3f 93       	push	r19
     15c:	4f 93       	push	r20
     15e:	5f 93       	push	r21
     160:	6f 93       	push	r22
     162:	7f 93       	push	r23
     164:	8f 93       	push	r24
     166:	9f 93       	push	r25
     168:	af 93       	push	r26
     16a:	bf 93       	push	r27
     16c:	ef 93       	push	r30
     16e:	ff 93       	push	r31
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     170:	2f ef       	ldi	r18, 0xFF	; 255
     172:	80 e7       	ldi	r24, 0x70	; 112
     174:	92 e0       	ldi	r25, 0x02	; 2
     176:	21 50       	subi	r18, 0x01	; 1
     178:	80 40       	sbci	r24, 0x00	; 0
     17a:	90 40       	sbci	r25, 0x00	; 0
     17c:	e1 f7       	brne	.-8      	; 0x176 <__vector_1+0x28>
     17e:	00 c0       	rjmp	.+0      	; 0x180 <__vector_1+0x32>
     180:	00 00       	nop
	// Cómo evitar ruidos en el botón
	// 1. Leer continuamente el estado del pin y detectar el flanco (ascendente en este trabajo) que indica que se ha pulsado un botón
	// 2. Esperar un tiempo prudente (alrededor de 10 a 100 mili segundos) hasta que se estabilice la señal
	_delay_ms(50);
	// 3.Leer nuevamente el estado del pin y comprobar que se encuentre en el estado deseado
	if(!(PIND   &  (1<<PIND2))){
     182:	4a 99       	sbic	0x09, 2	; 9
     184:	0e c0       	rjmp	.+28     	; 0x1a2 <__vector_1+0x54>
		// 4. Ejecutar la acción asignada al botón, una vez que nos aseguramos que efectivamente fue presionado.
		hand_degree(init_degree);
     186:	60 91 f4 07 	lds	r22, 0x07F4	; 0x8007f4 <init_degree>
     18a:	70 91 f5 07 	lds	r23, 0x07F5	; 0x8007f5 <init_degree+0x1>
     18e:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <init_degree+0x2>
     192:	90 91 f7 07 	lds	r25, 0x07F7	; 0x8007f7 <init_degree+0x3>
     196:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <hand_degree>
		printf("Reset\r\n");
     19a:	8e e0       	ldi	r24, 0x0E	; 14
     19c:	91 e0       	ldi	r25, 0x01	; 1
     19e:	0e 94 6e 14 	call	0x28dc	; 0x28dc <puts>
	}
	// Apagado del flag
	EIFR  |=  (1<<INTF0);
     1a2:	8c b3       	in	r24, 0x1c	; 28
     1a4:	81 60       	ori	r24, 0x01	; 1
     1a6:	8c bb       	out	0x1c, r24	; 28
	
}
     1a8:	ff 91       	pop	r31
     1aa:	ef 91       	pop	r30
     1ac:	bf 91       	pop	r27
     1ae:	af 91       	pop	r26
     1b0:	9f 91       	pop	r25
     1b2:	8f 91       	pop	r24
     1b4:	7f 91       	pop	r23
     1b6:	6f 91       	pop	r22
     1b8:	5f 91       	pop	r21
     1ba:	4f 91       	pop	r20
     1bc:	3f 91       	pop	r19
     1be:	2f 91       	pop	r18
     1c0:	0f 90       	pop	r0
     1c2:	0f be       	out	0x3f, r0	; 63
     1c4:	0f 90       	pop	r0
     1c6:	1f 90       	pop	r1
     1c8:	18 95       	reti

000001ca <__vector_2>:

// Rutina de interrupcion externa INT1
ISR(INT1_vect)
{	
     1ca:	1f 92       	push	r1
     1cc:	0f 92       	push	r0
     1ce:	0f b6       	in	r0, 0x3f	; 63
     1d0:	0f 92       	push	r0
     1d2:	11 24       	eor	r1, r1
     1d4:	8f 93       	push	r24
	// Apagado del flag
	EIFR |= (1<<INTF1);
     1d6:	8c b3       	in	r24, 0x1c	; 28
     1d8:	82 60       	ori	r24, 0x02	; 2
     1da:	8c bb       	out	0x1c, r24	; 28
     1dc:	8f 91       	pop	r24
     1de:	0f 90       	pop	r0
     1e0:	0f be       	out	0x3f, r0	; 63
     1e2:	0f 90       	pop	r0
     1e4:	1f 90       	pop	r1
     1e6:	18 95       	reti

000001e8 <hand_degree>:
	finger1_flexion(flexion);
	finger2_flexion(flexion);
	finger3_flexion(flexion);
	finger4_flexion(flexion);
	finger5_flexion(flexion);
}
     1e8:	cf 92       	push	r12
     1ea:	df 92       	push	r13
     1ec:	ef 92       	push	r14
     1ee:	ff 92       	push	r15
     1f0:	6b 01       	movw	r12, r22
     1f2:	7c 01       	movw	r14, r24
     1f4:	9b 01       	movw	r18, r22
     1f6:	ac 01       	movw	r20, r24
     1f8:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <set_degrees_TC1>
     1fc:	a7 01       	movw	r20, r14
     1fe:	96 01       	movw	r18, r12
     200:	c7 01       	movw	r24, r14
     202:	b6 01       	movw	r22, r12
     204:	0e 94 b2 03 	call	0x764	; 0x764 <set_degrees_TC0>
     208:	20 e0       	ldi	r18, 0x00	; 0
     20a:	30 e0       	ldi	r19, 0x00	; 0
     20c:	44 e3       	ldi	r20, 0x34	; 52
     20e:	53 ec       	ldi	r21, 0xC3	; 195
     210:	c7 01       	movw	r24, r14
     212:	b6 01       	movw	r22, r12
     214:	0e 94 3c 05 	call	0xa78	; 0xa78 <set_degrees_TC2>
     218:	ff 90       	pop	r15
     21a:	ef 90       	pop	r14
     21c:	df 90       	pop	r13
     21e:	cf 90       	pop	r12
     220:	08 95       	ret

00000222 <init_hand>:
     222:	80 e0       	ldi	r24, 0x00	; 0
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	a4 eb       	ldi	r26, 0xB4	; 180
     228:	b2 e4       	ldi	r27, 0x42	; 66
     22a:	80 93 f8 07 	sts	0x07F8, r24	; 0x8007f8 <max_degree>
     22e:	90 93 f9 07 	sts	0x07F9, r25	; 0x8007f9 <max_degree+0x1>
     232:	a0 93 fa 07 	sts	0x07FA, r26	; 0x8007fa <max_degree+0x2>
     236:	b0 93 fb 07 	sts	0x07FB, r27	; 0x8007fb <max_degree+0x3>
     23a:	80 e0       	ldi	r24, 0x00	; 0
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	a4 eb       	ldi	r26, 0xB4	; 180
     240:	b2 ec       	ldi	r27, 0xC2	; 194
     242:	80 93 e9 07 	sts	0x07E9, r24	; 0x8007e9 <min_degree>
     246:	90 93 ea 07 	sts	0x07EA, r25	; 0x8007ea <min_degree+0x1>
     24a:	a0 93 eb 07 	sts	0x07EB, r26	; 0x8007eb <min_degree+0x2>
     24e:	b0 93 ec 07 	sts	0x07EC, r27	; 0x8007ec <min_degree+0x3>
     252:	10 92 f4 07 	sts	0x07F4, r1	; 0x8007f4 <init_degree>
     256:	10 92 f5 07 	sts	0x07F5, r1	; 0x8007f5 <init_degree+0x1>
     25a:	10 92 f6 07 	sts	0x07F6, r1	; 0x8007f6 <init_degree+0x2>
     25e:	10 92 f7 07 	sts	0x07F7, r1	; 0x8007f7 <init_degree+0x3>
     262:	0e 94 94 03 	call	0x728	; 0x728 <set_TC0_for_servomotors>
     266:	0e 94 54 04 	call	0x8a8	; 0x8a8 <set_TC1_for_servomotors>
     26a:	0e 94 1e 05 	call	0xa3c	; 0xa3c <set_TC2_for_servomotors>
     26e:	60 91 f4 07 	lds	r22, 0x07F4	; 0x8007f4 <init_degree>
     272:	70 91 f5 07 	lds	r23, 0x07F5	; 0x8007f5 <init_degree+0x1>
     276:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <init_degree+0x2>
     27a:	90 91 f7 07 	lds	r25, 0x07F7	; 0x8007f7 <init_degree+0x3>
     27e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <hand_degree>
     282:	08 95       	ret

00000284 <flexion_to_degree>:
     284:	8f 92       	push	r8
     286:	9f 92       	push	r9
     288:	af 92       	push	r10
     28a:	bf 92       	push	r11
     28c:	cf 92       	push	r12
     28e:	df 92       	push	r13
     290:	ef 92       	push	r14
     292:	ff 92       	push	r15
     294:	cf 93       	push	r28
     296:	c8 2f       	mov	r28, r24
     298:	c0 90 e9 07 	lds	r12, 0x07E9	; 0x8007e9 <min_degree>
     29c:	d0 90 ea 07 	lds	r13, 0x07EA	; 0x8007ea <min_degree+0x1>
     2a0:	e0 90 eb 07 	lds	r14, 0x07EB	; 0x8007eb <min_degree+0x2>
     2a4:	f0 90 ec 07 	lds	r15, 0x07EC	; 0x8007ec <min_degree+0x3>
     2a8:	a7 01       	movw	r20, r14
     2aa:	96 01       	movw	r18, r12
     2ac:	60 91 f8 07 	lds	r22, 0x07F8	; 0x8007f8 <max_degree>
     2b0:	70 91 f9 07 	lds	r23, 0x07F9	; 0x8007f9 <max_degree+0x1>
     2b4:	80 91 fa 07 	lds	r24, 0x07FA	; 0x8007fa <max_degree+0x2>
     2b8:	90 91 fb 07 	lds	r25, 0x07FB	; 0x8007fb <max_degree+0x3>
     2bc:	0e 94 ad 11 	call	0x235a	; 0x235a <__subsf3>
     2c0:	20 e0       	ldi	r18, 0x00	; 0
     2c2:	30 e0       	ldi	r19, 0x00	; 0
     2c4:	48 ec       	ldi	r20, 0xC8	; 200
     2c6:	52 e4       	ldi	r21, 0x42	; 66
     2c8:	0e 94 1f 12 	call	0x243e	; 0x243e <__divsf3>
     2cc:	4b 01       	movw	r8, r22
     2ce:	5c 01       	movw	r10, r24
     2d0:	6c 2f       	mov	r22, r28
     2d2:	70 e0       	ldi	r23, 0x00	; 0
     2d4:	80 e0       	ldi	r24, 0x00	; 0
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	0e 94 c9 12 	call	0x2592	; 0x2592 <__floatsisf>
     2dc:	a5 01       	movw	r20, r10
     2de:	94 01       	movw	r18, r8
     2e0:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__mulsf3>
     2e4:	9b 01       	movw	r18, r22
     2e6:	ac 01       	movw	r20, r24
     2e8:	c7 01       	movw	r24, r14
     2ea:	b6 01       	movw	r22, r12
     2ec:	0e 94 ae 11 	call	0x235c	; 0x235c <__addsf3>
     2f0:	cf 91       	pop	r28
     2f2:	ff 90       	pop	r15
     2f4:	ef 90       	pop	r14
     2f6:	df 90       	pop	r13
     2f8:	cf 90       	pop	r12
     2fa:	bf 90       	pop	r11
     2fc:	af 90       	pop	r10
     2fe:	9f 90       	pop	r9
     300:	8f 90       	pop	r8
     302:	08 95       	ret

00000304 <finger1_flexion>:
     304:	0e 94 42 01 	call	0x284	; 0x284 <flexion_to_degree>
     308:	20 e0       	ldi	r18, 0x00	; 0
     30a:	30 e0       	ldi	r19, 0x00	; 0
     30c:	44 e3       	ldi	r20, 0x34	; 52
     30e:	53 ec       	ldi	r21, 0xC3	; 195
     310:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <set_degrees_TC1>
     314:	08 95       	ret

00000316 <finger1_degree>:
     316:	20 e0       	ldi	r18, 0x00	; 0
     318:	30 e0       	ldi	r19, 0x00	; 0
     31a:	44 e3       	ldi	r20, 0x34	; 52
     31c:	53 ec       	ldi	r21, 0xC3	; 195
     31e:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <set_degrees_TC1>
     322:	08 95       	ret

00000324 <finger2_flexion>:
     324:	0e 94 42 01 	call	0x284	; 0x284 <flexion_to_degree>
     328:	9b 01       	movw	r18, r22
     32a:	ac 01       	movw	r20, r24
     32c:	60 e0       	ldi	r22, 0x00	; 0
     32e:	70 e0       	ldi	r23, 0x00	; 0
     330:	84 e3       	ldi	r24, 0x34	; 52
     332:	93 ec       	ldi	r25, 0xC3	; 195
     334:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <set_degrees_TC1>
     338:	08 95       	ret

0000033a <finger2_degree>:
     33a:	9b 01       	movw	r18, r22
     33c:	ac 01       	movw	r20, r24
     33e:	60 e0       	ldi	r22, 0x00	; 0
     340:	70 e0       	ldi	r23, 0x00	; 0
     342:	84 e3       	ldi	r24, 0x34	; 52
     344:	93 ec       	ldi	r25, 0xC3	; 195
     346:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <set_degrees_TC1>
     34a:	08 95       	ret

0000034c <finger3_flexion>:
     34c:	0e 94 42 01 	call	0x284	; 0x284 <flexion_to_degree>
     350:	20 e0       	ldi	r18, 0x00	; 0
     352:	30 e0       	ldi	r19, 0x00	; 0
     354:	44 e3       	ldi	r20, 0x34	; 52
     356:	53 ec       	ldi	r21, 0xC3	; 195
     358:	0e 94 b2 03 	call	0x764	; 0x764 <set_degrees_TC0>
     35c:	08 95       	ret

0000035e <finger3_degree>:
     35e:	20 e0       	ldi	r18, 0x00	; 0
     360:	30 e0       	ldi	r19, 0x00	; 0
     362:	44 e3       	ldi	r20, 0x34	; 52
     364:	53 ec       	ldi	r21, 0xC3	; 195
     366:	0e 94 b2 03 	call	0x764	; 0x764 <set_degrees_TC0>
     36a:	08 95       	ret

0000036c <finger4_flexion>:
     36c:	0e 94 42 01 	call	0x284	; 0x284 <flexion_to_degree>
     370:	9b 01       	movw	r18, r22
     372:	ac 01       	movw	r20, r24
     374:	60 e0       	ldi	r22, 0x00	; 0
     376:	70 e0       	ldi	r23, 0x00	; 0
     378:	84 e3       	ldi	r24, 0x34	; 52
     37a:	93 ec       	ldi	r25, 0xC3	; 195
     37c:	0e 94 b2 03 	call	0x764	; 0x764 <set_degrees_TC0>
     380:	08 95       	ret

00000382 <finger4_degree>:
     382:	9b 01       	movw	r18, r22
     384:	ac 01       	movw	r20, r24
     386:	60 e0       	ldi	r22, 0x00	; 0
     388:	70 e0       	ldi	r23, 0x00	; 0
     38a:	84 e3       	ldi	r24, 0x34	; 52
     38c:	93 ec       	ldi	r25, 0xC3	; 195
     38e:	0e 94 b2 03 	call	0x764	; 0x764 <set_degrees_TC0>
     392:	08 95       	ret

00000394 <finger5_flexion>:
     394:	0e 94 42 01 	call	0x284	; 0x284 <flexion_to_degree>
     398:	20 e0       	ldi	r18, 0x00	; 0
     39a:	30 e0       	ldi	r19, 0x00	; 0
     39c:	44 e3       	ldi	r20, 0x34	; 52
     39e:	53 ec       	ldi	r21, 0xC3	; 195
     3a0:	0e 94 3c 05 	call	0xa78	; 0xa78 <set_degrees_TC2>
     3a4:	08 95       	ret

000003a6 <finger5_degree>:
void finger5_flexion(uint8_t flexion){
	set_degrees_TC2(flexion_to_degree(flexion), -180.0);
}

void finger5_degree(float degree){
	set_degrees_TC2(degree, -180.0);
     3a6:	20 e0       	ldi	r18, 0x00	; 0
     3a8:	30 e0       	ldi	r19, 0x00	; 0
     3aa:	44 e3       	ldi	r20, 0x34	; 52
     3ac:	53 ec       	ldi	r21, 0xC3	; 195
     3ae:	0e 94 3c 05 	call	0xa78	; 0xa78 <set_degrees_TC2>
     3b2:	08 95       	ret

000003b4 <I2C_init_slave>:
/*
	Transmit STOP condition
*/
void I2C_STOPcond(){
	// Enable TWI interface; transmit a STOP condition; clear TWINT flag
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//(1<<TWEN)|(1<<TWSTO)|(1<<TWINT);
     3b4:	60 93 fe 07 	sts	0x07FE, r22	; 0x8007fe <inter>
     3b8:	88 0f       	add	r24, r24
     3ba:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
     3be:	80 91 fe 07 	lds	r24, 0x07FE	; 0x8007fe <inter>
     3c2:	84 6c       	ori	r24, 0xC4	; 196
     3c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     3c8:	08 95       	ret

000003ca <I2C_write_data>:
// 	return 1;
// }

uint8_t I2C_write_data(uint8_t data, uint8_t TWEA_val, uint8_t cond){
	// write data byte to TWDR
	TWDR = data;
     3ca:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	// Clear TWINT;  get ACK; enable TWI interface; set interruptions on or off
	TWCR = (1<<TWINT)|(TWEA_val<<TWEA)|(1<<TWEN)|(inter<<TWIE);
     3ce:	80 e4       	ldi	r24, 0x40	; 64
     3d0:	68 9f       	mul	r22, r24
     3d2:	b0 01       	movw	r22, r0
     3d4:	11 24       	eor	r1, r1
     3d6:	80 91 fe 07 	lds	r24, 0x07FE	; 0x8007fe <inter>
     3da:	68 2b       	or	r22, r24
     3dc:	64 68       	ori	r22, 0x84	; 132
     3de:	60 93 bc 00 	sts	0x00BC, r22	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	// Wait for hardware action: TWINT Flag set
	while (!(TWCR &	(1<<TWINT)));
     3e2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     3e6:	88 23       	and	r24, r24
     3e8:	e4 f7       	brge	.-8      	; 0x3e2 <I2C_write_data+0x18>
	// Check if data sent and AKC received
	if(TW_STATUS != cond) return 0;		// if not, NACK
     3ea:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     3ee:	88 7f       	andi	r24, 0xF8	; 248
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	50 e0       	ldi	r21, 0x00	; 0
     3f4:	84 17       	cp	r24, r20
     3f6:	95 07       	cpc	r25, r21
     3f8:	11 f0       	breq	.+4      	; 0x3fe <I2C_write_data+0x34>
     3fa:	80 e0       	ldi	r24, 0x00	; 0
     3fc:	08 95       	ret
	return 1;
     3fe:	81 e0       	ldi	r24, 0x01	; 1
}
     400:	08 95       	ret

00000402 <I2C_read_data>:
	The TWEA bit must be written to one to enable the
	acknowledgement of the devices own slave address
*/
void I2C_read_data(uint8_t TWEA_val, uint8_t cond){
	// Clear TWINT;  get ACK; enable TWI interface; set interruptions on or off
	TWCR = (1<<TWINT)|(TWEA_val<<TWEA)|(1<<TWEN)|(inter<<TWIE);
     402:	20 e4       	ldi	r18, 0x40	; 64
     404:	82 9f       	mul	r24, r18
     406:	c0 01       	movw	r24, r0
     408:	11 24       	eor	r1, r1
     40a:	90 91 fe 07 	lds	r25, 0x07FE	; 0x8007fe <inter>
     40e:	89 2b       	or	r24, r25
     410:	84 68       	ori	r24, 0x84	; 132
     412:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	// Wait for hardware action: TWINT Flag set
	while (!(TWCR &	(1<<TWINT)));
     416:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     41a:	88 23       	and	r24, r24
     41c:	e4 f7       	brge	.-8      	; 0x416 <I2C_read_data+0x14>
	// Check if data received and AKC returned -> 		// Put in buffer the value from TWDR
	if(TW_STATUS == cond){
     41e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     422:	88 7f       	andi	r24, 0xF8	; 248
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	70 e0       	ldi	r23, 0x00	; 0
     428:	86 17       	cp	r24, r22
     42a:	97 07       	cpc	r25, r23
     42c:	a9 f5       	brne	.+106    	; 0x498 <I2C_read_data+0x96>
		switch(TWDR){
     42e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     432:	8a 30       	cpi	r24, 0x0A	; 10
     434:	71 f0       	breq	.+28     	; 0x452 <I2C_read_data+0x50>
     436:	18 f4       	brcc	.+6      	; 0x43e <I2C_read_data+0x3c>
     438:	81 11       	cpse	r24, r1
     43a:	1c c0       	rjmp	.+56     	; 0x474 <I2C_read_data+0x72>
     43c:	0a c0       	rjmp	.+20     	; 0x452 <I2C_read_data+0x50>
     43e:	8d 30       	cpi	r24, 0x0D	; 13
     440:	41 f0       	breq	.+16     	; 0x452 <I2C_read_data+0x50>
     442:	8a 33       	cpi	r24, 0x3A	; 58
     444:	b9 f4       	brne	.+46     	; 0x474 <I2C_read_data+0x72>
			case ':':
				flagcom = 1;
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	80 93 1d 08 	sts	0x081D, r24	; 0x80081d <flagcom>
				indcom = 0;
     44c:	10 92 e4 07 	sts	0x07E4, r1	; 0x8007e4 <__data_end>
				break;
     450:	08 95       	ret
			case 0:
			case '\r':
			case '\n':
				if(flagcom){
     452:	80 91 1d 08 	lds	r24, 0x081D	; 0x80081d <flagcom>
     456:	88 23       	and	r24, r24
     458:	51 f0       	breq	.+20     	; 0x46e <I2C_read_data+0x6c>
					comando[indcom] = 0;
     45a:	e0 91 e4 07 	lds	r30, 0x07E4	; 0x8007e4 <__data_end>
     45e:	f0 e0       	ldi	r31, 0x00	; 0
     460:	e1 50       	subi	r30, 0x01	; 1
     462:	f8 4f       	sbci	r31, 0xF8	; 248
     464:	10 82       	st	Z, r1
					indcom = 0;
     466:	10 92 e4 07 	sts	0x07E4, r1	; 0x8007e4 <__data_end>
					i2c_interpreter();
     46a:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <i2c_interpreter>
				}
				flagcom = 0;
     46e:	10 92 1d 08 	sts	0x081D, r1	; 0x80081d <flagcom>
				break;
     472:	08 95       	ret
			default:
				if(flagcom && indcom<comSize)	comando[indcom++] = TWDR;
     474:	80 91 1d 08 	lds	r24, 0x081D	; 0x80081d <flagcom>
     478:	88 23       	and	r24, r24
     47a:	71 f0       	breq	.+28     	; 0x498 <I2C_read_data+0x96>
     47c:	e0 91 e4 07 	lds	r30, 0x07E4	; 0x8007e4 <__data_end>
     480:	ee 31       	cpi	r30, 0x1E	; 30
     482:	50 f4       	brcc	.+20     	; 0x498 <I2C_read_data+0x96>
     484:	81 e0       	ldi	r24, 0x01	; 1
     486:	8e 0f       	add	r24, r30
     488:	80 93 e4 07 	sts	0x07E4, r24	; 0x8007e4 <__data_end>
     48c:	f0 e0       	ldi	r31, 0x00	; 0
     48e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     492:	e1 50       	subi	r30, 0x01	; 1
     494:	f8 4f       	sbci	r31, 0xF8	; 248
     496:	80 83       	st	Z, r24
     498:	08 95       	ret

0000049a <__vector_24>:

/*
	Interruption service rutine
*/
ISR(TWI_vect)
{
     49a:	1f 92       	push	r1
     49c:	0f 92       	push	r0
     49e:	0f b6       	in	r0, 0x3f	; 63
     4a0:	0f 92       	push	r0
     4a2:	11 24       	eor	r1, r1
     4a4:	2f 93       	push	r18
     4a6:	3f 93       	push	r19
     4a8:	4f 93       	push	r20
     4aa:	5f 93       	push	r21
     4ac:	6f 93       	push	r22
     4ae:	7f 93       	push	r23
     4b0:	8f 93       	push	r24
     4b2:	9f 93       	push	r25
     4b4:	af 93       	push	r26
     4b6:	bf 93       	push	r27
     4b8:	ef 93       	push	r30
     4ba:	ff 93       	push	r31
	switch(TW_STATUS)
     4bc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     4c0:	88 7f       	andi	r24, 0xF8	; 248
     4c2:	80 38       	cpi	r24, 0x80	; 128
     4c4:	a1 f0       	breq	.+40     	; 0x4ee <__vector_24+0x54>
     4c6:	28 f4       	brcc	.+10     	; 0x4d2 <__vector_24+0x38>
     4c8:	88 23       	and	r24, r24
     4ca:	81 f1       	breq	.+96     	; 0x52c <__vector_24+0x92>
     4cc:	80 36       	cpi	r24, 0x60	; 96
     4ce:	41 f0       	breq	.+16     	; 0x4e0 <__vector_24+0x46>
     4d0:	34 c0       	rjmp	.+104    	; 0x53a <__vector_24+0xa0>
     4d2:	88 3a       	cpi	r24, 0xA8	; 168
     4d4:	c9 f0       	breq	.+50     	; 0x508 <__vector_24+0x6e>
     4d6:	88 3b       	cpi	r24, 0xB8	; 184
     4d8:	01 f1       	breq	.+64     	; 0x51a <__vector_24+0x80>
     4da:	80 3a       	cpi	r24, 0xA0	; 160
     4dc:	71 f5       	brne	.+92     	; 0x53a <__vector_24+0xa0>
     4de:	0e c0       	rjmp	.+28     	; 0x4fc <__vector_24+0x62>
	{
		case TW_SR_SLA_ACK:
			I2C_read_data(TWEA_slave, TW_STATUS);
     4e0:	60 91 b9 00 	lds	r22, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     4e4:	68 7f       	andi	r22, 0xF8	; 248
     4e6:	81 e0       	ldi	r24, 0x01	; 1
     4e8:	0e 94 01 02 	call	0x402	; 0x402 <I2C_read_data>
			break;
     4ec:	26 c0       	rjmp	.+76     	; 0x53a <__vector_24+0xa0>
		case TW_SR_DATA_ACK:
			I2C_read_data(TWEA_slave, TW_STATUS);
     4ee:	60 91 b9 00 	lds	r22, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     4f2:	68 7f       	andi	r22, 0xF8	; 248
     4f4:	81 e0       	ldi	r24, 0x01	; 1
     4f6:	0e 94 01 02 	call	0x402	; 0x402 <I2C_read_data>
			break;
     4fa:	1f c0       	rjmp	.+62     	; 0x53a <__vector_24+0xa0>
		case TW_SR_STOP:
			TWCR |= (1<<TWINT);		
     4fc:	ec eb       	ldi	r30, 0xBC	; 188
     4fe:	f0 e0       	ldi	r31, 0x00	; 0
     500:	80 81       	ld	r24, Z
     502:	80 68       	ori	r24, 0x80	; 128
     504:	80 83       	st	Z, r24
			break;
     506:	19 c0       	rjmp	.+50     	; 0x53a <__vector_24+0xa0>
		case TW_ST_SLA_ACK:
			I2C_write_data(TWDR, 1, TW_STATUS);
     508:	40 91 b9 00 	lds	r20, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     50c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     510:	48 7f       	andi	r20, 0xF8	; 248
     512:	61 e0       	ldi	r22, 0x01	; 1
     514:	0e 94 e5 01 	call	0x3ca	; 0x3ca <I2C_write_data>
			break;
     518:	10 c0       	rjmp	.+32     	; 0x53a <__vector_24+0xa0>
		case TW_ST_DATA_ACK:
			I2C_write_data(TWDR, 1, TW_STATUS);
     51a:	40 91 b9 00 	lds	r20, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     51e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     522:	48 7f       	andi	r20, 0xF8	; 248
     524:	61 e0       	ldi	r22, 0x01	; 1
     526:	0e 94 e5 01 	call	0x3ca	; 0x3ca <I2C_write_data>
			break;
     52a:	07 c0       	rjmp	.+14     	; 0x53a <__vector_24+0xa0>
		case TW_BUS_ERROR:
			printf("ERROR!\r\n");
     52c:	85 e1       	ldi	r24, 0x15	; 21
     52e:	91 e0       	ldi	r25, 0x01	; 1
     530:	0e 94 6e 14 	call	0x28dc	; 0x28dc <puts>
			// illegal start or stop condition
 			TWCR = (1 << TWIE) | (1 << TWINT) | (1 << TWEA) | (1 << TWEN);
     534:	85 ec       	ldi	r24, 0xC5	; 197
     536:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
			break;
		default:
			break;
	}
}
     53a:	ff 91       	pop	r31
     53c:	ef 91       	pop	r30
     53e:	bf 91       	pop	r27
     540:	af 91       	pop	r26
     542:	9f 91       	pop	r25
     544:	8f 91       	pop	r24
     546:	7f 91       	pop	r23
     548:	6f 91       	pop	r22
     54a:	5f 91       	pop	r21
     54c:	4f 91       	pop	r20
     54e:	3f 91       	pop	r19
     550:	2f 91       	pop	r18
     552:	0f 90       	pop	r0
     554:	0f be       	out	0x3f, r0	; 63
     556:	0f 90       	pop	r0
     558:	1f 90       	pop	r1
     55a:	18 95       	reti

0000055c <getVal>:

uint8_t getVal(uint8_t ind){
	// UINT8_MAX -> 255 (3 cifras)
	// Ademas, el servidor envia valores del 0 a 100
	uint8_t val = 0;
	for(int i=(ind+1); i<=(ind+4); i++){
     55c:	68 2f       	mov	r22, r24
     55e:	70 e0       	ldi	r23, 0x00	; 0
     560:	9b 01       	movw	r18, r22
     562:	2f 5f       	subi	r18, 0xFF	; 255
     564:	3f 4f       	sbci	r19, 0xFF	; 255
#include "i2c_interpreter.h"

uint8_t getVal(uint8_t ind){
	// UINT8_MAX -> 255 (3 cifras)
	// Ademas, el servidor envia valores del 0 a 100
	uint8_t val = 0;
     566:	80 e0       	ldi	r24, 0x00	; 0
	for(int i=(ind+1); i<=(ind+4); i++){
     568:	16 c0       	rjmp	.+44     	; 0x596 <getVal+0x3a>
		indcom = i;
     56a:	20 93 e4 07 	sts	0x07E4, r18	; 0x8007e4 <__data_end>
		if(!isdigit(comando[i]))	break;
     56e:	f9 01       	movw	r30, r18
     570:	e1 50       	subi	r30, 0x01	; 1
     572:	f8 4f       	sbci	r31, 0xF8	; 248
     574:	90 81       	ld	r25, Z
     576:	49 2f       	mov	r20, r25
     578:	50 e0       	ldi	r21, 0x00	; 0
     57a:	40 53       	subi	r20, 0x30	; 48
     57c:	51 09       	sbc	r21, r1
     57e:	4a 30       	cpi	r20, 0x0A	; 10
     580:	51 05       	cpc	r21, r1
     582:	78 f4       	brcc	.+30     	; 0x5a2 <getVal+0x46>
		val = val*10 + comando[i] - '0';
     584:	88 0f       	add	r24, r24
     586:	48 2f       	mov	r20, r24
     588:	44 0f       	add	r20, r20
     58a:	44 0f       	add	r20, r20
     58c:	84 0f       	add	r24, r20
     58e:	89 0f       	add	r24, r25
     590:	80 53       	subi	r24, 0x30	; 48

uint8_t getVal(uint8_t ind){
	// UINT8_MAX -> 255 (3 cifras)
	// Ademas, el servidor envia valores del 0 a 100
	uint8_t val = 0;
	for(int i=(ind+1); i<=(ind+4); i++){
     592:	2f 5f       	subi	r18, 0xFF	; 255
     594:	3f 4f       	sbci	r19, 0xFF	; 255
     596:	ab 01       	movw	r20, r22
     598:	4c 5f       	subi	r20, 0xFC	; 252
     59a:	5f 4f       	sbci	r21, 0xFF	; 255
     59c:	42 17       	cp	r20, r18
     59e:	53 07       	cpc	r21, r19
     5a0:	24 f7       	brge	.-56     	; 0x56a <getVal+0xe>
		indcom = i;
		if(!isdigit(comando[i]))	break;
		val = val*10 + comando[i] - '0';
	}
	return val;
}
     5a2:	08 95       	ret

000005a4 <i2c_interpreter>:


void i2c_interpreter(){
	switch(comando[indcom]){
     5a4:	e0 91 e4 07 	lds	r30, 0x07E4	; 0x8007e4 <__data_end>
     5a8:	f0 e0       	ldi	r31, 0x00	; 0
     5aa:	e1 50       	subi	r30, 0x01	; 1
     5ac:	f8 4f       	sbci	r31, 0xF8	; 248
     5ae:	80 81       	ld	r24, Z
     5b0:	82 34       	cpi	r24, 0x42	; 66
     5b2:	61 f1       	breq	.+88     	; 0x60c <i2c_interpreter+0x68>
     5b4:	30 f4       	brcc	.+12     	; 0x5c2 <i2c_interpreter+0x1e>
     5b6:	88 23       	and	r24, r24
     5b8:	09 f4       	brne	.+2      	; 0x5bc <i2c_interpreter+0x18>
     5ba:	9c c0       	rjmp	.+312    	; 0x6f4 <i2c_interpreter+0x150>
     5bc:	81 34       	cpi	r24, 0x41	; 65
     5be:	49 f0       	breq	.+18     	; 0x5d2 <i2c_interpreter+0x2e>
     5c0:	ae c0       	rjmp	.+348    	; 0x71e <i2c_interpreter+0x17a>
     5c2:	84 34       	cpi	r24, 0x44	; 68
     5c4:	09 f4       	brne	.+2      	; 0x5c8 <i2c_interpreter+0x24>
     5c6:	5c c0       	rjmp	.+184    	; 0x680 <i2c_interpreter+0xdc>
     5c8:	f0 f1       	brcs	.+124    	; 0x646 <i2c_interpreter+0xa2>
     5ca:	85 34       	cpi	r24, 0x45	; 69
     5cc:	09 f4       	brne	.+2      	; 0x5d0 <i2c_interpreter+0x2c>
     5ce:	75 c0       	rjmp	.+234    	; 0x6ba <i2c_interpreter+0x116>
     5d0:	a6 c0       	rjmp	.+332    	; 0x71e <i2c_interpreter+0x17a>
		case 'A':						
			printf("Dedo 1 ");
     5d2:	8d e1       	ldi	r24, 0x1D	; 29
     5d4:	91 e0       	ldi	r25, 0x01	; 1
     5d6:	9f 93       	push	r25
     5d8:	8f 93       	push	r24
     5da:	0e 94 58 14 	call	0x28b0	; 0x28b0 <printf>
			ff1 = getVal(indcom);
     5de:	80 91 e4 07 	lds	r24, 0x07E4	; 0x8007e4 <__data_end>
     5e2:	0e 94 ae 02 	call	0x55c	; 0x55c <getVal>
     5e6:	80 93 1e 08 	sts	0x081E, r24	; 0x80081e <ff1>
			printf("-> %d\r\n", ff1);
     5ea:	1f 92       	push	r1
     5ec:	8f 93       	push	r24
     5ee:	85 e2       	ldi	r24, 0x25	; 37
     5f0:	91 e0       	ldi	r25, 0x01	; 1
     5f2:	9f 93       	push	r25
     5f4:	8f 93       	push	r24
     5f6:	0e 94 58 14 	call	0x28b0	; 0x28b0 <printf>
			i2c_interpreter();
     5fa:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <i2c_interpreter>
			break;
     5fe:	0f 90       	pop	r0
     600:	0f 90       	pop	r0
     602:	0f 90       	pop	r0
     604:	0f 90       	pop	r0
     606:	0f 90       	pop	r0
     608:	0f 90       	pop	r0
     60a:	08 95       	ret
		case 'B':						
			printf("Dedo 2 ");
     60c:	8d e2       	ldi	r24, 0x2D	; 45
     60e:	91 e0       	ldi	r25, 0x01	; 1
     610:	9f 93       	push	r25
     612:	8f 93       	push	r24
     614:	0e 94 58 14 	call	0x28b0	; 0x28b0 <printf>
			ff2 = getVal(indcom);
     618:	80 91 e4 07 	lds	r24, 0x07E4	; 0x8007e4 <__data_end>
     61c:	0e 94 ae 02 	call	0x55c	; 0x55c <getVal>
     620:	80 93 ef 07 	sts	0x07EF, r24	; 0x8007ef <ff2>
			printf("-> %d\r\n", ff2);
     624:	1f 92       	push	r1
     626:	8f 93       	push	r24
     628:	85 e2       	ldi	r24, 0x25	; 37
     62a:	91 e0       	ldi	r25, 0x01	; 1
     62c:	9f 93       	push	r25
     62e:	8f 93       	push	r24
     630:	0e 94 58 14 	call	0x28b0	; 0x28b0 <printf>
			i2c_interpreter();
     634:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <i2c_interpreter>
			break;
     638:	0f 90       	pop	r0
     63a:	0f 90       	pop	r0
     63c:	0f 90       	pop	r0
     63e:	0f 90       	pop	r0
     640:	0f 90       	pop	r0
     642:	0f 90       	pop	r0
     644:	08 95       	ret
		case 'C':						
			printf("Dedo 3 ");
     646:	85 e3       	ldi	r24, 0x35	; 53
     648:	91 e0       	ldi	r25, 0x01	; 1
     64a:	9f 93       	push	r25
     64c:	8f 93       	push	r24
     64e:	0e 94 58 14 	call	0x28b0	; 0x28b0 <printf>
			ff3 = getVal(indcom);
     652:	80 91 e4 07 	lds	r24, 0x07E4	; 0x8007e4 <__data_end>
     656:	0e 94 ae 02 	call	0x55c	; 0x55c <getVal>
     65a:	80 93 e6 07 	sts	0x07E6, r24	; 0x8007e6 <ff3>
			printf("-> %d\r\n", ff3);
     65e:	1f 92       	push	r1
     660:	8f 93       	push	r24
     662:	85 e2       	ldi	r24, 0x25	; 37
     664:	91 e0       	ldi	r25, 0x01	; 1
     666:	9f 93       	push	r25
     668:	8f 93       	push	r24
     66a:	0e 94 58 14 	call	0x28b0	; 0x28b0 <printf>
			i2c_interpreter();
     66e:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <i2c_interpreter>
			break;
     672:	0f 90       	pop	r0
     674:	0f 90       	pop	r0
     676:	0f 90       	pop	r0
     678:	0f 90       	pop	r0
     67a:	0f 90       	pop	r0
     67c:	0f 90       	pop	r0
     67e:	08 95       	ret
		case 'D':						
			printf("Dedo 4 ");
     680:	8d e3       	ldi	r24, 0x3D	; 61
     682:	91 e0       	ldi	r25, 0x01	; 1
     684:	9f 93       	push	r25
     686:	8f 93       	push	r24
     688:	0e 94 58 14 	call	0x28b0	; 0x28b0 <printf>
			ff4 = getVal(indcom);
     68c:	80 91 e4 07 	lds	r24, 0x07E4	; 0x8007e4 <__data_end>
     690:	0e 94 ae 02 	call	0x55c	; 0x55c <getVal>
     694:	80 93 fd 07 	sts	0x07FD, r24	; 0x8007fd <ff4>
			printf("-> %d\r\n", ff4);
     698:	1f 92       	push	r1
     69a:	8f 93       	push	r24
     69c:	85 e2       	ldi	r24, 0x25	; 37
     69e:	91 e0       	ldi	r25, 0x01	; 1
     6a0:	9f 93       	push	r25
     6a2:	8f 93       	push	r24
     6a4:	0e 94 58 14 	call	0x28b0	; 0x28b0 <printf>
			i2c_interpreter();
     6a8:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <i2c_interpreter>
			break;
     6ac:	0f 90       	pop	r0
     6ae:	0f 90       	pop	r0
     6b0:	0f 90       	pop	r0
     6b2:	0f 90       	pop	r0
     6b4:	0f 90       	pop	r0
     6b6:	0f 90       	pop	r0
     6b8:	08 95       	ret
		case 'E':						
			printf("Dedo 5 ");
     6ba:	85 e4       	ldi	r24, 0x45	; 69
     6bc:	91 e0       	ldi	r25, 0x01	; 1
     6be:	9f 93       	push	r25
     6c0:	8f 93       	push	r24
     6c2:	0e 94 58 14 	call	0x28b0	; 0x28b0 <printf>
			ff5 = getVal(indcom);
     6c6:	80 91 e4 07 	lds	r24, 0x07E4	; 0x8007e4 <__data_end>
     6ca:	0e 94 ae 02 	call	0x55c	; 0x55c <getVal>
     6ce:	80 93 e5 07 	sts	0x07E5, r24	; 0x8007e5 <ff5>
			printf("-> %d\r\n", ff5);
     6d2:	1f 92       	push	r1
     6d4:	8f 93       	push	r24
     6d6:	85 e2       	ldi	r24, 0x25	; 37
     6d8:	91 e0       	ldi	r25, 0x01	; 1
     6da:	9f 93       	push	r25
     6dc:	8f 93       	push	r24
     6de:	0e 94 58 14 	call	0x28b0	; 0x28b0 <printf>
			i2c_interpreter();
     6e2:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <i2c_interpreter>
			break;
     6e6:	0f 90       	pop	r0
     6e8:	0f 90       	pop	r0
     6ea:	0f 90       	pop	r0
     6ec:	0f 90       	pop	r0
     6ee:	0f 90       	pop	r0
     6f0:	0f 90       	pop	r0
     6f2:	08 95       	ret
		case 0:
			finger1_flexion(ff1);
     6f4:	80 91 1e 08 	lds	r24, 0x081E	; 0x80081e <ff1>
     6f8:	0e 94 82 01 	call	0x304	; 0x304 <finger1_flexion>
			finger2_flexion(ff2);
     6fc:	80 91 ef 07 	lds	r24, 0x07EF	; 0x8007ef <ff2>
     700:	0e 94 92 01 	call	0x324	; 0x324 <finger2_flexion>
			finger3_flexion(ff3);
     704:	80 91 e6 07 	lds	r24, 0x07E6	; 0x8007e6 <ff3>
     708:	0e 94 a6 01 	call	0x34c	; 0x34c <finger3_flexion>
			finger4_flexion(ff4);
     70c:	80 91 fd 07 	lds	r24, 0x07FD	; 0x8007fd <ff4>
     710:	0e 94 b6 01 	call	0x36c	; 0x36c <finger4_flexion>
			finger5_flexion(ff5);
     714:	80 91 e5 07 	lds	r24, 0x07E5	; 0x8007e5 <ff5>
     718:	0e 94 ca 01 	call	0x394	; 0x394 <finger5_flexion>
			break;
     71c:	08 95       	ret
		default:
			printf("\r\nError de recepcion\r\n");
     71e:	8d e4       	ldi	r24, 0x4D	; 77
     720:	91 e0       	ldi	r25, 0x01	; 1
     722:	0e 94 6e 14 	call	0x28dc	; 0x28dc <puts>
     726:	08 95       	ret

00000728 <set_TC0_for_servomotors>:

#include "servomotors.h"

// ======================= TIMER 0 =============================
void set_TC0_for_servomotors(){
	T_servo_ms = 16;								// [ms] periodo del PWM para controlar los servomotores
     728:	80 e0       	ldi	r24, 0x00	; 0
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	a0 e8       	ldi	r26, 0x80	; 128
     72e:	b1 e4       	ldi	r27, 0x41	; 65
     730:	80 93 f0 07 	sts	0x07F0, r24	; 0x8007f0 <T_servo_ms>
     734:	90 93 f1 07 	sts	0x07F1, r25	; 0x8007f1 <T_servo_ms+0x1>
     738:	a0 93 f2 07 	sts	0x07F2, r26	; 0x8007f2 <T_servo_ms+0x2>
     73c:	b0 93 f3 07 	sts	0x07F3, r27	; 0x8007f3 <T_servo_ms+0x3>
	configuracion_modo_timer0(FAST_PWM_8b);			// Fast PWM con 0xFF (255) como TOP
     740:	83 e0       	ldi	r24, 0x03	; 3
     742:	0e 94 de 05 	call	0xbbc	; 0xbbc <configuracion_modo_timer0>
	seleccion_prescaler_ms_timer0(T_servo_ms);		// Prescaler de acuerdo al periodo requerido
     746:	60 91 f0 07 	lds	r22, 0x07F0	; 0x8007f0 <T_servo_ms>
     74a:	70 91 f1 07 	lds	r23, 0x07F1	; 0x8007f1 <T_servo_ms+0x1>
     74e:	80 91 f2 07 	lds	r24, 0x07F2	; 0x8007f2 <T_servo_ms+0x2>
     752:	90 91 f3 07 	lds	r25, 0x07F3	; 0x8007f3 <T_servo_ms+0x3>
     756:	0e 94 68 06 	call	0xcd0	; 0xcd0 <seleccion_prescaler_ms_timer0>
	configuracion_modoSalidas_timer0(Clear, Clear);	// Salida OC0A en Clear, OC0B en Clear
     75a:	62 e0       	ldi	r22, 0x02	; 2
     75c:	82 e0       	ldi	r24, 0x02	; 2
     75e:	0e 94 da 06 	call	0xdb4	; 0xdb4 <configuracion_modoSalidas_timer0>
     762:	08 95       	ret

00000764 <set_degrees_TC0>:
}


void set_degrees_TC0(float degreesA, float degreesB){
     764:	4f 92       	push	r4
     766:	5f 92       	push	r5
     768:	6f 92       	push	r6
     76a:	7f 92       	push	r7
     76c:	8f 92       	push	r8
     76e:	9f 92       	push	r9
     770:	af 92       	push	r10
     772:	bf 92       	push	r11
     774:	cf 92       	push	r12
     776:	df 92       	push	r13
     778:	ef 92       	push	r14
     77a:	ff 92       	push	r15
     77c:	2b 01       	movw	r4, r22
     77e:	3c 01       	movw	r6, r24
     780:	49 01       	movw	r8, r18
     782:	5a 01       	movw	r10, r20
	float dutycicleB = -1.0;
	// Segun pruebas manuales (difiere ligeramente del datasheet)
	// -90ï¿½ --> 0.7ms
	// +90ï¿½ --> 2.4ms
	// Ecuacion de la recta dados dos puntos
	if(degreesA >= min_degree && degreesA <= max_degree)	dutycicleA = (1.7/180.0)*(degreesA + 90.0) + 0.7;
     784:	c0 90 e9 07 	lds	r12, 0x07E9	; 0x8007e9 <min_degree>
     788:	d0 90 ea 07 	lds	r13, 0x07EA	; 0x8007ea <min_degree+0x1>
     78c:	e0 90 eb 07 	lds	r14, 0x07EB	; 0x8007eb <min_degree+0x2>
     790:	f0 90 ec 07 	lds	r15, 0x07EC	; 0x8007ec <min_degree+0x3>
     794:	9b 01       	movw	r18, r22
     796:	ac 01       	movw	r20, r24
     798:	c7 01       	movw	r24, r14
     79a:	b6 01       	movw	r22, r12
     79c:	0e 94 1a 12 	call	0x2434	; 0x2434 <__cmpsf2>
     7a0:	18 16       	cp	r1, r24
     7a2:	2c f1       	brlt	.+74     	; 0x7ee <set_degrees_TC0+0x8a>
     7a4:	20 91 f8 07 	lds	r18, 0x07F8	; 0x8007f8 <max_degree>
     7a8:	30 91 f9 07 	lds	r19, 0x07F9	; 0x8007f9 <max_degree+0x1>
     7ac:	40 91 fa 07 	lds	r20, 0x07FA	; 0x8007fa <max_degree+0x2>
     7b0:	50 91 fb 07 	lds	r21, 0x07FB	; 0x8007fb <max_degree+0x3>
     7b4:	c3 01       	movw	r24, r6
     7b6:	b2 01       	movw	r22, r4
     7b8:	0e 94 1a 12 	call	0x2434	; 0x2434 <__cmpsf2>
     7bc:	18 16       	cp	r1, r24
     7be:	04 f1       	brlt	.+64     	; 0x800 <__DATA_REGION_LENGTH__>
     7c0:	20 e0       	ldi	r18, 0x00	; 0
     7c2:	30 e0       	ldi	r19, 0x00	; 0
     7c4:	44 eb       	ldi	r20, 0xB4	; 180
     7c6:	52 e4       	ldi	r21, 0x42	; 66
     7c8:	c3 01       	movw	r24, r6
     7ca:	b2 01       	movw	r22, r4
     7cc:	0e 94 ae 11 	call	0x235c	; 0x235c <__addsf3>
     7d0:	2f ed       	ldi	r18, 0xDF	; 223
     7d2:	3c eb       	ldi	r19, 0xBC	; 188
     7d4:	4a e1       	ldi	r20, 0x1A	; 26
     7d6:	5c e3       	ldi	r21, 0x3C	; 60
     7d8:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__mulsf3>
     7dc:	23 e3       	ldi	r18, 0x33	; 51
     7de:	33 e3       	ldi	r19, 0x33	; 51
     7e0:	43 e3       	ldi	r20, 0x33	; 51
     7e2:	5f e3       	ldi	r21, 0x3F	; 63
     7e4:	0e 94 ae 11 	call	0x235c	; 0x235c <__addsf3>
     7e8:	2b 01       	movw	r4, r22
     7ea:	3c 01       	movw	r6, r24
     7ec:	11 c0       	rjmp	.+34     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
	configuracion_modoSalidas_timer0(Clear, Clear);	// Salida OC0A en Clear, OC0B en Clear
}


void set_degrees_TC0(float degreesA, float degreesB){
	float dutycicleA = -1.0;
     7ee:	0f 2e       	mov	r0, r31
     7f0:	41 2c       	mov	r4, r1
     7f2:	51 2c       	mov	r5, r1
     7f4:	f0 e8       	ldi	r31, 0x80	; 128
     7f6:	6f 2e       	mov	r6, r31
     7f8:	ff eb       	ldi	r31, 0xBF	; 191
     7fa:	7f 2e       	mov	r7, r31
     7fc:	f0 2d       	mov	r31, r0
     7fe:	08 c0       	rjmp	.+16     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
     800:	0f 2e       	mov	r0, r31
     802:	41 2c       	mov	r4, r1
     804:	51 2c       	mov	r5, r1
     806:	f0 e8       	ldi	r31, 0x80	; 128
     808:	6f 2e       	mov	r6, r31
     80a:	ff eb       	ldi	r31, 0xBF	; 191
     80c:	7f 2e       	mov	r7, r31
     80e:	f0 2d       	mov	r31, r0
	// Segun pruebas manuales (difiere ligeramente del datasheet)
	// -90ï¿½ --> 0.7ms
	// +90ï¿½ --> 2.4ms
	// Ecuacion de la recta dados dos puntos
	if(degreesA >= min_degree && degreesA <= max_degree)	dutycicleA = (1.7/180.0)*(degreesA + 90.0) + 0.7;
	if(degreesB >= min_degree && degreesB <= max_degree)	dutycicleB = (1.7/180.0)*(degreesB + 90.0) + 0.7;
     810:	a5 01       	movw	r20, r10
     812:	94 01       	movw	r18, r8
     814:	c7 01       	movw	r24, r14
     816:	b6 01       	movw	r22, r12
     818:	0e 94 1a 12 	call	0x2434	; 0x2434 <__cmpsf2>
     81c:	18 16       	cp	r1, r24
     81e:	2c f1       	brlt	.+74     	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
     820:	20 91 f8 07 	lds	r18, 0x07F8	; 0x8007f8 <max_degree>
     824:	30 91 f9 07 	lds	r19, 0x07F9	; 0x8007f9 <max_degree+0x1>
     828:	40 91 fa 07 	lds	r20, 0x07FA	; 0x8007fa <max_degree+0x2>
     82c:	50 91 fb 07 	lds	r21, 0x07FB	; 0x8007fb <max_degree+0x3>
     830:	c5 01       	movw	r24, r10
     832:	b4 01       	movw	r22, r8
     834:	0e 94 1a 12 	call	0x2434	; 0x2434 <__cmpsf2>
     838:	18 16       	cp	r1, r24
     83a:	e4 f0       	brlt	.+56     	; 0x874 <__DATA_REGION_LENGTH__+0x74>
     83c:	20 e0       	ldi	r18, 0x00	; 0
     83e:	30 e0       	ldi	r19, 0x00	; 0
     840:	44 eb       	ldi	r20, 0xB4	; 180
     842:	52 e4       	ldi	r21, 0x42	; 66
     844:	c5 01       	movw	r24, r10
     846:	b4 01       	movw	r22, r8
     848:	0e 94 ae 11 	call	0x235c	; 0x235c <__addsf3>
     84c:	2f ed       	ldi	r18, 0xDF	; 223
     84e:	3c eb       	ldi	r19, 0xBC	; 188
     850:	4a e1       	ldi	r20, 0x1A	; 26
     852:	5c e3       	ldi	r21, 0x3C	; 60
     854:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__mulsf3>
     858:	23 e3       	ldi	r18, 0x33	; 51
     85a:	33 e3       	ldi	r19, 0x33	; 51
     85c:	43 e3       	ldi	r20, 0x33	; 51
     85e:	5f e3       	ldi	r21, 0x3F	; 63
     860:	0e 94 ae 11 	call	0x235c	; 0x235c <__addsf3>
     864:	9b 01       	movw	r18, r22
     866:	ac 01       	movw	r20, r24
     868:	09 c0       	rjmp	.+18     	; 0x87c <__DATA_REGION_LENGTH__+0x7c>
}


void set_degrees_TC0(float degreesA, float degreesB){
	float dutycicleA = -1.0;
	float dutycicleB = -1.0;
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	40 e8       	ldi	r20, 0x80	; 128
     870:	5f eb       	ldi	r21, 0xBF	; 191
     872:	04 c0       	rjmp	.+8      	; 0x87c <__DATA_REGION_LENGTH__+0x7c>
     874:	20 e0       	ldi	r18, 0x00	; 0
     876:	30 e0       	ldi	r19, 0x00	; 0
     878:	40 e8       	ldi	r20, 0x80	; 128
     87a:	5f eb       	ldi	r21, 0xBF	; 191
	// +90ï¿½ --> 2.4ms
	// Ecuacion de la recta dados dos puntos
	if(degreesA >= min_degree && degreesA <= max_degree)	dutycicleA = (1.7/180.0)*(degreesA + 90.0) + 0.7;
	if(degreesB >= min_degree && degreesB <= max_degree)	dutycicleB = (1.7/180.0)*(degreesB + 90.0) + 0.7;
	
	set_dutycicle_ms_TC0(dutycicleA, dutycicleB);
     87c:	c3 01       	movw	r24, r6
     87e:	b2 01       	movw	r22, r4
     880:	0e 94 4f 07 	call	0xe9e	; 0xe9e <set_dutycicle_ms_TC0>
}
     884:	ff 90       	pop	r15
     886:	ef 90       	pop	r14
     888:	df 90       	pop	r13
     88a:	cf 90       	pop	r12
     88c:	bf 90       	pop	r11
     88e:	af 90       	pop	r10
     890:	9f 90       	pop	r9
     892:	8f 90       	pop	r8
     894:	7f 90       	pop	r7
     896:	6f 90       	pop	r6
     898:	5f 90       	pop	r5
     89a:	4f 90       	pop	r4
     89c:	08 95       	ret

0000089e <get_degrees_TC0>:

void get_degrees_TC0(uint8_t F1, uint8_t F2){
	printf("Funcion get_degrees_TC0 no desarrollada\r\n");
     89e:	83 e6       	ldi	r24, 0x63	; 99
     8a0:	91 e0       	ldi	r25, 0x01	; 1
     8a2:	0e 94 6e 14 	call	0x28dc	; 0x28dc <puts>
     8a6:	08 95       	ret

000008a8 <set_TC1_for_servomotors>:
}


// ======================= TIMER 1 =============================
void set_TC1_for_servomotors(){
	T_servo_ms = 20;								// [ms] periodo del PWM para controlar los servomotores
     8a8:	80 e0       	ldi	r24, 0x00	; 0
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	a0 ea       	ldi	r26, 0xA0	; 160
     8ae:	b1 e4       	ldi	r27, 0x41	; 65
     8b0:	80 93 f0 07 	sts	0x07F0, r24	; 0x8007f0 <T_servo_ms>
     8b4:	90 93 f1 07 	sts	0x07F1, r25	; 0x8007f1 <T_servo_ms+0x1>
     8b8:	a0 93 f2 07 	sts	0x07F2, r26	; 0x8007f2 <T_servo_ms+0x2>
     8bc:	b0 93 f3 07 	sts	0x07F3, r27	; 0x8007f3 <T_servo_ms+0x3>
	configuracion_modo_timer1(FAST_PWM_ICRx);		// Fast PWM con ICR1 como TOP
     8c0:	8e e0       	ldi	r24, 0x0E	; 14
     8c2:	0e 94 aa 07 	call	0xf54	; 0xf54 <configuracion_modo_timer1>
	seleccion_prescaler_ms_timer1(T_servo_ms);		// Prescaler de acuerdo al periodo requerido
     8c6:	60 91 f0 07 	lds	r22, 0x07F0	; 0x8007f0 <T_servo_ms>
     8ca:	70 91 f1 07 	lds	r23, 0x07F1	; 0x8007f1 <T_servo_ms+0x1>
     8ce:	80 91 f2 07 	lds	r24, 0x07F2	; 0x8007f2 <T_servo_ms+0x2>
     8d2:	90 91 f3 07 	lds	r25, 0x07F3	; 0x8007f3 <T_servo_ms+0x3>
     8d6:	0e 94 a2 08 	call	0x1144	; 0x1144 <seleccion_prescaler_ms_timer1>
	set_ICR1_TOP(T_servo_ms);						// Configuracion de ICR1
     8da:	60 91 f0 07 	lds	r22, 0x07F0	; 0x8007f0 <T_servo_ms>
     8de:	70 91 f1 07 	lds	r23, 0x07F1	; 0x8007f1 <T_servo_ms+0x1>
     8e2:	80 91 f2 07 	lds	r24, 0x07F2	; 0x8007f2 <T_servo_ms+0x2>
     8e6:	90 91 f3 07 	lds	r25, 0x07F3	; 0x8007f3 <T_servo_ms+0x3>
     8ea:	0e 94 90 09 	call	0x1320	; 0x1320 <set_ICR1_TOP>
	configuracion_modoSalidas_timer1(Clear, Clear);	// Salida OC1A en Clear, OC1B en Clear
     8ee:	62 e0       	ldi	r22, 0x02	; 2
     8f0:	82 e0       	ldi	r24, 0x02	; 2
     8f2:	0e 94 14 09 	call	0x1228	; 0x1228 <configuracion_modoSalidas_timer1>
     8f6:	08 95       	ret

000008f8 <set_degrees_TC1>:
}

void set_degrees_TC1(float degreesA, float degreesB){
     8f8:	4f 92       	push	r4
     8fa:	5f 92       	push	r5
     8fc:	6f 92       	push	r6
     8fe:	7f 92       	push	r7
     900:	8f 92       	push	r8
     902:	9f 92       	push	r9
     904:	af 92       	push	r10
     906:	bf 92       	push	r11
     908:	cf 92       	push	r12
     90a:	df 92       	push	r13
     90c:	ef 92       	push	r14
     90e:	ff 92       	push	r15
     910:	2b 01       	movw	r4, r22
     912:	3c 01       	movw	r6, r24
     914:	49 01       	movw	r8, r18
     916:	5a 01       	movw	r10, r20
	float dutycicleB = -1.0;
	// Segun pruebas manuales (difiere ligeramente del datasheet)
	// -90ï¿½ --> 0.7ms
	// +90ï¿½ --> 2.4ms
	// Ecuacion de la recta dados dos puntos
	if(degreesA >= min_degree && degreesA <= max_degree)	dutycicleA = (1.7/180.0)*(degreesA + 90.0) + 0.7;
     918:	c0 90 e9 07 	lds	r12, 0x07E9	; 0x8007e9 <min_degree>
     91c:	d0 90 ea 07 	lds	r13, 0x07EA	; 0x8007ea <min_degree+0x1>
     920:	e0 90 eb 07 	lds	r14, 0x07EB	; 0x8007eb <min_degree+0x2>
     924:	f0 90 ec 07 	lds	r15, 0x07EC	; 0x8007ec <min_degree+0x3>
     928:	9b 01       	movw	r18, r22
     92a:	ac 01       	movw	r20, r24
     92c:	c7 01       	movw	r24, r14
     92e:	b6 01       	movw	r22, r12
     930:	0e 94 1a 12 	call	0x2434	; 0x2434 <__cmpsf2>
     934:	18 16       	cp	r1, r24
     936:	2c f1       	brlt	.+74     	; 0x982 <__stack+0x83>
     938:	20 91 f8 07 	lds	r18, 0x07F8	; 0x8007f8 <max_degree>
     93c:	30 91 f9 07 	lds	r19, 0x07F9	; 0x8007f9 <max_degree+0x1>
     940:	40 91 fa 07 	lds	r20, 0x07FA	; 0x8007fa <max_degree+0x2>
     944:	50 91 fb 07 	lds	r21, 0x07FB	; 0x8007fb <max_degree+0x3>
     948:	c3 01       	movw	r24, r6
     94a:	b2 01       	movw	r22, r4
     94c:	0e 94 1a 12 	call	0x2434	; 0x2434 <__cmpsf2>
     950:	18 16       	cp	r1, r24
     952:	04 f1       	brlt	.+64     	; 0x994 <__stack+0x95>
     954:	20 e0       	ldi	r18, 0x00	; 0
     956:	30 e0       	ldi	r19, 0x00	; 0
     958:	44 eb       	ldi	r20, 0xB4	; 180
     95a:	52 e4       	ldi	r21, 0x42	; 66
     95c:	c3 01       	movw	r24, r6
     95e:	b2 01       	movw	r22, r4
     960:	0e 94 ae 11 	call	0x235c	; 0x235c <__addsf3>
     964:	2f ed       	ldi	r18, 0xDF	; 223
     966:	3c eb       	ldi	r19, 0xBC	; 188
     968:	4a e1       	ldi	r20, 0x1A	; 26
     96a:	5c e3       	ldi	r21, 0x3C	; 60
     96c:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__mulsf3>
     970:	23 e3       	ldi	r18, 0x33	; 51
     972:	33 e3       	ldi	r19, 0x33	; 51
     974:	43 e3       	ldi	r20, 0x33	; 51
     976:	5f e3       	ldi	r21, 0x3F	; 63
     978:	0e 94 ae 11 	call	0x235c	; 0x235c <__addsf3>
     97c:	2b 01       	movw	r4, r22
     97e:	3c 01       	movw	r6, r24
     980:	11 c0       	rjmp	.+34     	; 0x9a4 <__stack+0xa5>
	set_ICR1_TOP(T_servo_ms);						// Configuracion de ICR1
	configuracion_modoSalidas_timer1(Clear, Clear);	// Salida OC1A en Clear, OC1B en Clear
}

void set_degrees_TC1(float degreesA, float degreesB){
	float dutycicleA = -1.0;
     982:	0f 2e       	mov	r0, r31
     984:	41 2c       	mov	r4, r1
     986:	51 2c       	mov	r5, r1
     988:	f0 e8       	ldi	r31, 0x80	; 128
     98a:	6f 2e       	mov	r6, r31
     98c:	ff eb       	ldi	r31, 0xBF	; 191
     98e:	7f 2e       	mov	r7, r31
     990:	f0 2d       	mov	r31, r0
     992:	08 c0       	rjmp	.+16     	; 0x9a4 <__stack+0xa5>
     994:	0f 2e       	mov	r0, r31
     996:	41 2c       	mov	r4, r1
     998:	51 2c       	mov	r5, r1
     99a:	f0 e8       	ldi	r31, 0x80	; 128
     99c:	6f 2e       	mov	r6, r31
     99e:	ff eb       	ldi	r31, 0xBF	; 191
     9a0:	7f 2e       	mov	r7, r31
     9a2:	f0 2d       	mov	r31, r0
	// Segun pruebas manuales (difiere ligeramente del datasheet)
	// -90ï¿½ --> 0.7ms
	// +90ï¿½ --> 2.4ms
	// Ecuacion de la recta dados dos puntos
	if(degreesA >= min_degree && degreesA <= max_degree)	dutycicleA = (1.7/180.0)*(degreesA + 90.0) + 0.7;
	if(degreesB >= min_degree && degreesB <= max_degree)	dutycicleB = (1.7/180.0)*(degreesB + 90.0) + 0.7;
     9a4:	a5 01       	movw	r20, r10
     9a6:	94 01       	movw	r18, r8
     9a8:	c7 01       	movw	r24, r14
     9aa:	b6 01       	movw	r22, r12
     9ac:	0e 94 1a 12 	call	0x2434	; 0x2434 <__cmpsf2>
     9b0:	18 16       	cp	r1, r24
     9b2:	2c f1       	brlt	.+74     	; 0x9fe <__stack+0xff>
     9b4:	20 91 f8 07 	lds	r18, 0x07F8	; 0x8007f8 <max_degree>
     9b8:	30 91 f9 07 	lds	r19, 0x07F9	; 0x8007f9 <max_degree+0x1>
     9bc:	40 91 fa 07 	lds	r20, 0x07FA	; 0x8007fa <max_degree+0x2>
     9c0:	50 91 fb 07 	lds	r21, 0x07FB	; 0x8007fb <max_degree+0x3>
     9c4:	c5 01       	movw	r24, r10
     9c6:	b4 01       	movw	r22, r8
     9c8:	0e 94 1a 12 	call	0x2434	; 0x2434 <__cmpsf2>
     9cc:	18 16       	cp	r1, r24
     9ce:	e4 f0       	brlt	.+56     	; 0xa08 <__stack+0x109>
     9d0:	20 e0       	ldi	r18, 0x00	; 0
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	44 eb       	ldi	r20, 0xB4	; 180
     9d6:	52 e4       	ldi	r21, 0x42	; 66
     9d8:	c5 01       	movw	r24, r10
     9da:	b4 01       	movw	r22, r8
     9dc:	0e 94 ae 11 	call	0x235c	; 0x235c <__addsf3>
     9e0:	2f ed       	ldi	r18, 0xDF	; 223
     9e2:	3c eb       	ldi	r19, 0xBC	; 188
     9e4:	4a e1       	ldi	r20, 0x1A	; 26
     9e6:	5c e3       	ldi	r21, 0x3C	; 60
     9e8:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__mulsf3>
     9ec:	23 e3       	ldi	r18, 0x33	; 51
     9ee:	33 e3       	ldi	r19, 0x33	; 51
     9f0:	43 e3       	ldi	r20, 0x33	; 51
     9f2:	5f e3       	ldi	r21, 0x3F	; 63
     9f4:	0e 94 ae 11 	call	0x235c	; 0x235c <__addsf3>
     9f8:	9b 01       	movw	r18, r22
     9fa:	ac 01       	movw	r20, r24
     9fc:	09 c0       	rjmp	.+18     	; 0xa10 <__stack+0x111>
	configuracion_modoSalidas_timer1(Clear, Clear);	// Salida OC1A en Clear, OC1B en Clear
}

void set_degrees_TC1(float degreesA, float degreesB){
	float dutycicleA = -1.0;
	float dutycicleB = -1.0;
     9fe:	20 e0       	ldi	r18, 0x00	; 0
     a00:	30 e0       	ldi	r19, 0x00	; 0
     a02:	40 e8       	ldi	r20, 0x80	; 128
     a04:	5f eb       	ldi	r21, 0xBF	; 191
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__stack+0x111>
     a08:	20 e0       	ldi	r18, 0x00	; 0
     a0a:	30 e0       	ldi	r19, 0x00	; 0
     a0c:	40 e8       	ldi	r20, 0x80	; 128
     a0e:	5f eb       	ldi	r21, 0xBF	; 191
	// +90ï¿½ --> 2.4ms
	// Ecuacion de la recta dados dos puntos
	if(degreesA >= min_degree && degreesA <= max_degree)	dutycicleA = (1.7/180.0)*(degreesA + 90.0) + 0.7;
	if(degreesB >= min_degree && degreesB <= max_degree)	dutycicleB = (1.7/180.0)*(degreesB + 90.0) + 0.7;
		
	set_dutycicle_ms_TC1(dutycicleA, dutycicleB);
     a10:	c3 01       	movw	r24, r6
     a12:	b2 01       	movw	r22, r4
     a14:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <set_dutycicle_ms_TC1>
}
     a18:	ff 90       	pop	r15
     a1a:	ef 90       	pop	r14
     a1c:	df 90       	pop	r13
     a1e:	cf 90       	pop	r12
     a20:	bf 90       	pop	r11
     a22:	af 90       	pop	r10
     a24:	9f 90       	pop	r9
     a26:	8f 90       	pop	r8
     a28:	7f 90       	pop	r7
     a2a:	6f 90       	pop	r6
     a2c:	5f 90       	pop	r5
     a2e:	4f 90       	pop	r4
     a30:	08 95       	ret

00000a32 <get_degrees_TC1>:

void get_degrees_TC1(uint8_t F1, uint8_t F2){
	printf("Funcion get_degrees_TC1 no desarrollada\r\n");
     a32:	8c e8       	ldi	r24, 0x8C	; 140
     a34:	91 e0       	ldi	r25, 0x01	; 1
     a36:	0e 94 6e 14 	call	0x28dc	; 0x28dc <puts>
     a3a:	08 95       	ret

00000a3c <set_TC2_for_servomotors>:
}

// ======================= TIMER 2 =============================
void set_TC2_for_servomotors(){
	T_servo_ms = 16;									// [ms] periodo del PWM para controlar los servomotores
     a3c:	80 e0       	ldi	r24, 0x00	; 0
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	a0 e8       	ldi	r26, 0x80	; 128
     a42:	b1 e4       	ldi	r27, 0x41	; 65
     a44:	80 93 f0 07 	sts	0x07F0, r24	; 0x8007f0 <T_servo_ms>
     a48:	90 93 f1 07 	sts	0x07F1, r25	; 0x8007f1 <T_servo_ms+0x1>
     a4c:	a0 93 f2 07 	sts	0x07F2, r26	; 0x8007f2 <T_servo_ms+0x2>
     a50:	b0 93 f3 07 	sts	0x07F3, r27	; 0x8007f3 <T_servo_ms+0x3>
	configuracion_modo_timer2(FAST_PWM_8b);				// Fast PWM con 0xFF (255) como TOP
     a54:	83 e0       	ldi	r24, 0x03	; 3
     a56:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <configuracion_modo_timer2>
	seleccion_prescaler_ms_timer2(T_servo_ms);			// Prescaler de acuerdo al periodo requerido
     a5a:	60 91 f0 07 	lds	r22, 0x07F0	; 0x8007f0 <T_servo_ms>
     a5e:	70 91 f1 07 	lds	r23, 0x07F1	; 0x8007f1 <T_servo_ms+0x1>
     a62:	80 91 f2 07 	lds	r24, 0x07F2	; 0x8007f2 <T_servo_ms+0x2>
     a66:	90 91 f3 07 	lds	r25, 0x07F3	; 0x8007f3 <T_servo_ms+0x3>
     a6a:	0e 94 0b 0b 	call	0x1616	; 0x1616 <seleccion_prescaler_ms_timer2>
	configuracion_modoSalidas_timer2(Clear, Disconnected);		// Salida OC2A en Clear, OC2B en Off
     a6e:	60 e0       	ldi	r22, 0x00	; 0
     a70:	82 e0       	ldi	r24, 0x02	; 2
     a72:	0e 94 9f 0b 	call	0x173e	; 0x173e <configuracion_modoSalidas_timer2>
     a76:	08 95       	ret

00000a78 <set_degrees_TC2>:
}



void set_degrees_TC2(float degreesA, float degreesB){
     a78:	4f 92       	push	r4
     a7a:	5f 92       	push	r5
     a7c:	6f 92       	push	r6
     a7e:	7f 92       	push	r7
     a80:	8f 92       	push	r8
     a82:	9f 92       	push	r9
     a84:	af 92       	push	r10
     a86:	bf 92       	push	r11
     a88:	cf 92       	push	r12
     a8a:	df 92       	push	r13
     a8c:	ef 92       	push	r14
     a8e:	ff 92       	push	r15
     a90:	2b 01       	movw	r4, r22
     a92:	3c 01       	movw	r6, r24
     a94:	49 01       	movw	r8, r18
     a96:	5a 01       	movw	r10, r20
	float dutycicleB = -1.0;
	// Segun pruebas manuales (difiere ligeramente del datasheet)
	// -90ï¿½ --> 0.7ms
	// +90ï¿½ --> 2.4ms
	// Ecuacion de la recta dados dos puntos
	if(degreesA >= min_degree && degreesA <= max_degree)	dutycicleA = (1.7/180.0)*(degreesA + 90.0) + 0.7;
     a98:	c0 90 e9 07 	lds	r12, 0x07E9	; 0x8007e9 <min_degree>
     a9c:	d0 90 ea 07 	lds	r13, 0x07EA	; 0x8007ea <min_degree+0x1>
     aa0:	e0 90 eb 07 	lds	r14, 0x07EB	; 0x8007eb <min_degree+0x2>
     aa4:	f0 90 ec 07 	lds	r15, 0x07EC	; 0x8007ec <min_degree+0x3>
     aa8:	9b 01       	movw	r18, r22
     aaa:	ac 01       	movw	r20, r24
     aac:	c7 01       	movw	r24, r14
     aae:	b6 01       	movw	r22, r12
     ab0:	0e 94 1a 12 	call	0x2434	; 0x2434 <__cmpsf2>
     ab4:	18 16       	cp	r1, r24
     ab6:	2c f1       	brlt	.+74     	; 0xb02 <set_degrees_TC2+0x8a>
     ab8:	20 91 f8 07 	lds	r18, 0x07F8	; 0x8007f8 <max_degree>
     abc:	30 91 f9 07 	lds	r19, 0x07F9	; 0x8007f9 <max_degree+0x1>
     ac0:	40 91 fa 07 	lds	r20, 0x07FA	; 0x8007fa <max_degree+0x2>
     ac4:	50 91 fb 07 	lds	r21, 0x07FB	; 0x8007fb <max_degree+0x3>
     ac8:	c3 01       	movw	r24, r6
     aca:	b2 01       	movw	r22, r4
     acc:	0e 94 1a 12 	call	0x2434	; 0x2434 <__cmpsf2>
     ad0:	18 16       	cp	r1, r24
     ad2:	04 f1       	brlt	.+64     	; 0xb14 <set_degrees_TC2+0x9c>
     ad4:	20 e0       	ldi	r18, 0x00	; 0
     ad6:	30 e0       	ldi	r19, 0x00	; 0
     ad8:	44 eb       	ldi	r20, 0xB4	; 180
     ada:	52 e4       	ldi	r21, 0x42	; 66
     adc:	c3 01       	movw	r24, r6
     ade:	b2 01       	movw	r22, r4
     ae0:	0e 94 ae 11 	call	0x235c	; 0x235c <__addsf3>
     ae4:	2f ed       	ldi	r18, 0xDF	; 223
     ae6:	3c eb       	ldi	r19, 0xBC	; 188
     ae8:	4a e1       	ldi	r20, 0x1A	; 26
     aea:	5c e3       	ldi	r21, 0x3C	; 60
     aec:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__mulsf3>
     af0:	23 e3       	ldi	r18, 0x33	; 51
     af2:	33 e3       	ldi	r19, 0x33	; 51
     af4:	43 e3       	ldi	r20, 0x33	; 51
     af6:	5f e3       	ldi	r21, 0x3F	; 63
     af8:	0e 94 ae 11 	call	0x235c	; 0x235c <__addsf3>
     afc:	2b 01       	movw	r4, r22
     afe:	3c 01       	movw	r6, r24
     b00:	11 c0       	rjmp	.+34     	; 0xb24 <set_degrees_TC2+0xac>
}



void set_degrees_TC2(float degreesA, float degreesB){
	float dutycicleA = -1.0;
     b02:	0f 2e       	mov	r0, r31
     b04:	41 2c       	mov	r4, r1
     b06:	51 2c       	mov	r5, r1
     b08:	f0 e8       	ldi	r31, 0x80	; 128
     b0a:	6f 2e       	mov	r6, r31
     b0c:	ff eb       	ldi	r31, 0xBF	; 191
     b0e:	7f 2e       	mov	r7, r31
     b10:	f0 2d       	mov	r31, r0
     b12:	08 c0       	rjmp	.+16     	; 0xb24 <set_degrees_TC2+0xac>
     b14:	0f 2e       	mov	r0, r31
     b16:	41 2c       	mov	r4, r1
     b18:	51 2c       	mov	r5, r1
     b1a:	f0 e8       	ldi	r31, 0x80	; 128
     b1c:	6f 2e       	mov	r6, r31
     b1e:	ff eb       	ldi	r31, 0xBF	; 191
     b20:	7f 2e       	mov	r7, r31
     b22:	f0 2d       	mov	r31, r0
	// Segun pruebas manuales (difiere ligeramente del datasheet)
	// -90ï¿½ --> 0.7ms
	// +90ï¿½ --> 2.4ms
	// Ecuacion de la recta dados dos puntos
	if(degreesA >= min_degree && degreesA <= max_degree)	dutycicleA = (1.7/180.0)*(degreesA + 90.0) + 0.7;
	if(degreesB >= min_degree && degreesB <= max_degree)	dutycicleB = (1.7/180.0)*(degreesB + 90.0) + 0.7;
     b24:	a5 01       	movw	r20, r10
     b26:	94 01       	movw	r18, r8
     b28:	c7 01       	movw	r24, r14
     b2a:	b6 01       	movw	r22, r12
     b2c:	0e 94 1a 12 	call	0x2434	; 0x2434 <__cmpsf2>
     b30:	18 16       	cp	r1, r24
     b32:	2c f1       	brlt	.+74     	; 0xb7e <set_degrees_TC2+0x106>
     b34:	20 91 f8 07 	lds	r18, 0x07F8	; 0x8007f8 <max_degree>
     b38:	30 91 f9 07 	lds	r19, 0x07F9	; 0x8007f9 <max_degree+0x1>
     b3c:	40 91 fa 07 	lds	r20, 0x07FA	; 0x8007fa <max_degree+0x2>
     b40:	50 91 fb 07 	lds	r21, 0x07FB	; 0x8007fb <max_degree+0x3>
     b44:	c5 01       	movw	r24, r10
     b46:	b4 01       	movw	r22, r8
     b48:	0e 94 1a 12 	call	0x2434	; 0x2434 <__cmpsf2>
     b4c:	18 16       	cp	r1, r24
     b4e:	e4 f0       	brlt	.+56     	; 0xb88 <set_degrees_TC2+0x110>
     b50:	20 e0       	ldi	r18, 0x00	; 0
     b52:	30 e0       	ldi	r19, 0x00	; 0
     b54:	44 eb       	ldi	r20, 0xB4	; 180
     b56:	52 e4       	ldi	r21, 0x42	; 66
     b58:	c5 01       	movw	r24, r10
     b5a:	b4 01       	movw	r22, r8
     b5c:	0e 94 ae 11 	call	0x235c	; 0x235c <__addsf3>
     b60:	2f ed       	ldi	r18, 0xDF	; 223
     b62:	3c eb       	ldi	r19, 0xBC	; 188
     b64:	4a e1       	ldi	r20, 0x1A	; 26
     b66:	5c e3       	ldi	r21, 0x3C	; 60
     b68:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__mulsf3>
     b6c:	23 e3       	ldi	r18, 0x33	; 51
     b6e:	33 e3       	ldi	r19, 0x33	; 51
     b70:	43 e3       	ldi	r20, 0x33	; 51
     b72:	5f e3       	ldi	r21, 0x3F	; 63
     b74:	0e 94 ae 11 	call	0x235c	; 0x235c <__addsf3>
     b78:	9b 01       	movw	r18, r22
     b7a:	ac 01       	movw	r20, r24
     b7c:	09 c0       	rjmp	.+18     	; 0xb90 <set_degrees_TC2+0x118>



void set_degrees_TC2(float degreesA, float degreesB){
	float dutycicleA = -1.0;
	float dutycicleB = -1.0;
     b7e:	20 e0       	ldi	r18, 0x00	; 0
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	40 e8       	ldi	r20, 0x80	; 128
     b84:	5f eb       	ldi	r21, 0xBF	; 191
     b86:	04 c0       	rjmp	.+8      	; 0xb90 <set_degrees_TC2+0x118>
     b88:	20 e0       	ldi	r18, 0x00	; 0
     b8a:	30 e0       	ldi	r19, 0x00	; 0
     b8c:	40 e8       	ldi	r20, 0x80	; 128
     b8e:	5f eb       	ldi	r21, 0xBF	; 191
	// +90ï¿½ --> 2.4ms
	// Ecuacion de la recta dados dos puntos
	if(degreesA >= min_degree && degreesA <= max_degree)	dutycicleA = (1.7/180.0)*(degreesA + 90.0) + 0.7;
	if(degreesB >= min_degree && degreesB <= max_degree)	dutycicleB = (1.7/180.0)*(degreesB + 90.0) + 0.7;
	
	set_dutycicle_ms_TC2(dutycicleA, dutycicleB);
     b90:	c3 01       	movw	r24, r6
     b92:	b2 01       	movw	r22, r4
     b94:	0e 94 27 0c 	call	0x184e	; 0x184e <set_dutycicle_ms_TC2>
}
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	df 90       	pop	r13
     b9e:	cf 90       	pop	r12
     ba0:	bf 90       	pop	r11
     ba2:	af 90       	pop	r10
     ba4:	9f 90       	pop	r9
     ba6:	8f 90       	pop	r8
     ba8:	7f 90       	pop	r7
     baa:	6f 90       	pop	r6
     bac:	5f 90       	pop	r5
     bae:	4f 90       	pop	r4
     bb0:	08 95       	ret

00000bb2 <get_degrees_TC2>:

void get_degrees_TC2(uint8_t F1, uint8_t F2){
	printf("Funcion get_degrees_TC2 no desarrollada\r\n");
     bb2:	85 eb       	ldi	r24, 0xB5	; 181
     bb4:	91 e0       	ldi	r25, 0x01	; 1
     bb6:	0e 94 6e 14 	call	0x28dc	; 0x28dc <puts>
     bba:	08 95       	ret

00000bbc <configuracion_modo_timer0>:
		TIMSK2 |= (1<<OCIE2B);	// habilita la interrupcion
	}
	// Overflow
	if(overflow){
		TIFR2  |= (1<<TOV2);	// apaga el flag (se apagan con 1)
		TIMSK2 |= (1<<TOIE2);	// habilita la interrupcion
     bbc:	cf 93       	push	r28
     bbe:	c8 2f       	mov	r28, r24
     bc0:	1f 92       	push	r1
     bc2:	8f 93       	push	r24
     bc4:	8f ee       	ldi	r24, 0xEF	; 239
     bc6:	91 e0       	ldi	r25, 0x01	; 1
     bc8:	9f 93       	push	r25
     bca:	8f 93       	push	r24
     bcc:	0e 94 58 14 	call	0x28b0	; 0x28b0 <printf>
     bd0:	84 b5       	in	r24, 0x24	; 36
     bd2:	8c 7f       	andi	r24, 0xFC	; 252
     bd4:	84 bd       	out	0x24, r24	; 36
     bd6:	85 b5       	in	r24, 0x25	; 37
     bd8:	87 7f       	andi	r24, 0xF7	; 247
     bda:	85 bd       	out	0x25, r24	; 37
     bdc:	0f 90       	pop	r0
     bde:	0f 90       	pop	r0
     be0:	0f 90       	pop	r0
     be2:	0f 90       	pop	r0
     be4:	c2 30       	cpi	r28, 0x02	; 2
     be6:	89 f0       	breq	.+34     	; 0xc0a <configuracion_modo_timer0+0x4e>
     be8:	28 f4       	brcc	.+10     	; 0xbf4 <configuracion_modo_timer0+0x38>
     bea:	cc 23       	and	r28, r28
     bec:	41 f1       	breq	.+80     	; 0xc3e <configuracion_modo_timer0+0x82>
     bee:	c1 30       	cpi	r28, 0x01	; 1
     bf0:	41 f0       	breq	.+16     	; 0xc02 <configuracion_modo_timer0+0x46>
     bf2:	21 c0       	rjmp	.+66     	; 0xc36 <configuracion_modo_timer0+0x7a>
     bf4:	c5 30       	cpi	r28, 0x05	; 5
     bf6:	89 f0       	breq	.+34     	; 0xc1a <configuracion_modo_timer0+0x5e>
     bf8:	c7 30       	cpi	r28, 0x07	; 7
     bfa:	b1 f0       	breq	.+44     	; 0xc28 <configuracion_modo_timer0+0x6c>
     bfc:	c3 30       	cpi	r28, 0x03	; 3
     bfe:	d9 f4       	brne	.+54     	; 0xc36 <configuracion_modo_timer0+0x7a>
     c00:	08 c0       	rjmp	.+16     	; 0xc12 <configuracion_modo_timer0+0x56>
     c02:	84 b5       	in	r24, 0x24	; 36
     c04:	81 60       	ori	r24, 0x01	; 1
     c06:	84 bd       	out	0x24, r24	; 36
     c08:	1a c0       	rjmp	.+52     	; 0xc3e <configuracion_modo_timer0+0x82>
     c0a:	84 b5       	in	r24, 0x24	; 36
     c0c:	82 60       	ori	r24, 0x02	; 2
     c0e:	84 bd       	out	0x24, r24	; 36
     c10:	16 c0       	rjmp	.+44     	; 0xc3e <configuracion_modo_timer0+0x82>
     c12:	84 b5       	in	r24, 0x24	; 36
     c14:	83 60       	ori	r24, 0x03	; 3
     c16:	84 bd       	out	0x24, r24	; 36
     c18:	12 c0       	rjmp	.+36     	; 0xc3e <configuracion_modo_timer0+0x82>
     c1a:	84 b5       	in	r24, 0x24	; 36
     c1c:	81 60       	ori	r24, 0x01	; 1
     c1e:	84 bd       	out	0x24, r24	; 36
     c20:	85 b5       	in	r24, 0x25	; 37
     c22:	88 60       	ori	r24, 0x08	; 8
     c24:	85 bd       	out	0x25, r24	; 37
     c26:	0b c0       	rjmp	.+22     	; 0xc3e <configuracion_modo_timer0+0x82>
     c28:	84 b5       	in	r24, 0x24	; 36
     c2a:	83 60       	ori	r24, 0x03	; 3
     c2c:	84 bd       	out	0x24, r24	; 36
     c2e:	85 b5       	in	r24, 0x25	; 37
     c30:	88 60       	ori	r24, 0x08	; 8
     c32:	85 bd       	out	0x25, r24	; 37
     c34:	04 c0       	rjmp	.+8      	; 0xc3e <configuracion_modo_timer0+0x82>
     c36:	84 e0       	ldi	r24, 0x04	; 4
     c38:	92 e0       	ldi	r25, 0x02	; 2
     c3a:	0e 94 6e 14 	call	0x28dc	; 0x28dc <puts>
     c3e:	cf 91       	pop	r28
     c40:	08 95       	ret

00000c42 <configuracion_prescaler_timer0>:
     c42:	cf 93       	push	r28
     c44:	df 93       	push	r29
     c46:	ec 01       	movw	r28, r24
     c48:	df 93       	push	r29
     c4a:	cf 93       	push	r28
     c4c:	82 e1       	ldi	r24, 0x12	; 18
     c4e:	92 e0       	ldi	r25, 0x02	; 2
     c50:	9f 93       	push	r25
     c52:	8f 93       	push	r24
     c54:	0e 94 58 14 	call	0x28b0	; 0x28b0 <printf>
     c58:	85 b5       	in	r24, 0x25	; 37
     c5a:	88 7f       	andi	r24, 0xF8	; 248
     c5c:	85 bd       	out	0x25, r24	; 37
     c5e:	0f 90       	pop	r0
     c60:	0f 90       	pop	r0
     c62:	0f 90       	pop	r0
     c64:	0f 90       	pop	r0
     c66:	c8 30       	cpi	r28, 0x08	; 8
     c68:	d1 05       	cpc	r29, r1
     c6a:	d9 f0       	breq	.+54     	; 0xca2 <configuracion_prescaler_timer0+0x60>
     c6c:	28 f4       	brcc	.+10     	; 0xc78 <configuracion_prescaler_timer0+0x36>
     c6e:	20 97       	sbiw	r28, 0x00	; 0
     c70:	79 f0       	breq	.+30     	; 0xc90 <configuracion_prescaler_timer0+0x4e>
     c72:	21 97       	sbiw	r28, 0x01	; 1
     c74:	91 f0       	breq	.+36     	; 0xc9a <configuracion_prescaler_timer0+0x58>
     c76:	25 c0       	rjmp	.+74     	; 0xcc2 <configuracion_prescaler_timer0+0x80>
     c78:	c1 15       	cp	r28, r1
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	d8 07       	cpc	r29, r24
     c7e:	c9 f0       	breq	.+50     	; 0xcb2 <configuracion_prescaler_timer0+0x70>
     c80:	c1 15       	cp	r28, r1
     c82:	84 e0       	ldi	r24, 0x04	; 4
     c84:	d8 07       	cpc	r29, r24
     c86:	c9 f0       	breq	.+50     	; 0xcba <configuracion_prescaler_timer0+0x78>
     c88:	c0 34       	cpi	r28, 0x40	; 64
     c8a:	d1 05       	cpc	r29, r1
     c8c:	d1 f4       	brne	.+52     	; 0xcc2 <configuracion_prescaler_timer0+0x80>
     c8e:	0d c0       	rjmp	.+26     	; 0xcaa <configuracion_prescaler_timer0+0x68>
     c90:	82 e2       	ldi	r24, 0x22	; 34
     c92:	92 e0       	ldi	r25, 0x02	; 2
     c94:	0e 94 6e 14 	call	0x28dc	; 0x28dc <puts>
     c98:	18 c0       	rjmp	.+48     	; 0xcca <configuracion_prescaler_timer0+0x88>
     c9a:	85 b5       	in	r24, 0x25	; 37
     c9c:	81 60       	ori	r24, 0x01	; 1
     c9e:	85 bd       	out	0x25, r24	; 37
     ca0:	14 c0       	rjmp	.+40     	; 0xcca <configuracion_prescaler_timer0+0x88>
     ca2:	85 b5       	in	r24, 0x25	; 37
     ca4:	82 60       	ori	r24, 0x02	; 2
     ca6:	85 bd       	out	0x25, r24	; 37
     ca8:	10 c0       	rjmp	.+32     	; 0xcca <configuracion_prescaler_timer0+0x88>
     caa:	85 b5       	in	r24, 0x25	; 37
     cac:	83 60       	ori	r24, 0x03	; 3
     cae:	85 bd       	out	0x25, r24	; 37
     cb0:	0c c0       	rjmp	.+24     	; 0xcca <configuracion_prescaler_timer0+0x88>
     cb2:	85 b5       	in	r24, 0x25	; 37
     cb4:	84 60       	ori	r24, 0x04	; 4
     cb6:	85 bd       	out	0x25, r24	; 37
     cb8:	08 c0       	rjmp	.+16     	; 0xcca <configuracion_prescaler_timer0+0x88>
     cba:	85 b5       	in	r24, 0x25	; 37
     cbc:	85 60       	ori	r24, 0x05	; 5
     cbe:	85 bd       	out	0x25, r24	; 37
     cc0:	04 c0       	rjmp	.+8      	; 0xcca <configuracion_prescaler_timer0+0x88>
     cc2:	8f e2       	ldi	r24, 0x2F	; 47
     cc4:	92 e0       	ldi	r25, 0x02	; 2
     cc6:	0e 94 6e 14 	call	0x28dc	; 0x28dc <puts>
     cca:	df 91       	pop	r29
     ccc:	cf 91       	pop	r28
     cce:	08 95       	ret

00000cd0 <seleccion_prescaler_ms_timer0>:
     cd0:	cf 92       	push	r12
     cd2:	df 92       	push	r13
     cd4:	ef 92       	push	r14
     cd6:	ff 92       	push	r15
     cd8:	10 92 20 08 	sts	0x0820, r1	; 0x800820 <prescaler_TC0+0x1>
     cdc:	10 92 1f 08 	sts	0x081F, r1	; 0x80081f <prescaler_TC0>
     ce0:	20 e0       	ldi	r18, 0x00	; 0
     ce2:	30 e0       	ldi	r19, 0x00	; 0
     ce4:	4a e7       	ldi	r20, 0x7A	; 122
     ce6:	54 e4       	ldi	r21, 0x44	; 68
     ce8:	0e 94 1f 12 	call	0x243e	; 0x243e <__divsf3>
     cec:	6b 01       	movw	r12, r22
     cee:	7c 01       	movw	r14, r24
     cf0:	2d eb       	ldi	r18, 0xBD	; 189
     cf2:	37 e3       	ldi	r19, 0x37	; 55
     cf4:	46 e8       	ldi	r20, 0x86	; 134
     cf6:	57 e3       	ldi	r21, 0x37	; 55
     cf8:	0e 94 1a 12 	call	0x2434	; 0x2434 <__cmpsf2>
     cfc:	18 16       	cp	r1, r24
     cfe:	3c f0       	brlt	.+14     	; 0xd0e <seleccion_prescaler_ms_timer0+0x3e>
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	90 93 20 08 	sts	0x0820, r25	; 0x800820 <prescaler_TC0+0x1>
     d08:	80 93 1f 08 	sts	0x081F, r24	; 0x80081f <prescaler_TC0>
     d0c:	48 c0       	rjmp	.+144    	; 0xd9e <seleccion_prescaler_ms_timer0+0xce>
     d0e:	2d eb       	ldi	r18, 0xBD	; 189
     d10:	37 e3       	ldi	r19, 0x37	; 55
     d12:	46 e0       	ldi	r20, 0x06	; 6
     d14:	59 e3       	ldi	r21, 0x39	; 57
     d16:	c7 01       	movw	r24, r14
     d18:	b6 01       	movw	r22, r12
     d1a:	0e 94 1a 12 	call	0x2434	; 0x2434 <__cmpsf2>
     d1e:	18 16       	cp	r1, r24
     d20:	3c f0       	brlt	.+14     	; 0xd30 <seleccion_prescaler_ms_timer0+0x60>
     d22:	88 e0       	ldi	r24, 0x08	; 8
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	90 93 20 08 	sts	0x0820, r25	; 0x800820 <prescaler_TC0+0x1>
     d2a:	80 93 1f 08 	sts	0x081F, r24	; 0x80081f <prescaler_TC0>
     d2e:	37 c0       	rjmp	.+110    	; 0xd9e <seleccion_prescaler_ms_timer0+0xce>
     d30:	2d eb       	ldi	r18, 0xBD	; 189
     d32:	37 e3       	ldi	r19, 0x37	; 55
     d34:	46 e8       	ldi	r20, 0x86	; 134
     d36:	5a e3       	ldi	r21, 0x3A	; 58
     d38:	c7 01       	movw	r24, r14
     d3a:	b6 01       	movw	r22, r12
     d3c:	0e 94 1a 12 	call	0x2434	; 0x2434 <__cmpsf2>
     d40:	18 16       	cp	r1, r24
     d42:	3c f0       	brlt	.+14     	; 0xd52 <seleccion_prescaler_ms_timer0+0x82>
     d44:	80 e4       	ldi	r24, 0x40	; 64
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	90 93 20 08 	sts	0x0820, r25	; 0x800820 <prescaler_TC0+0x1>
     d4c:	80 93 1f 08 	sts	0x081F, r24	; 0x80081f <prescaler_TC0>
     d50:	26 c0       	rjmp	.+76     	; 0xd9e <seleccion_prescaler_ms_timer0+0xce>
     d52:	2d eb       	ldi	r18, 0xBD	; 189
     d54:	37 e3       	ldi	r19, 0x37	; 55
     d56:	46 e8       	ldi	r20, 0x86	; 134
     d58:	5b e3       	ldi	r21, 0x3B	; 59
     d5a:	c7 01       	movw	r24, r14
     d5c:	b6 01       	movw	r22, r12
     d5e:	0e 94 1a 12 	call	0x2434	; 0x2434 <__cmpsf2>
     d62:	18 16       	cp	r1, r24
     d64:	3c f0       	brlt	.+14     	; 0xd74 <seleccion_prescaler_ms_timer0+0xa4>
     d66:	80 e0       	ldi	r24, 0x00	; 0
     d68:	91 e0       	ldi	r25, 0x01	; 1
     d6a:	90 93 20 08 	sts	0x0820, r25	; 0x800820 <prescaler_TC0+0x1>
     d6e:	80 93 1f 08 	sts	0x081F, r24	; 0x80081f <prescaler_TC0>
     d72:	15 c0       	rjmp	.+42     	; 0xd9e <seleccion_prescaler_ms_timer0+0xce>
     d74:	2d eb       	ldi	r18, 0xBD	; 189
     d76:	37 e3       	ldi	r19, 0x37	; 55
     d78:	46 e8       	ldi	r20, 0x86	; 134
     d7a:	5c e3       	ldi	r21, 0x3C	; 60
     d7c:	c7 01       	movw	r24, r14
     d7e:	b6 01       	movw	r22, r12
     d80:	0e 94 1a 12 	call	0x2434	; 0x2434 <__cmpsf2>
     d84:	18 16       	cp	r1, r24
     d86:	3c f0       	brlt	.+14     	; 0xd96 <seleccion_prescaler_ms_timer0+0xc6>
     d88:	80 e0       	ldi	r24, 0x00	; 0
     d8a:	94 e0       	ldi	r25, 0x04	; 4
     d8c:	90 93 20 08 	sts	0x0820, r25	; 0x800820 <prescaler_TC0+0x1>
     d90:	80 93 1f 08 	sts	0x081F, r24	; 0x80081f <prescaler_TC0>
     d94:	04 c0       	rjmp	.+8      	; 0xd9e <seleccion_prescaler_ms_timer0+0xce>
     d96:	8c e5       	ldi	r24, 0x5C	; 92
     d98:	92 e0       	ldi	r25, 0x02	; 2
     d9a:	0e 94 6e 14 	call	0x28dc	; 0x28dc <puts>
     d9e:	80 91 1f 08 	lds	r24, 0x081F	; 0x80081f <prescaler_TC0>
     da2:	90 91 20 08 	lds	r25, 0x0820	; 0x800820 <prescaler_TC0+0x1>
     da6:	0e 94 21 06 	call	0xc42	; 0xc42 <configuracion_prescaler_timer0>
     daa:	ff 90       	pop	r15
     dac:	ef 90       	pop	r14
     dae:	df 90       	pop	r13
     db0:	cf 90       	pop	r12
     db2:	08 95       	ret

00000db4 <configuracion_modoSalidas_timer0>:
     db4:	cf 93       	push	r28
     db6:	c6 2f       	mov	r28, r22
     db8:	94 b5       	in	r25, 0x24	; 36
     dba:	9f 73       	andi	r25, 0x3F	; 63
     dbc:	94 bd       	out	0x24, r25	; 36
     dbe:	9a b1       	in	r25, 0x0a	; 10
     dc0:	9f 7b       	andi	r25, 0xBF	; 191
     dc2:	9a b9       	out	0x0a, r25	; 10
     dc4:	81 30       	cpi	r24, 0x01	; 1
     dc6:	59 f0       	breq	.+22     	; 0xdde <configuracion_modoSalidas_timer0+0x2a>
     dc8:	28 f0       	brcs	.+10     	; 0xdd4 <configuracion_modoSalidas_timer0+0x20>
     dca:	82 30       	cpi	r24, 0x02	; 2
     dcc:	99 f0       	breq	.+38     	; 0xdf4 <configuracion_modoSalidas_timer0+0x40>
     dce:	83 30       	cpi	r24, 0x03	; 3
     dd0:	e1 f0       	breq	.+56     	; 0xe0a <configuracion_modoSalidas_timer0+0x56>
     dd2:	26 c0       	rjmp	.+76     	; 0xe20 <configuracion_modoSalidas_timer0+0x6c>
     dd4:	80 e7       	ldi	r24, 0x70	; 112
     dd6:	92 e0       	ldi	r25, 0x02	; 2
     dd8:	0e 94 6e 14 	call	0x28dc	; 0x28dc <puts>
     ddc:	25 c0       	rjmp	.+74     	; 0xe28 <configuracion_modoSalidas_timer0+0x74>
     dde:	8a e7       	ldi	r24, 0x7A	; 122
     de0:	92 e0       	ldi	r25, 0x02	; 2
     de2:	0e 94 6e 14 	call	0x28dc	; 0x28dc <puts>
     de6:	8a b1       	in	r24, 0x0a	; 10
     de8:	80 64       	ori	r24, 0x40	; 64
     dea:	8a b9       	out	0x0a, r24	; 10
     dec:	84 b5       	in	r24, 0x24	; 36
     dee:	80 64       	ori	r24, 0x40	; 64
     df0:	84 bd       	out	0x24, r24	; 36
     df2:	1a c0       	rjmp	.+52     	; 0xe28 <configuracion_modoSalidas_timer0+0x74>
     df4:	87 e8       	ldi	r24, 0x87	; 135
     df6:	92 e0       	ldi	r25, 0x02	; 2
     df8:	0e 94 6e 14 	call	0x28dc	; 0x28dc <puts>
     dfc:	8a b1       	in	r24, 0x0a	; 10
     dfe:	80 64       	ori	r24, 0x40	; 64
     e00:	8a b9       	out	0x0a, r24	; 10
     e02:	84 b5       	in	r24, 0x24	; 36
     e04:	80 68       	ori	r24, 0x80	; 128
     e06:	84 bd       	out	0x24, r24	; 36
     e08:	0f c0       	rjmp	.+30     	; 0xe28 <configuracion_modoSalidas_timer0+0x74>
     e0a:	83 e9       	ldi	r24, 0x93	; 147
     e0c:	92 e0       	ldi	r25, 0x02	; 2
     e0e:	0e 94 6e 14 	call	0x28dc	; 0x28dc <puts>
     e12:	8a b1       	in	r24, 0x0a	; 10
     e14:	80 64       	ori	r24, 0x40	; 64
     e16:	8a b9       	out	0x0a, r24	; 10
     e18:	84 b5       	in	r24, 0x24	; 36
     e1a:	80 6c       	ori	r24, 0xC0	; 192
     e1c:	84 bd       	out	0x24, r24	; 36
     e1e:	04 c0       	rjmp	.+8      	; 0xe28 <configuracion_modoSalidas_timer0+0x74>
     e20:	8d e9       	ldi	r24, 0x9D	; 157
     e22:	92 e0       	ldi	r25, 0x02	; 2
     e24:	0e 94 6e 14 	call	0x28dc	; 0x28dc <puts>
     e28:	c1 30       	cpi	r28, 0x01	; 1
     e2a:	59 f0       	breq	.+22     	; 0xe42 <configuracion_modoSalidas_timer0+0x8e>
     e2c:	28 f0       	brcs	.+10     	; 0xe38 <configuracion_modoSalidas_timer0+0x84>
     e2e:	c2 30       	cpi	r28, 0x02	; 2
     e30:	99 f0       	breq	.+38     	; 0xe58 <configuracion_modoSalidas_timer0+0xa4>
     e32:	c3 30       	cpi	r28, 0x03	; 3
     e34:	e1 f0       	breq	.+56     	; 0xe6e <configuracion_modoSalidas_timer0+0xba>
     e36:	26 c0       	rjmp	.+76     	; 0xe84 <configuracion_modoSalidas_timer0+0xd0>
     e38:	8b eb       	ldi	r24, 0xBB	; 187
     e3a:	92 e0       	ldi	r25, 0x02	; 2
     e3c:	0e 94 6e 14 	call	0x28dc	; 0x28dc <puts>
     e40:	25 c0       	rjmp	.+74     	; 0xe8c <configuracion_modoSalidas_timer0+0xd8>
     e42:	87 ec       	ldi	r24, 0xC7	; 199
     e44:	92 e0       	ldi	r25, 0x02	; 2
     e46:	0e 94 6e 14 	call	0x28dc	; 0x28dc <puts>
     e4a:	8a b1       	in	r24, 0x0a	; 10
     e4c:	80 62       	ori	r24, 0x20	; 32
     e4e:	8a b9       	out	0x0a, r24	; 10
     e50:	84 b5       	in	r24, 0x24	; 36
     e52:	80 61       	ori	r24, 0x10	; 16
     e54:	84 bd       	out	0x24, r24	; 36
     e56:	1a c0       	rjmp	.+52     	; 0xe8c <configuracion_modoSalidas_timer0+0xd8>
     e58:	86 ed       	ldi	r24, 0xD6	; 214
     e5a:	92 e0       	ldi	r25, 0x02	; 2
     e5c:	0e 94 6e 14 	call	0x28dc	; 0x28dc <puts>
     e60:	8a b1       	in	r24, 0x0a	; 10
     e62:	80 62       	ori	r24, 0x20	; 32
     e64:	8a b9       	out	0x0a, r24	; 10
     e66:	84 b5       	in	r24, 0x24	; 36
     e68:	80 62       	ori	r24, 0x20	; 32
     e6a:	84 bd       	out	0x24, r24	; 36
     e6c:	0f c0       	rjmp	.+30     	; 0xe8c <configuracion_modoSalidas_timer0+0xd8>
     e6e:	84 ee       	ldi	r24, 0xE4	; 228
     e70:	92 e0       	ldi	r25, 0x02	; 2
     e72:	0e 94 6e 14 	call	0x28dc	; 0x28dc <puts>
     e76:	8a b1       	in	r24, 0x0a	; 10
     e78:	80 62       	ori	r24, 0x20	; 32
     e7a:	8a b9       	out	0x0a, r24	; 10
     e7c:	84 b5       	in	r24, 0x24	; 36
     e7e:	80 63       	ori	r24, 0x30	; 48
     e80:	84 bd       	out	0x24, r24	; 36
     e82:	04 c0       	rjmp	.+8      	; 0xe8c <configuracion_modoSalidas_timer0+0xd8>
     e84:	80 ef       	ldi	r24, 0xF0	; 240
     e86:	92 e0       	ldi	r25, 0x02	; 2
     e88:	0e 94 6e 14 	call	0x28dc	; 0x28dc <puts>
     e8c:	cf 91       	pop	r28
     e8e:	08 95       	ret

00000e90 <set_OCR0>:
     e90:	8f 3f       	cpi	r24, 0xFF	; 255
     e92:	09 f0       	breq	.+2      	; 0xe96 <set_OCR0+0x6>
     e94:	87 bd       	out	0x27, r24	; 39
     e96:	6f 3f       	cpi	r22, 0xFF	; 255
     e98:	09 f0       	breq	.+2      	; 0xe9c <set_OCR0+0xc>
     e9a:	68 bd       	out	0x28, r22	; 40
     e9c:	08 95       	ret

00000e9e <set_dutycicle_ms_TC0>:
     e9e:	8f 92       	push	r8
     ea0:	9f 92       	push	r9
     ea2:	af 92       	push	r10
     ea4:	bf 92       	push	r11
     ea6:	cf 92       	push	r12
     ea8:	df 92       	push	r13
     eaa:	ef 92       	push	r14
     eac:	ff 92       	push	r15
     eae:	cf 93       	push	r28
     eb0:	4b 01       	movw	r8, r22
     eb2:	5c 01       	movw	r10, r24
     eb4:	69 01       	movw	r12, r18
     eb6:	7a 01       	movw	r14, r20
     eb8:	20 e0       	ldi	r18, 0x00	; 0
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	a9 01       	movw	r20, r18
     ebe:	0e 94 1a 12 	call	0x2434	; 0x2434 <__cmpsf2>
     ec2:	88 23       	and	r24, r24
     ec4:	c4 f0       	brlt	.+48     	; 0xef6 <set_dutycicle_ms_TC0+0x58>
     ec6:	20 e0       	ldi	r18, 0x00	; 0
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	40 e8       	ldi	r20, 0x80	; 128
     ecc:	5f e3       	ldi	r21, 0x3F	; 63
     ece:	c5 01       	movw	r24, r10
     ed0:	b4 01       	movw	r22, r8
     ed2:	0e 94 ad 11 	call	0x235a	; 0x235a <__subsf3>
     ed6:	20 e0       	ldi	r18, 0x00	; 0
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	48 e8       	ldi	r20, 0x88	; 136
     edc:	51 e4       	ldi	r21, 0x41	; 65
     ede:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__mulsf3>
     ee2:	20 e0       	ldi	r18, 0x00	; 0
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	40 e6       	ldi	r20, 0x60	; 96
     ee8:	51 e4       	ldi	r21, 0x41	; 65
     eea:	0e 94 ae 11 	call	0x235c	; 0x235c <__addsf3>
     eee:	0e 94 98 12 	call	0x2530	; 0x2530 <__fixunssfsi>
     ef2:	c6 2f       	mov	r28, r22
     ef4:	01 c0       	rjmp	.+2      	; 0xef8 <set_dutycicle_ms_TC0+0x5a>
     ef6:	cf ef       	ldi	r28, 0xFF	; 255
     ef8:	20 e0       	ldi	r18, 0x00	; 0
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	a9 01       	movw	r20, r18
     efe:	c7 01       	movw	r24, r14
     f00:	b6 01       	movw	r22, r12
     f02:	0e 94 1a 12 	call	0x2434	; 0x2434 <__cmpsf2>
     f06:	88 23       	and	r24, r24
     f08:	bc f0       	brlt	.+46     	; 0xf38 <set_dutycicle_ms_TC0+0x9a>
     f0a:	20 e0       	ldi	r18, 0x00	; 0
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	40 e8       	ldi	r20, 0x80	; 128
     f10:	5f e3       	ldi	r21, 0x3F	; 63
     f12:	c7 01       	movw	r24, r14
     f14:	b6 01       	movw	r22, r12
     f16:	0e 94 ad 11 	call	0x235a	; 0x235a <__subsf3>
     f1a:	20 e0       	ldi	r18, 0x00	; 0
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	48 e8       	ldi	r20, 0x88	; 136
     f20:	51 e4       	ldi	r21, 0x41	; 65
     f22:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__mulsf3>
     f26:	20 e0       	ldi	r18, 0x00	; 0
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	40 e6       	ldi	r20, 0x60	; 96
     f2c:	51 e4       	ldi	r21, 0x41	; 65
     f2e:	0e 94 ae 11 	call	0x235c	; 0x235c <__addsf3>
     f32:	0e 94 98 12 	call	0x2530	; 0x2530 <__fixunssfsi>
     f36:	01 c0       	rjmp	.+2      	; 0xf3a <set_dutycicle_ms_TC0+0x9c>
     f38:	6f ef       	ldi	r22, 0xFF	; 255
     f3a:	8c 2f       	mov	r24, r28
     f3c:	0e 94 48 07 	call	0xe90	; 0xe90 <set_OCR0>
     f40:	cf 91       	pop	r28
     f42:	ff 90       	pop	r15
     f44:	ef 90       	pop	r14
     f46:	df 90       	pop	r13
     f48:	cf 90       	pop	r12
     f4a:	bf 90       	pop	r11
     f4c:	af 90       	pop	r10
     f4e:	9f 90       	pop	r9
     f50:	8f 90       	pop	r8
     f52:	08 95       	ret

00000f54 <configuracion_modo_timer1>:
     f54:	cf 93       	push	r28
     f56:	c8 2f       	mov	r28, r24
     f58:	1f 92       	push	r1
     f5a:	8f 93       	push	r24
     f5c:	80 e1       	ldi	r24, 0x10	; 16
     f5e:	93 e0       	ldi	r25, 0x03	; 3
     f60:	9f 93       	push	r25
     f62:	8f 93       	push	r24
     f64:	0e 94 58 14 	call	0x28b0	; 0x28b0 <printf>
     f68:	e0 e8       	ldi	r30, 0x80	; 128
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	8c 7f       	andi	r24, 0xFC	; 252
     f70:	80 83       	st	Z, r24
     f72:	e1 e8       	ldi	r30, 0x81	; 129
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	87 7e       	andi	r24, 0xE7	; 231
     f7a:	80 83       	st	Z, r24
     f7c:	0f 90       	pop	r0
     f7e:	0f 90       	pop	r0
     f80:	0f 90       	pop	r0
     f82:	0f 90       	pop	r0
     f84:	8c 2f       	mov	r24, r28
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	80 31       	cpi	r24, 0x10	; 16
     f8a:	91 05       	cpc	r25, r1
     f8c:	08 f0       	brcs	.+2      	; 0xf90 <configuracion_modo_timer1+0x3c>
     f8e:	81 c0       	rjmp	.+258    	; 0x1092 <configuracion_modo_timer1+0x13e>
     f90:	fc 01       	movw	r30, r24
     f92:	ec 5c       	subi	r30, 0xCC	; 204
     f94:	ff 4f       	sbci	r31, 0xFF	; 255
     f96:	0c 94 2c 14 	jmp	0x2858	; 0x2858 <__tablejump2__>
     f9a:	e0 e8       	ldi	r30, 0x80	; 128
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	81 60       	ori	r24, 0x01	; 1
     fa2:	80 83       	st	Z, r24
     fa4:	7a c0       	rjmp	.+244    	; 0x109a <configuracion_modo_timer1+0x146>
     fa6:	e0 e8       	ldi	r30, 0x80	; 128
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	82 60       	ori	r24, 0x02	; 2
     fae:	80 83       	st	Z, r24
     fb0:	74 c0       	rjmp	.+232    	; 0x109a <configuracion_modo_timer1+0x146>
     fb2:	e0 e8       	ldi	r30, 0x80	; 128
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	83 60       	ori	r24, 0x03	; 3
     fba:	80 83       	st	Z, r24
     fbc:	6e c0       	rjmp	.+220    	; 0x109a <configuracion_modo_timer1+0x146>
     fbe:	e1 e8       	ldi	r30, 0x81	; 129
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	88 60       	ori	r24, 0x08	; 8
     fc6:	80 83       	st	Z, r24
     fc8:	68 c0       	rjmp	.+208    	; 0x109a <configuracion_modo_timer1+0x146>
     fca:	e0 e8       	ldi	r30, 0x80	; 128
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	81 60       	ori	r24, 0x01	; 1
     fd2:	80 83       	st	Z, r24
     fd4:	e1 e8       	ldi	r30, 0x81	; 129
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	88 60       	ori	r24, 0x08	; 8
     fdc:	80 83       	st	Z, r24
     fde:	5d c0       	rjmp	.+186    	; 0x109a <configuracion_modo_timer1+0x146>
     fe0:	e0 e8       	ldi	r30, 0x80	; 128
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	82 60       	ori	r24, 0x02	; 2
     fe8:	80 83       	st	Z, r24
     fea:	e1 e8       	ldi	r30, 0x81	; 129
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	88 60       	ori	r24, 0x08	; 8
     ff2:	80 83       	st	Z, r24
     ff4:	52 c0       	rjmp	.+164    	; 0x109a <configuracion_modo_timer1+0x146>
     ff6:	e0 e8       	ldi	r30, 0x80	; 128
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	83 60       	ori	r24, 0x03	; 3
     ffe:	80 83       	st	Z, r24
    1000:	e1 e8       	ldi	r30, 0x81	; 129
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	88 60       	ori	r24, 0x08	; 8
    1008:	80 83       	st	Z, r24
    100a:	47 c0       	rjmp	.+142    	; 0x109a <configuracion_modo_timer1+0x146>
    100c:	e1 e8       	ldi	r30, 0x81	; 129
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	80 61       	ori	r24, 0x10	; 16
    1014:	80 83       	st	Z, r24
    1016:	41 c0       	rjmp	.+130    	; 0x109a <configuracion_modo_timer1+0x146>
    1018:	e0 e8       	ldi	r30, 0x80	; 128
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	81 60       	ori	r24, 0x01	; 1
    1020:	80 83       	st	Z, r24
    1022:	e1 e8       	ldi	r30, 0x81	; 129
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	80 81       	ld	r24, Z
    1028:	80 61       	ori	r24, 0x10	; 16
    102a:	80 83       	st	Z, r24
    102c:	36 c0       	rjmp	.+108    	; 0x109a <configuracion_modo_timer1+0x146>
    102e:	e0 e8       	ldi	r30, 0x80	; 128
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	82 60       	ori	r24, 0x02	; 2
    1036:	80 83       	st	Z, r24
    1038:	e1 e8       	ldi	r30, 0x81	; 129
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	80 61       	ori	r24, 0x10	; 16
    1040:	80 83       	st	Z, r24
    1042:	2b c0       	rjmp	.+86     	; 0x109a <configuracion_modo_timer1+0x146>
    1044:	e0 e8       	ldi	r30, 0x80	; 128
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	83 60       	ori	r24, 0x03	; 3
    104c:	80 83       	st	Z, r24
    104e:	e1 e8       	ldi	r30, 0x81	; 129
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	80 61       	ori	r24, 0x10	; 16
    1056:	80 83       	st	Z, r24
    1058:	20 c0       	rjmp	.+64     	; 0x109a <configuracion_modo_timer1+0x146>
    105a:	e1 e8       	ldi	r30, 0x81	; 129
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	88 61       	ori	r24, 0x18	; 24
    1062:	80 83       	st	Z, r24
    1064:	1a c0       	rjmp	.+52     	; 0x109a <configuracion_modo_timer1+0x146>
    1066:	e0 e8       	ldi	r30, 0x80	; 128
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	82 60       	ori	r24, 0x02	; 2
    106e:	80 83       	st	Z, r24
    1070:	e1 e8       	ldi	r30, 0x81	; 129
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	88 61       	ori	r24, 0x18	; 24
    1078:	80 83       	st	Z, r24
    107a:	0f c0       	rjmp	.+30     	; 0x109a <configuracion_modo_timer1+0x146>
    107c:	e0 e8       	ldi	r30, 0x80	; 128
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	83 60       	ori	r24, 0x03	; 3
    1084:	80 83       	st	Z, r24
    1086:	e1 e8       	ldi	r30, 0x81	; 129
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	88 61       	ori	r24, 0x18	; 24
    108e:	80 83       	st	Z, r24
    1090:	04 c0       	rjmp	.+8      	; 0x109a <configuracion_modo_timer1+0x146>
    1092:	84 e0       	ldi	r24, 0x04	; 4
    1094:	92 e0       	ldi	r25, 0x02	; 2
    1096:	0e 94 6e 14 	call	0x28dc	; 0x28dc <puts>
    109a:	cf 91       	pop	r28
    109c:	08 95       	ret

0000109e <configuracion_prescaler_timer1>:
    109e:	cf 93       	push	r28
    10a0:	df 93       	push	r29
    10a2:	ec 01       	movw	r28, r24
    10a4:	df 93       	push	r29
    10a6:	cf 93       	push	r28
    10a8:	82 e1       	ldi	r24, 0x12	; 18
    10aa:	92 e0       	ldi	r25, 0x02	; 2
    10ac:	9f 93       	push	r25
    10ae:	8f 93       	push	r24
    10b0:	0e 94 58 14 	call	0x28b0	; 0x28b0 <printf>
    10b4:	e1 e8       	ldi	r30, 0x81	; 129
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	80 81       	ld	r24, Z
    10ba:	88 7f       	andi	r24, 0xF8	; 248
    10bc:	80 83       	st	Z, r24
    10be:	0f 90       	pop	r0
    10c0:	0f 90       	pop	r0
    10c2:	0f 90       	pop	r0
    10c4:	0f 90       	pop	r0
    10c6:	c8 30       	cpi	r28, 0x08	; 8
    10c8:	d1 05       	cpc	r29, r1
    10ca:	e9 f0       	breq	.+58     	; 0x1106 <configuracion_prescaler_timer1+0x68>
    10cc:	28 f4       	brcc	.+10     	; 0x10d8 <configuracion_prescaler_timer1+0x3a>
    10ce:	20 97       	sbiw	r28, 0x00	; 0
    10d0:	79 f0       	breq	.+30     	; 0x10f0 <configuracion_prescaler_timer1+0x52>
    10d2:	21 97       	sbiw	r28, 0x01	; 1
    10d4:	91 f0       	breq	.+36     	; 0x10fa <configuracion_prescaler_timer1+0x5c>
    10d6:	2f c0       	rjmp	.+94     	; 0x1136 <configuracion_prescaler_timer1+0x98>
    10d8:	c1 15       	cp	r28, r1
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	d8 07       	cpc	r29, r24
    10de:	f9 f0       	breq	.+62     	; 0x111e <configuracion_prescaler_timer1+0x80>
    10e0:	c1 15       	cp	r28, r1
    10e2:	84 e0       	ldi	r24, 0x04	; 4
    10e4:	d8 07       	cpc	r29, r24
    10e6:	09 f1       	breq	.+66     	; 0x112a <configuracion_prescaler_timer1+0x8c>
    10e8:	c0 34       	cpi	r28, 0x40	; 64
    10ea:	d1 05       	cpc	r29, r1
    10ec:	21 f5       	brne	.+72     	; 0x1136 <configuracion_prescaler_timer1+0x98>
    10ee:	11 c0       	rjmp	.+34     	; 0x1112 <configuracion_prescaler_timer1+0x74>
    10f0:	85 e2       	ldi	r24, 0x25	; 37
    10f2:	93 e0       	ldi	r25, 0x03	; 3
    10f4:	0e 94 6e 14 	call	0x28dc	; 0x28dc <puts>
    10f8:	22 c0       	rjmp	.+68     	; 0x113e <configuracion_prescaler_timer1+0xa0>
    10fa:	e1 e8       	ldi	r30, 0x81	; 129
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	81 60       	ori	r24, 0x01	; 1
    1102:	80 83       	st	Z, r24
    1104:	1c c0       	rjmp	.+56     	; 0x113e <configuracion_prescaler_timer1+0xa0>
    1106:	e1 e8       	ldi	r30, 0x81	; 129
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	82 60       	ori	r24, 0x02	; 2
    110e:	80 83       	st	Z, r24
    1110:	16 c0       	rjmp	.+44     	; 0x113e <configuracion_prescaler_timer1+0xa0>
    1112:	e1 e8       	ldi	r30, 0x81	; 129
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	83 60       	ori	r24, 0x03	; 3
    111a:	80 83       	st	Z, r24
    111c:	10 c0       	rjmp	.+32     	; 0x113e <configuracion_prescaler_timer1+0xa0>
    111e:	e1 e8       	ldi	r30, 0x81	; 129
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	84 60       	ori	r24, 0x04	; 4
    1126:	80 83       	st	Z, r24
    1128:	0a c0       	rjmp	.+20     	; 0x113e <configuracion_prescaler_timer1+0xa0>
    112a:	e1 e8       	ldi	r30, 0x81	; 129
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 81       	ld	r24, Z
    1130:	85 60       	ori	r24, 0x05	; 5
    1132:	80 83       	st	Z, r24
    1134:	04 c0       	rjmp	.+8      	; 0x113e <configuracion_prescaler_timer1+0xa0>
    1136:	82 e3       	ldi	r24, 0x32	; 50
    1138:	93 e0       	ldi	r25, 0x03	; 3
    113a:	0e 94 6e 14 	call	0x28dc	; 0x28dc <puts>
    113e:	df 91       	pop	r29
    1140:	cf 91       	pop	r28
    1142:	08 95       	ret

00001144 <seleccion_prescaler_ms_timer1>:
    1144:	cf 92       	push	r12
    1146:	df 92       	push	r13
    1148:	ef 92       	push	r14
    114a:	ff 92       	push	r15
    114c:	10 92 e8 07 	sts	0x07E8, r1	; 0x8007e8 <prescaler_TC1+0x1>
    1150:	10 92 e7 07 	sts	0x07E7, r1	; 0x8007e7 <prescaler_TC1>
    1154:	20 e0       	ldi	r18, 0x00	; 0
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	4a e7       	ldi	r20, 0x7A	; 122
    115a:	54 e4       	ldi	r21, 0x44	; 68
    115c:	0e 94 1f 12 	call	0x243e	; 0x243e <__divsf3>
    1160:	6b 01       	movw	r12, r22
    1162:	7c 01       	movw	r14, r24
    1164:	2d eb       	ldi	r18, 0xBD	; 189
    1166:	37 e3       	ldi	r19, 0x37	; 55
    1168:	46 e8       	ldi	r20, 0x86	; 134
    116a:	5b e3       	ldi	r21, 0x3B	; 59
    116c:	0e 94 1a 12 	call	0x2434	; 0x2434 <__cmpsf2>
    1170:	18 16       	cp	r1, r24
    1172:	3c f0       	brlt	.+14     	; 0x1182 <seleccion_prescaler_ms_timer1+0x3e>
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	90 93 e8 07 	sts	0x07E8, r25	; 0x8007e8 <prescaler_TC1+0x1>
    117c:	80 93 e7 07 	sts	0x07E7, r24	; 0x8007e7 <prescaler_TC1>
    1180:	48 c0       	rjmp	.+144    	; 0x1212 <seleccion_prescaler_ms_timer1+0xce>
    1182:	2d eb       	ldi	r18, 0xBD	; 189
    1184:	37 e3       	ldi	r19, 0x37	; 55
    1186:	46 e0       	ldi	r20, 0x06	; 6
    1188:	5d e3       	ldi	r21, 0x3D	; 61
    118a:	c7 01       	movw	r24, r14
    118c:	b6 01       	movw	r22, r12
    118e:	0e 94 1a 12 	call	0x2434	; 0x2434 <__cmpsf2>
    1192:	18 16       	cp	r1, r24
    1194:	3c f0       	brlt	.+14     	; 0x11a4 <seleccion_prescaler_ms_timer1+0x60>
    1196:	88 e0       	ldi	r24, 0x08	; 8
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	90 93 e8 07 	sts	0x07E8, r25	; 0x8007e8 <prescaler_TC1+0x1>
    119e:	80 93 e7 07 	sts	0x07E7, r24	; 0x8007e7 <prescaler_TC1>
    11a2:	37 c0       	rjmp	.+110    	; 0x1212 <seleccion_prescaler_ms_timer1+0xce>
    11a4:	2d eb       	ldi	r18, 0xBD	; 189
    11a6:	37 e3       	ldi	r19, 0x37	; 55
    11a8:	46 e8       	ldi	r20, 0x86	; 134
    11aa:	5e e3       	ldi	r21, 0x3E	; 62
    11ac:	c7 01       	movw	r24, r14
    11ae:	b6 01       	movw	r22, r12
    11b0:	0e 94 1a 12 	call	0x2434	; 0x2434 <__cmpsf2>
    11b4:	18 16       	cp	r1, r24
    11b6:	3c f0       	brlt	.+14     	; 0x11c6 <seleccion_prescaler_ms_timer1+0x82>
    11b8:	80 e4       	ldi	r24, 0x40	; 64
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	90 93 e8 07 	sts	0x07E8, r25	; 0x8007e8 <prescaler_TC1+0x1>
    11c0:	80 93 e7 07 	sts	0x07E7, r24	; 0x8007e7 <prescaler_TC1>
    11c4:	26 c0       	rjmp	.+76     	; 0x1212 <seleccion_prescaler_ms_timer1+0xce>
    11c6:	2d eb       	ldi	r18, 0xBD	; 189
    11c8:	37 e3       	ldi	r19, 0x37	; 55
    11ca:	46 e8       	ldi	r20, 0x86	; 134
    11cc:	5f e3       	ldi	r21, 0x3F	; 63
    11ce:	c7 01       	movw	r24, r14
    11d0:	b6 01       	movw	r22, r12
    11d2:	0e 94 1a 12 	call	0x2434	; 0x2434 <__cmpsf2>
    11d6:	18 16       	cp	r1, r24
    11d8:	3c f0       	brlt	.+14     	; 0x11e8 <seleccion_prescaler_ms_timer1+0xa4>
    11da:	80 e0       	ldi	r24, 0x00	; 0
    11dc:	91 e0       	ldi	r25, 0x01	; 1
    11de:	90 93 e8 07 	sts	0x07E8, r25	; 0x8007e8 <prescaler_TC1+0x1>
    11e2:	80 93 e7 07 	sts	0x07E7, r24	; 0x8007e7 <prescaler_TC1>
    11e6:	15 c0       	rjmp	.+42     	; 0x1212 <seleccion_prescaler_ms_timer1+0xce>
    11e8:	2d eb       	ldi	r18, 0xBD	; 189
    11ea:	37 e3       	ldi	r19, 0x37	; 55
    11ec:	46 e8       	ldi	r20, 0x86	; 134
    11ee:	50 e4       	ldi	r21, 0x40	; 64
    11f0:	c7 01       	movw	r24, r14
    11f2:	b6 01       	movw	r22, r12
    11f4:	0e 94 1a 12 	call	0x2434	; 0x2434 <__cmpsf2>
    11f8:	18 16       	cp	r1, r24
    11fa:	3c f0       	brlt	.+14     	; 0x120a <seleccion_prescaler_ms_timer1+0xc6>
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	94 e0       	ldi	r25, 0x04	; 4
    1200:	90 93 e8 07 	sts	0x07E8, r25	; 0x8007e8 <prescaler_TC1+0x1>
    1204:	80 93 e7 07 	sts	0x07E7, r24	; 0x8007e7 <prescaler_TC1>
    1208:	04 c0       	rjmp	.+8      	; 0x1212 <seleccion_prescaler_ms_timer1+0xce>
    120a:	8c e5       	ldi	r24, 0x5C	; 92
    120c:	92 e0       	ldi	r25, 0x02	; 2
    120e:	0e 94 6e 14 	call	0x28dc	; 0x28dc <puts>
    1212:	80 91 e7 07 	lds	r24, 0x07E7	; 0x8007e7 <prescaler_TC1>
    1216:	90 91 e8 07 	lds	r25, 0x07E8	; 0x8007e8 <prescaler_TC1+0x1>
    121a:	0e 94 4f 08 	call	0x109e	; 0x109e <configuracion_prescaler_timer1>
    121e:	ff 90       	pop	r15
    1220:	ef 90       	pop	r14
    1222:	df 90       	pop	r13
    1224:	cf 90       	pop	r12
    1226:	08 95       	ret

00001228 <configuracion_modoSalidas_timer1>:
    1228:	cf 93       	push	r28
    122a:	c6 2f       	mov	r28, r22
    122c:	e0 e8       	ldi	r30, 0x80	; 128
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	90 81       	ld	r25, Z
    1232:	9f 73       	andi	r25, 0x3F	; 63
    1234:	90 83       	st	Z, r25
    1236:	94 b1       	in	r25, 0x04	; 4
    1238:	9d 7f       	andi	r25, 0xFD	; 253
    123a:	94 b9       	out	0x04, r25	; 4
    123c:	81 30       	cpi	r24, 0x01	; 1
    123e:	59 f0       	breq	.+22     	; 0x1256 <configuracion_modoSalidas_timer1+0x2e>
    1240:	28 f0       	brcs	.+10     	; 0x124c <configuracion_modoSalidas_timer1+0x24>
    1242:	82 30       	cpi	r24, 0x02	; 2
    1244:	a9 f0       	breq	.+42     	; 0x1270 <configuracion_modoSalidas_timer1+0x48>
    1246:	83 30       	cpi	r24, 0x03	; 3
    1248:	01 f1       	breq	.+64     	; 0x128a <configuracion_modoSalidas_timer1+0x62>
    124a:	2c c0       	rjmp	.+88     	; 0x12a4 <configuracion_modoSalidas_timer1+0x7c>
    124c:	8f e5       	ldi	r24, 0x5F	; 95
    124e:	93 e0       	ldi	r25, 0x03	; 3
    1250:	0e 94 6e 14 	call	0x28dc	; 0x28dc <puts>
    1254:	2b c0       	rjmp	.+86     	; 0x12ac <configuracion_modoSalidas_timer1+0x84>
    1256:	89 e6       	ldi	r24, 0x69	; 105
    1258:	93 e0       	ldi	r25, 0x03	; 3
    125a:	0e 94 6e 14 	call	0x28dc	; 0x28dc <puts>
    125e:	84 b1       	in	r24, 0x04	; 4
    1260:	82 60       	ori	r24, 0x02	; 2
    1262:	84 b9       	out	0x04, r24	; 4
    1264:	e0 e8       	ldi	r30, 0x80	; 128
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	80 64       	ori	r24, 0x40	; 64
    126c:	80 83       	st	Z, r24
    126e:	1e c0       	rjmp	.+60     	; 0x12ac <configuracion_modoSalidas_timer1+0x84>
    1270:	86 e7       	ldi	r24, 0x76	; 118
    1272:	93 e0       	ldi	r25, 0x03	; 3
    1274:	0e 94 6e 14 	call	0x28dc	; 0x28dc <puts>
    1278:	84 b1       	in	r24, 0x04	; 4
    127a:	82 60       	ori	r24, 0x02	; 2
    127c:	84 b9       	out	0x04, r24	; 4
    127e:	e0 e8       	ldi	r30, 0x80	; 128
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	80 81       	ld	r24, Z
    1284:	80 68       	ori	r24, 0x80	; 128
    1286:	80 83       	st	Z, r24
    1288:	11 c0       	rjmp	.+34     	; 0x12ac <configuracion_modoSalidas_timer1+0x84>
    128a:	82 e8       	ldi	r24, 0x82	; 130
    128c:	93 e0       	ldi	r25, 0x03	; 3
    128e:	0e 94 6e 14 	call	0x28dc	; 0x28dc <puts>
    1292:	84 b1       	in	r24, 0x04	; 4
    1294:	82 60       	ori	r24, 0x02	; 2
    1296:	84 b9       	out	0x04, r24	; 4
    1298:	e0 e8       	ldi	r30, 0x80	; 128
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	80 6c       	ori	r24, 0xC0	; 192
    12a0:	80 83       	st	Z, r24
    12a2:	04 c0       	rjmp	.+8      	; 0x12ac <configuracion_modoSalidas_timer1+0x84>
    12a4:	8c e8       	ldi	r24, 0x8C	; 140
    12a6:	93 e0       	ldi	r25, 0x03	; 3
    12a8:	0e 94 6e 14 	call	0x28dc	; 0x28dc <puts>
    12ac:	c1 30       	cpi	r28, 0x01	; 1
    12ae:	59 f0       	breq	.+22     	; 0x12c6 <configuracion_modoSalidas_timer1+0x9e>
    12b0:	28 f0       	brcs	.+10     	; 0x12bc <configuracion_modoSalidas_timer1+0x94>
    12b2:	c2 30       	cpi	r28, 0x02	; 2
    12b4:	a9 f0       	breq	.+42     	; 0x12e0 <configuracion_modoSalidas_timer1+0xb8>
    12b6:	c3 30       	cpi	r28, 0x03	; 3
    12b8:	01 f1       	breq	.+64     	; 0x12fa <configuracion_modoSalidas_timer1+0xd2>
    12ba:	2c c0       	rjmp	.+88     	; 0x1314 <configuracion_modoSalidas_timer1+0xec>
    12bc:	85 ea       	ldi	r24, 0xA5	; 165
    12be:	93 e0       	ldi	r25, 0x03	; 3
    12c0:	0e 94 6e 14 	call	0x28dc	; 0x28dc <puts>
    12c4:	2b c0       	rjmp	.+86     	; 0x131c <configuracion_modoSalidas_timer1+0xf4>
    12c6:	81 eb       	ldi	r24, 0xB1	; 177
    12c8:	93 e0       	ldi	r25, 0x03	; 3
    12ca:	0e 94 6e 14 	call	0x28dc	; 0x28dc <puts>
    12ce:	84 b1       	in	r24, 0x04	; 4
    12d0:	84 60       	ori	r24, 0x04	; 4
    12d2:	84 b9       	out	0x04, r24	; 4
    12d4:	e0 e8       	ldi	r30, 0x80	; 128
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	80 61       	ori	r24, 0x10	; 16
    12dc:	80 83       	st	Z, r24
    12de:	1e c0       	rjmp	.+60     	; 0x131c <configuracion_modoSalidas_timer1+0xf4>
    12e0:	80 ec       	ldi	r24, 0xC0	; 192
    12e2:	93 e0       	ldi	r25, 0x03	; 3
    12e4:	0e 94 6e 14 	call	0x28dc	; 0x28dc <puts>
    12e8:	84 b1       	in	r24, 0x04	; 4
    12ea:	84 60       	ori	r24, 0x04	; 4
    12ec:	84 b9       	out	0x04, r24	; 4
    12ee:	e0 e8       	ldi	r30, 0x80	; 128
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	80 62       	ori	r24, 0x20	; 32
    12f6:	80 83       	st	Z, r24
    12f8:	11 c0       	rjmp	.+34     	; 0x131c <configuracion_modoSalidas_timer1+0xf4>
    12fa:	8e ec       	ldi	r24, 0xCE	; 206
    12fc:	93 e0       	ldi	r25, 0x03	; 3
    12fe:	0e 94 6e 14 	call	0x28dc	; 0x28dc <puts>
    1302:	84 b1       	in	r24, 0x04	; 4
    1304:	84 60       	ori	r24, 0x04	; 4
    1306:	84 b9       	out	0x04, r24	; 4
    1308:	e0 e8       	ldi	r30, 0x80	; 128
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	80 63       	ori	r24, 0x30	; 48
    1310:	80 83       	st	Z, r24
    1312:	04 c0       	rjmp	.+8      	; 0x131c <configuracion_modoSalidas_timer1+0xf4>
    1314:	8a ed       	ldi	r24, 0xDA	; 218
    1316:	93 e0       	ldi	r25, 0x03	; 3
    1318:	0e 94 6e 14 	call	0x28dc	; 0x28dc <puts>
    131c:	cf 91       	pop	r28
    131e:	08 95       	ret

00001320 <set_ICR1_TOP>:
    1320:	cf 92       	push	r12
    1322:	df 92       	push	r13
    1324:	ef 92       	push	r14
    1326:	ff 92       	push	r15
    1328:	20 e0       	ldi	r18, 0x00	; 0
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	4a e7       	ldi	r20, 0x7A	; 122
    132e:	54 e4       	ldi	r21, 0x44	; 68
    1330:	0e 94 1f 12 	call	0x243e	; 0x243e <__divsf3>
    1334:	6b 01       	movw	r12, r22
    1336:	7c 01       	movw	r14, r24
    1338:	20 91 e7 07 	lds	r18, 0x07E7	; 0x8007e7 <prescaler_TC1>
    133c:	30 91 e8 07 	lds	r19, 0x07E8	; 0x8007e8 <prescaler_TC1+0x1>
    1340:	40 e0       	ldi	r20, 0x00	; 0
    1342:	50 e0       	ldi	r21, 0x00	; 0
    1344:	60 e0       	ldi	r22, 0x00	; 0
    1346:	74 e2       	ldi	r23, 0x24	; 36
    1348:	84 ef       	ldi	r24, 0xF4	; 244
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	0e 94 0d 14 	call	0x281a	; 0x281a <__divmodsi4>
    1350:	ca 01       	movw	r24, r20
    1352:	b9 01       	movw	r22, r18
    1354:	0e 94 c9 12 	call	0x2592	; 0x2592 <__floatsisf>
    1358:	a7 01       	movw	r20, r14
    135a:	96 01       	movw	r18, r12
    135c:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__mulsf3>
    1360:	20 e0       	ldi	r18, 0x00	; 0
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	40 e8       	ldi	r20, 0x80	; 128
    1366:	5f e3       	ldi	r21, 0x3F	; 63
    1368:	0e 94 ae 11 	call	0x235c	; 0x235c <__addsf3>
    136c:	0e 94 98 12 	call	0x2530	; 0x2530 <__fixunssfsi>
    1370:	70 93 87 00 	sts	0x0087, r23	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
    1374:	60 93 86 00 	sts	0x0086, r22	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
    1378:	ff 90       	pop	r15
    137a:	ef 90       	pop	r14
    137c:	df 90       	pop	r13
    137e:	cf 90       	pop	r12
    1380:	08 95       	ret

00001382 <set_OCR1>:
    1382:	8f 3f       	cpi	r24, 0xFF	; 255
    1384:	2f ef       	ldi	r18, 0xFF	; 255
    1386:	92 07       	cpc	r25, r18
    1388:	21 f0       	breq	.+8      	; 0x1392 <set_OCR1+0x10>
    138a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    138e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    1392:	6f 3f       	cpi	r22, 0xFF	; 255
    1394:	8f ef       	ldi	r24, 0xFF	; 255
    1396:	78 07       	cpc	r23, r24
    1398:	21 f0       	breq	.+8      	; 0x13a2 <set_OCR1+0x20>
    139a:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    139e:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
    13a2:	08 95       	ret

000013a4 <set_dutycicle_ms_TC1>:
    13a4:	8f 92       	push	r8
    13a6:	9f 92       	push	r9
    13a8:	af 92       	push	r10
    13aa:	bf 92       	push	r11
    13ac:	cf 92       	push	r12
    13ae:	df 92       	push	r13
    13b0:	ef 92       	push	r14
    13b2:	ff 92       	push	r15
    13b4:	cf 93       	push	r28
    13b6:	df 93       	push	r29
    13b8:	4b 01       	movw	r8, r22
    13ba:	5c 01       	movw	r10, r24
    13bc:	69 01       	movw	r12, r18
    13be:	7a 01       	movw	r14, r20
    13c0:	20 e0       	ldi	r18, 0x00	; 0
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	a9 01       	movw	r20, r18
    13c6:	0e 94 1a 12 	call	0x2434	; 0x2434 <__cmpsf2>
    13ca:	88 23       	and	r24, r24
    13cc:	44 f1       	brlt	.+80     	; 0x141e <set_dutycicle_ms_TC1+0x7a>
    13ce:	20 e0       	ldi	r18, 0x00	; 0
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	4a e7       	ldi	r20, 0x7A	; 122
    13d4:	54 e4       	ldi	r21, 0x44	; 68
    13d6:	c5 01       	movw	r24, r10
    13d8:	b4 01       	movw	r22, r8
    13da:	0e 94 1f 12 	call	0x243e	; 0x243e <__divsf3>
    13de:	4b 01       	movw	r8, r22
    13e0:	5c 01       	movw	r10, r24
    13e2:	20 91 e7 07 	lds	r18, 0x07E7	; 0x8007e7 <prescaler_TC1>
    13e6:	30 91 e8 07 	lds	r19, 0x07E8	; 0x8007e8 <prescaler_TC1+0x1>
    13ea:	40 e0       	ldi	r20, 0x00	; 0
    13ec:	50 e0       	ldi	r21, 0x00	; 0
    13ee:	60 e0       	ldi	r22, 0x00	; 0
    13f0:	74 e2       	ldi	r23, 0x24	; 36
    13f2:	84 ef       	ldi	r24, 0xF4	; 244
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	0e 94 0d 14 	call	0x281a	; 0x281a <__divmodsi4>
    13fa:	ca 01       	movw	r24, r20
    13fc:	b9 01       	movw	r22, r18
    13fe:	0e 94 c9 12 	call	0x2592	; 0x2592 <__floatsisf>
    1402:	a5 01       	movw	r20, r10
    1404:	94 01       	movw	r18, r8
    1406:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__mulsf3>
    140a:	20 e0       	ldi	r18, 0x00	; 0
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	40 e8       	ldi	r20, 0x80	; 128
    1410:	5f e3       	ldi	r21, 0x3F	; 63
    1412:	0e 94 ae 11 	call	0x235c	; 0x235c <__addsf3>
    1416:	0e 94 98 12 	call	0x2530	; 0x2530 <__fixunssfsi>
    141a:	eb 01       	movw	r28, r22
    141c:	02 c0       	rjmp	.+4      	; 0x1422 <set_dutycicle_ms_TC1+0x7e>
    141e:	cf ef       	ldi	r28, 0xFF	; 255
    1420:	df ef       	ldi	r29, 0xFF	; 255
    1422:	20 e0       	ldi	r18, 0x00	; 0
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	a9 01       	movw	r20, r18
    1428:	c7 01       	movw	r24, r14
    142a:	b6 01       	movw	r22, r12
    142c:	0e 94 1a 12 	call	0x2434	; 0x2434 <__cmpsf2>
    1430:	88 23       	and	r24, r24
    1432:	3c f1       	brlt	.+78     	; 0x1482 <set_dutycicle_ms_TC1+0xde>
    1434:	20 e0       	ldi	r18, 0x00	; 0
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	4a e7       	ldi	r20, 0x7A	; 122
    143a:	54 e4       	ldi	r21, 0x44	; 68
    143c:	c7 01       	movw	r24, r14
    143e:	b6 01       	movw	r22, r12
    1440:	0e 94 1f 12 	call	0x243e	; 0x243e <__divsf3>
    1444:	6b 01       	movw	r12, r22
    1446:	7c 01       	movw	r14, r24
    1448:	20 91 e7 07 	lds	r18, 0x07E7	; 0x8007e7 <prescaler_TC1>
    144c:	30 91 e8 07 	lds	r19, 0x07E8	; 0x8007e8 <prescaler_TC1+0x1>
    1450:	40 e0       	ldi	r20, 0x00	; 0
    1452:	50 e0       	ldi	r21, 0x00	; 0
    1454:	60 e0       	ldi	r22, 0x00	; 0
    1456:	74 e2       	ldi	r23, 0x24	; 36
    1458:	84 ef       	ldi	r24, 0xF4	; 244
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	0e 94 0d 14 	call	0x281a	; 0x281a <__divmodsi4>
    1460:	ca 01       	movw	r24, r20
    1462:	b9 01       	movw	r22, r18
    1464:	0e 94 c9 12 	call	0x2592	; 0x2592 <__floatsisf>
    1468:	a7 01       	movw	r20, r14
    146a:	96 01       	movw	r18, r12
    146c:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__mulsf3>
    1470:	20 e0       	ldi	r18, 0x00	; 0
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	40 e8       	ldi	r20, 0x80	; 128
    1476:	5f e3       	ldi	r21, 0x3F	; 63
    1478:	0e 94 ae 11 	call	0x235c	; 0x235c <__addsf3>
    147c:	0e 94 98 12 	call	0x2530	; 0x2530 <__fixunssfsi>
    1480:	02 c0       	rjmp	.+4      	; 0x1486 <set_dutycicle_ms_TC1+0xe2>
    1482:	6f ef       	ldi	r22, 0xFF	; 255
    1484:	7f ef       	ldi	r23, 0xFF	; 255
    1486:	ce 01       	movw	r24, r28
    1488:	0e 94 c1 09 	call	0x1382	; 0x1382 <set_OCR1>
    148c:	df 91       	pop	r29
    148e:	cf 91       	pop	r28
    1490:	ff 90       	pop	r15
    1492:	ef 90       	pop	r14
    1494:	df 90       	pop	r13
    1496:	cf 90       	pop	r12
    1498:	bf 90       	pop	r11
    149a:	af 90       	pop	r10
    149c:	9f 90       	pop	r9
    149e:	8f 90       	pop	r8
    14a0:	08 95       	ret

000014a2 <configuracion_modo_timer2>:
    14a2:	cf 93       	push	r28
    14a4:	c8 2f       	mov	r28, r24
    14a6:	1f 92       	push	r1
    14a8:	8f 93       	push	r24
    14aa:	83 ef       	ldi	r24, 0xF3	; 243
    14ac:	93 e0       	ldi	r25, 0x03	; 3
    14ae:	9f 93       	push	r25
    14b0:	8f 93       	push	r24
    14b2:	0e 94 58 14 	call	0x28b0	; 0x28b0 <printf>
    14b6:	e0 eb       	ldi	r30, 0xB0	; 176
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	8c 7f       	andi	r24, 0xFC	; 252
    14be:	80 83       	st	Z, r24
    14c0:	e1 eb       	ldi	r30, 0xB1	; 177
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 81       	ld	r24, Z
    14c6:	87 7f       	andi	r24, 0xF7	; 247
    14c8:	80 83       	st	Z, r24
    14ca:	0f 90       	pop	r0
    14cc:	0f 90       	pop	r0
    14ce:	0f 90       	pop	r0
    14d0:	0f 90       	pop	r0
    14d2:	c2 30       	cpi	r28, 0x02	; 2
    14d4:	99 f0       	breq	.+38     	; 0x14fc <configuracion_modo_timer2+0x5a>
    14d6:	28 f4       	brcc	.+10     	; 0x14e2 <configuracion_modo_timer2+0x40>
    14d8:	cc 23       	and	r28, r28
    14da:	b1 f1       	breq	.+108    	; 0x1548 <configuracion_modo_timer2+0xa6>
    14dc:	c1 30       	cpi	r28, 0x01	; 1
    14de:	41 f0       	breq	.+16     	; 0x14f0 <configuracion_modo_timer2+0x4e>
    14e0:	2f c0       	rjmp	.+94     	; 0x1540 <configuracion_modo_timer2+0x9e>
    14e2:	c5 30       	cpi	r28, 0x05	; 5
    14e4:	b9 f0       	breq	.+46     	; 0x1514 <configuracion_modo_timer2+0x72>
    14e6:	c7 30       	cpi	r28, 0x07	; 7
    14e8:	01 f1       	breq	.+64     	; 0x152a <configuracion_modo_timer2+0x88>
    14ea:	c3 30       	cpi	r28, 0x03	; 3
    14ec:	49 f5       	brne	.+82     	; 0x1540 <configuracion_modo_timer2+0x9e>
    14ee:	0c c0       	rjmp	.+24     	; 0x1508 <configuracion_modo_timer2+0x66>
    14f0:	e0 eb       	ldi	r30, 0xB0	; 176
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	80 81       	ld	r24, Z
    14f6:	81 60       	ori	r24, 0x01	; 1
    14f8:	80 83       	st	Z, r24
    14fa:	26 c0       	rjmp	.+76     	; 0x1548 <configuracion_modo_timer2+0xa6>
    14fc:	e0 eb       	ldi	r30, 0xB0	; 176
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	82 60       	ori	r24, 0x02	; 2
    1504:	80 83       	st	Z, r24
    1506:	20 c0       	rjmp	.+64     	; 0x1548 <configuracion_modo_timer2+0xa6>
    1508:	e0 eb       	ldi	r30, 0xB0	; 176
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	83 60       	ori	r24, 0x03	; 3
    1510:	80 83       	st	Z, r24
    1512:	1a c0       	rjmp	.+52     	; 0x1548 <configuracion_modo_timer2+0xa6>
    1514:	e0 eb       	ldi	r30, 0xB0	; 176
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	80 81       	ld	r24, Z
    151a:	81 60       	ori	r24, 0x01	; 1
    151c:	80 83       	st	Z, r24
    151e:	e1 eb       	ldi	r30, 0xB1	; 177
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	88 60       	ori	r24, 0x08	; 8
    1526:	80 83       	st	Z, r24
    1528:	0f c0       	rjmp	.+30     	; 0x1548 <configuracion_modo_timer2+0xa6>
    152a:	e0 eb       	ldi	r30, 0xB0	; 176
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	80 81       	ld	r24, Z
    1530:	83 60       	ori	r24, 0x03	; 3
    1532:	80 83       	st	Z, r24
    1534:	e1 eb       	ldi	r30, 0xB1	; 177
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 81       	ld	r24, Z
    153a:	88 60       	ori	r24, 0x08	; 8
    153c:	80 83       	st	Z, r24
    153e:	04 c0       	rjmp	.+8      	; 0x1548 <configuracion_modo_timer2+0xa6>
    1540:	84 e0       	ldi	r24, 0x04	; 4
    1542:	92 e0       	ldi	r25, 0x02	; 2
    1544:	0e 94 6e 14 	call	0x28dc	; 0x28dc <puts>
    1548:	cf 91       	pop	r28
    154a:	08 95       	ret

0000154c <configuracion_prescaler_timer2>:
    154c:	cf 93       	push	r28
    154e:	df 93       	push	r29
    1550:	ec 01       	movw	r28, r24
    1552:	df 93       	push	r29
    1554:	cf 93       	push	r28
    1556:	82 e1       	ldi	r24, 0x12	; 18
    1558:	92 e0       	ldi	r25, 0x02	; 2
    155a:	9f 93       	push	r25
    155c:	8f 93       	push	r24
    155e:	0e 94 58 14 	call	0x28b0	; 0x28b0 <printf>
    1562:	e1 eb       	ldi	r30, 0xB1	; 177
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	88 7f       	andi	r24, 0xF8	; 248
    156a:	80 83       	st	Z, r24
    156c:	0f 90       	pop	r0
    156e:	0f 90       	pop	r0
    1570:	0f 90       	pop	r0
    1572:	0f 90       	pop	r0
    1574:	c0 32       	cpi	r28, 0x20	; 32
    1576:	d1 05       	cpc	r29, r1
    1578:	49 f1       	breq	.+82     	; 0x15cc <configuracion_prescaler_timer2+0x80>
    157a:	38 f4       	brcc	.+14     	; 0x158a <configuracion_prescaler_timer2+0x3e>
    157c:	c1 30       	cpi	r28, 0x01	; 1
    157e:	d1 05       	cpc	r29, r1
    1580:	c9 f0       	breq	.+50     	; 0x15b4 <configuracion_prescaler_timer2+0x68>
    1582:	98 f0       	brcs	.+38     	; 0x15aa <configuracion_prescaler_timer2+0x5e>
    1584:	28 97       	sbiw	r28, 0x08	; 8
    1586:	e1 f0       	breq	.+56     	; 0x15c0 <configuracion_prescaler_timer2+0x74>
    1588:	3f c0       	rjmp	.+126    	; 0x1608 <configuracion_prescaler_timer2+0xbc>
    158a:	c0 38       	cpi	r28, 0x80	; 128
    158c:	d1 05       	cpc	r29, r1
    158e:	51 f1       	breq	.+84     	; 0x15e4 <configuracion_prescaler_timer2+0x98>
    1590:	20 f4       	brcc	.+8      	; 0x159a <configuracion_prescaler_timer2+0x4e>
    1592:	c0 34       	cpi	r28, 0x40	; 64
    1594:	d1 05       	cpc	r29, r1
    1596:	01 f1       	breq	.+64     	; 0x15d8 <configuracion_prescaler_timer2+0x8c>
    1598:	37 c0       	rjmp	.+110    	; 0x1608 <configuracion_prescaler_timer2+0xbc>
    159a:	c1 15       	cp	r28, r1
    159c:	81 e0       	ldi	r24, 0x01	; 1
    159e:	d8 07       	cpc	r29, r24
    15a0:	39 f1       	breq	.+78     	; 0x15f0 <configuracion_prescaler_timer2+0xa4>
    15a2:	c1 15       	cp	r28, r1
    15a4:	d4 40       	sbci	r29, 0x04	; 4
    15a6:	51 f1       	breq	.+84     	; 0x15fc <configuracion_prescaler_timer2+0xb0>
    15a8:	2f c0       	rjmp	.+94     	; 0x1608 <configuracion_prescaler_timer2+0xbc>
    15aa:	87 e0       	ldi	r24, 0x07	; 7
    15ac:	94 e0       	ldi	r25, 0x04	; 4
    15ae:	0e 94 6e 14 	call	0x28dc	; 0x28dc <puts>
    15b2:	2e c0       	rjmp	.+92     	; 0x1610 <configuracion_prescaler_timer2+0xc4>
    15b4:	e1 eb       	ldi	r30, 0xB1	; 177
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	80 81       	ld	r24, Z
    15ba:	81 60       	ori	r24, 0x01	; 1
    15bc:	80 83       	st	Z, r24
    15be:	28 c0       	rjmp	.+80     	; 0x1610 <configuracion_prescaler_timer2+0xc4>
    15c0:	e1 eb       	ldi	r30, 0xB1	; 177
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	82 60       	ori	r24, 0x02	; 2
    15c8:	80 83       	st	Z, r24
    15ca:	22 c0       	rjmp	.+68     	; 0x1610 <configuracion_prescaler_timer2+0xc4>
    15cc:	e1 eb       	ldi	r30, 0xB1	; 177
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	83 60       	ori	r24, 0x03	; 3
    15d4:	80 83       	st	Z, r24
    15d6:	1c c0       	rjmp	.+56     	; 0x1610 <configuracion_prescaler_timer2+0xc4>
    15d8:	e1 eb       	ldi	r30, 0xB1	; 177
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 81       	ld	r24, Z
    15de:	84 60       	ori	r24, 0x04	; 4
    15e0:	80 83       	st	Z, r24
    15e2:	16 c0       	rjmp	.+44     	; 0x1610 <configuracion_prescaler_timer2+0xc4>
    15e4:	e1 eb       	ldi	r30, 0xB1	; 177
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	85 60       	ori	r24, 0x05	; 5
    15ec:	80 83       	st	Z, r24
    15ee:	10 c0       	rjmp	.+32     	; 0x1610 <configuracion_prescaler_timer2+0xc4>
    15f0:	e1 eb       	ldi	r30, 0xB1	; 177
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	80 81       	ld	r24, Z
    15f6:	86 60       	ori	r24, 0x06	; 6
    15f8:	80 83       	st	Z, r24
    15fa:	0a c0       	rjmp	.+20     	; 0x1610 <configuracion_prescaler_timer2+0xc4>
    15fc:	e1 eb       	ldi	r30, 0xB1	; 177
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	87 60       	ori	r24, 0x07	; 7
    1604:	80 83       	st	Z, r24
    1606:	04 c0       	rjmp	.+8      	; 0x1610 <configuracion_prescaler_timer2+0xc4>
    1608:	88 e1       	ldi	r24, 0x18	; 24
    160a:	94 e0       	ldi	r25, 0x04	; 4
    160c:	0e 94 6e 14 	call	0x28dc	; 0x28dc <puts>
    1610:	df 91       	pop	r29
    1612:	cf 91       	pop	r28
    1614:	08 95       	ret

00001616 <seleccion_prescaler_ms_timer2>:
    1616:	cf 92       	push	r12
    1618:	df 92       	push	r13
    161a:	ef 92       	push	r14
    161c:	ff 92       	push	r15
    161e:	10 92 ee 07 	sts	0x07EE, r1	; 0x8007ee <prescaler_TC2+0x1>
    1622:	10 92 ed 07 	sts	0x07ED, r1	; 0x8007ed <prescaler_TC2>
    1626:	20 e0       	ldi	r18, 0x00	; 0
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	4a e7       	ldi	r20, 0x7A	; 122
    162c:	54 e4       	ldi	r21, 0x44	; 68
    162e:	0e 94 1f 12 	call	0x243e	; 0x243e <__divsf3>
    1632:	6b 01       	movw	r12, r22
    1634:	7c 01       	movw	r14, r24
    1636:	2d eb       	ldi	r18, 0xBD	; 189
    1638:	37 e3       	ldi	r19, 0x37	; 55
    163a:	46 e8       	ldi	r20, 0x86	; 134
    163c:	57 e3       	ldi	r21, 0x37	; 55
    163e:	0e 94 1a 12 	call	0x2434	; 0x2434 <__cmpsf2>
    1642:	18 16       	cp	r1, r24
    1644:	3c f0       	brlt	.+14     	; 0x1654 <seleccion_prescaler_ms_timer2+0x3e>
    1646:	81 e0       	ldi	r24, 0x01	; 1
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	90 93 ee 07 	sts	0x07EE, r25	; 0x8007ee <prescaler_TC2+0x1>
    164e:	80 93 ed 07 	sts	0x07ED, r24	; 0x8007ed <prescaler_TC2>
    1652:	6a c0       	rjmp	.+212    	; 0x1728 <seleccion_prescaler_ms_timer2+0x112>
    1654:	2d eb       	ldi	r18, 0xBD	; 189
    1656:	37 e3       	ldi	r19, 0x37	; 55
    1658:	46 e0       	ldi	r20, 0x06	; 6
    165a:	59 e3       	ldi	r21, 0x39	; 57
    165c:	c7 01       	movw	r24, r14
    165e:	b6 01       	movw	r22, r12
    1660:	0e 94 1a 12 	call	0x2434	; 0x2434 <__cmpsf2>
    1664:	18 16       	cp	r1, r24
    1666:	3c f0       	brlt	.+14     	; 0x1676 <seleccion_prescaler_ms_timer2+0x60>
    1668:	88 e0       	ldi	r24, 0x08	; 8
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	90 93 ee 07 	sts	0x07EE, r25	; 0x8007ee <prescaler_TC2+0x1>
    1670:	80 93 ed 07 	sts	0x07ED, r24	; 0x8007ed <prescaler_TC2>
    1674:	59 c0       	rjmp	.+178    	; 0x1728 <seleccion_prescaler_ms_timer2+0x112>
    1676:	2d eb       	ldi	r18, 0xBD	; 189
    1678:	37 e3       	ldi	r19, 0x37	; 55
    167a:	46 e0       	ldi	r20, 0x06	; 6
    167c:	5a e3       	ldi	r21, 0x3A	; 58
    167e:	c7 01       	movw	r24, r14
    1680:	b6 01       	movw	r22, r12
    1682:	0e 94 1a 12 	call	0x2434	; 0x2434 <__cmpsf2>
    1686:	18 16       	cp	r1, r24
    1688:	3c f0       	brlt	.+14     	; 0x1698 <seleccion_prescaler_ms_timer2+0x82>
    168a:	80 e2       	ldi	r24, 0x20	; 32
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	90 93 ee 07 	sts	0x07EE, r25	; 0x8007ee <prescaler_TC2+0x1>
    1692:	80 93 ed 07 	sts	0x07ED, r24	; 0x8007ed <prescaler_TC2>
    1696:	48 c0       	rjmp	.+144    	; 0x1728 <seleccion_prescaler_ms_timer2+0x112>
    1698:	2d eb       	ldi	r18, 0xBD	; 189
    169a:	37 e3       	ldi	r19, 0x37	; 55
    169c:	46 e8       	ldi	r20, 0x86	; 134
    169e:	5a e3       	ldi	r21, 0x3A	; 58
    16a0:	c7 01       	movw	r24, r14
    16a2:	b6 01       	movw	r22, r12
    16a4:	0e 94 1a 12 	call	0x2434	; 0x2434 <__cmpsf2>
    16a8:	18 16       	cp	r1, r24
    16aa:	3c f0       	brlt	.+14     	; 0x16ba <seleccion_prescaler_ms_timer2+0xa4>
    16ac:	80 e4       	ldi	r24, 0x40	; 64
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	90 93 ee 07 	sts	0x07EE, r25	; 0x8007ee <prescaler_TC2+0x1>
    16b4:	80 93 ed 07 	sts	0x07ED, r24	; 0x8007ed <prescaler_TC2>
    16b8:	37 c0       	rjmp	.+110    	; 0x1728 <seleccion_prescaler_ms_timer2+0x112>
    16ba:	2d eb       	ldi	r18, 0xBD	; 189
    16bc:	37 e3       	ldi	r19, 0x37	; 55
    16be:	46 e0       	ldi	r20, 0x06	; 6
    16c0:	5b e3       	ldi	r21, 0x3B	; 59
    16c2:	c7 01       	movw	r24, r14
    16c4:	b6 01       	movw	r22, r12
    16c6:	0e 94 1a 12 	call	0x2434	; 0x2434 <__cmpsf2>
    16ca:	18 16       	cp	r1, r24
    16cc:	3c f0       	brlt	.+14     	; 0x16dc <seleccion_prescaler_ms_timer2+0xc6>
    16ce:	80 e8       	ldi	r24, 0x80	; 128
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	90 93 ee 07 	sts	0x07EE, r25	; 0x8007ee <prescaler_TC2+0x1>
    16d6:	80 93 ed 07 	sts	0x07ED, r24	; 0x8007ed <prescaler_TC2>
    16da:	26 c0       	rjmp	.+76     	; 0x1728 <seleccion_prescaler_ms_timer2+0x112>
    16dc:	2d eb       	ldi	r18, 0xBD	; 189
    16de:	37 e3       	ldi	r19, 0x37	; 55
    16e0:	46 e8       	ldi	r20, 0x86	; 134
    16e2:	5b e3       	ldi	r21, 0x3B	; 59
    16e4:	c7 01       	movw	r24, r14
    16e6:	b6 01       	movw	r22, r12
    16e8:	0e 94 1a 12 	call	0x2434	; 0x2434 <__cmpsf2>
    16ec:	18 16       	cp	r1, r24
    16ee:	3c f0       	brlt	.+14     	; 0x16fe <seleccion_prescaler_ms_timer2+0xe8>
    16f0:	80 e0       	ldi	r24, 0x00	; 0
    16f2:	91 e0       	ldi	r25, 0x01	; 1
    16f4:	90 93 ee 07 	sts	0x07EE, r25	; 0x8007ee <prescaler_TC2+0x1>
    16f8:	80 93 ed 07 	sts	0x07ED, r24	; 0x8007ed <prescaler_TC2>
    16fc:	15 c0       	rjmp	.+42     	; 0x1728 <seleccion_prescaler_ms_timer2+0x112>
    16fe:	2d eb       	ldi	r18, 0xBD	; 189
    1700:	37 e3       	ldi	r19, 0x37	; 55
    1702:	46 e8       	ldi	r20, 0x86	; 134
    1704:	5c e3       	ldi	r21, 0x3C	; 60
    1706:	c7 01       	movw	r24, r14
    1708:	b6 01       	movw	r22, r12
    170a:	0e 94 1a 12 	call	0x2434	; 0x2434 <__cmpsf2>
    170e:	18 16       	cp	r1, r24
    1710:	3c f0       	brlt	.+14     	; 0x1720 <seleccion_prescaler_ms_timer2+0x10a>
    1712:	80 e0       	ldi	r24, 0x00	; 0
    1714:	94 e0       	ldi	r25, 0x04	; 4
    1716:	90 93 ee 07 	sts	0x07EE, r25	; 0x8007ee <prescaler_TC2+0x1>
    171a:	80 93 ed 07 	sts	0x07ED, r24	; 0x8007ed <prescaler_TC2>
    171e:	04 c0       	rjmp	.+8      	; 0x1728 <seleccion_prescaler_ms_timer2+0x112>
    1720:	8c e5       	ldi	r24, 0x5C	; 92
    1722:	92 e0       	ldi	r25, 0x02	; 2
    1724:	0e 94 6e 14 	call	0x28dc	; 0x28dc <puts>
    1728:	80 91 ed 07 	lds	r24, 0x07ED	; 0x8007ed <prescaler_TC2>
    172c:	90 91 ee 07 	lds	r25, 0x07EE	; 0x8007ee <prescaler_TC2+0x1>
    1730:	0e 94 a6 0a 	call	0x154c	; 0x154c <configuracion_prescaler_timer2>
    1734:	ff 90       	pop	r15
    1736:	ef 90       	pop	r14
    1738:	df 90       	pop	r13
    173a:	cf 90       	pop	r12
    173c:	08 95       	ret

0000173e <configuracion_modoSalidas_timer2>:
    173e:	cf 93       	push	r28
    1740:	c6 2f       	mov	r28, r22
    1742:	e0 eb       	ldi	r30, 0xB0	; 176
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	90 81       	ld	r25, Z
    1748:	9f 73       	andi	r25, 0x3F	; 63
    174a:	90 83       	st	Z, r25
    174c:	94 b1       	in	r25, 0x04	; 4
    174e:	97 7f       	andi	r25, 0xF7	; 247
    1750:	94 b9       	out	0x04, r25	; 4
    1752:	9a b1       	in	r25, 0x0a	; 10
    1754:	97 7f       	andi	r25, 0xF7	; 247
    1756:	9a b9       	out	0x0a, r25	; 10
    1758:	81 30       	cpi	r24, 0x01	; 1
    175a:	59 f0       	breq	.+22     	; 0x1772 <configuracion_modoSalidas_timer2+0x34>
    175c:	28 f0       	brcs	.+10     	; 0x1768 <configuracion_modoSalidas_timer2+0x2a>
    175e:	82 30       	cpi	r24, 0x02	; 2
    1760:	a9 f0       	breq	.+42     	; 0x178c <configuracion_modoSalidas_timer2+0x4e>
    1762:	83 30       	cpi	r24, 0x03	; 3
    1764:	01 f1       	breq	.+64     	; 0x17a6 <configuracion_modoSalidas_timer2+0x68>
    1766:	2c c0       	rjmp	.+88     	; 0x17c0 <configuracion_modoSalidas_timer2+0x82>
    1768:	85 e4       	ldi	r24, 0x45	; 69
    176a:	94 e0       	ldi	r25, 0x04	; 4
    176c:	0e 94 6e 14 	call	0x28dc	; 0x28dc <puts>
    1770:	2b c0       	rjmp	.+86     	; 0x17c8 <configuracion_modoSalidas_timer2+0x8a>
    1772:	8f e4       	ldi	r24, 0x4F	; 79
    1774:	94 e0       	ldi	r25, 0x04	; 4
    1776:	0e 94 6e 14 	call	0x28dc	; 0x28dc <puts>
    177a:	84 b1       	in	r24, 0x04	; 4
    177c:	88 60       	ori	r24, 0x08	; 8
    177e:	84 b9       	out	0x04, r24	; 4
    1780:	e0 eb       	ldi	r30, 0xB0	; 176
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	80 64       	ori	r24, 0x40	; 64
    1788:	80 83       	st	Z, r24
    178a:	1e c0       	rjmp	.+60     	; 0x17c8 <configuracion_modoSalidas_timer2+0x8a>
    178c:	8c e5       	ldi	r24, 0x5C	; 92
    178e:	94 e0       	ldi	r25, 0x04	; 4
    1790:	0e 94 6e 14 	call	0x28dc	; 0x28dc <puts>
    1794:	84 b1       	in	r24, 0x04	; 4
    1796:	88 60       	ori	r24, 0x08	; 8
    1798:	84 b9       	out	0x04, r24	; 4
    179a:	e0 eb       	ldi	r30, 0xB0	; 176
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	80 81       	ld	r24, Z
    17a0:	80 68       	ori	r24, 0x80	; 128
    17a2:	80 83       	st	Z, r24
    17a4:	11 c0       	rjmp	.+34     	; 0x17c8 <configuracion_modoSalidas_timer2+0x8a>
    17a6:	88 e6       	ldi	r24, 0x68	; 104
    17a8:	94 e0       	ldi	r25, 0x04	; 4
    17aa:	0e 94 6e 14 	call	0x28dc	; 0x28dc <puts>
    17ae:	84 b1       	in	r24, 0x04	; 4
    17b0:	88 60       	ori	r24, 0x08	; 8
    17b2:	84 b9       	out	0x04, r24	; 4
    17b4:	e0 eb       	ldi	r30, 0xB0	; 176
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	80 81       	ld	r24, Z
    17ba:	80 6c       	ori	r24, 0xC0	; 192
    17bc:	80 83       	st	Z, r24
    17be:	04 c0       	rjmp	.+8      	; 0x17c8 <configuracion_modoSalidas_timer2+0x8a>
    17c0:	82 e7       	ldi	r24, 0x72	; 114
    17c2:	94 e0       	ldi	r25, 0x04	; 4
    17c4:	0e 94 6e 14 	call	0x28dc	; 0x28dc <puts>
    17c8:	c1 30       	cpi	r28, 0x01	; 1
    17ca:	59 f0       	breq	.+22     	; 0x17e2 <configuracion_modoSalidas_timer2+0xa4>
    17cc:	28 f0       	brcs	.+10     	; 0x17d8 <configuracion_modoSalidas_timer2+0x9a>
    17ce:	c2 30       	cpi	r28, 0x02	; 2
    17d0:	a9 f0       	breq	.+42     	; 0x17fc <configuracion_modoSalidas_timer2+0xbe>
    17d2:	c3 30       	cpi	r28, 0x03	; 3
    17d4:	01 f1       	breq	.+64     	; 0x1816 <configuracion_modoSalidas_timer2+0xd8>
    17d6:	2c c0       	rjmp	.+88     	; 0x1830 <configuracion_modoSalidas_timer2+0xf2>
    17d8:	8b e8       	ldi	r24, 0x8B	; 139
    17da:	94 e0       	ldi	r25, 0x04	; 4
    17dc:	0e 94 6e 14 	call	0x28dc	; 0x28dc <puts>
    17e0:	2b c0       	rjmp	.+86     	; 0x1838 <configuracion_modoSalidas_timer2+0xfa>
    17e2:	87 e9       	ldi	r24, 0x97	; 151
    17e4:	94 e0       	ldi	r25, 0x04	; 4
    17e6:	0e 94 6e 14 	call	0x28dc	; 0x28dc <puts>
    17ea:	8a b1       	in	r24, 0x0a	; 10
    17ec:	88 60       	ori	r24, 0x08	; 8
    17ee:	8a b9       	out	0x0a, r24	; 10
    17f0:	e0 eb       	ldi	r30, 0xB0	; 176
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	80 61       	ori	r24, 0x10	; 16
    17f8:	80 83       	st	Z, r24
    17fa:	1e c0       	rjmp	.+60     	; 0x1838 <configuracion_modoSalidas_timer2+0xfa>
    17fc:	86 ea       	ldi	r24, 0xA6	; 166
    17fe:	94 e0       	ldi	r25, 0x04	; 4
    1800:	0e 94 6e 14 	call	0x28dc	; 0x28dc <puts>
    1804:	8a b1       	in	r24, 0x0a	; 10
    1806:	88 60       	ori	r24, 0x08	; 8
    1808:	8a b9       	out	0x0a, r24	; 10
    180a:	e0 eb       	ldi	r30, 0xB0	; 176
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	80 81       	ld	r24, Z
    1810:	80 62       	ori	r24, 0x20	; 32
    1812:	80 83       	st	Z, r24
    1814:	11 c0       	rjmp	.+34     	; 0x1838 <configuracion_modoSalidas_timer2+0xfa>
    1816:	84 eb       	ldi	r24, 0xB4	; 180
    1818:	94 e0       	ldi	r25, 0x04	; 4
    181a:	0e 94 6e 14 	call	0x28dc	; 0x28dc <puts>
    181e:	8a b1       	in	r24, 0x0a	; 10
    1820:	88 60       	ori	r24, 0x08	; 8
    1822:	8a b9       	out	0x0a, r24	; 10
    1824:	e0 eb       	ldi	r30, 0xB0	; 176
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	80 81       	ld	r24, Z
    182a:	80 63       	ori	r24, 0x30	; 48
    182c:	80 83       	st	Z, r24
    182e:	04 c0       	rjmp	.+8      	; 0x1838 <configuracion_modoSalidas_timer2+0xfa>
    1830:	80 ec       	ldi	r24, 0xC0	; 192
    1832:	94 e0       	ldi	r25, 0x04	; 4
    1834:	0e 94 6e 14 	call	0x28dc	; 0x28dc <puts>
    1838:	cf 91       	pop	r28
    183a:	08 95       	ret

0000183c <set_OCR2>:
	}
}

void set_OCR2(uint8_t OCR2A_val, uint8_t OCR2B_val){
	if((OCR2A_val<(uint8_t)(UINT8_MAX)))	OCR2A = OCR2A_val;
    183c:	8f 3f       	cpi	r24, 0xFF	; 255
    183e:	11 f0       	breq	.+4      	; 0x1844 <set_OCR2+0x8>
    1840:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	if((OCR2B_val<(uint8_t)(UINT8_MAX)))	OCR2B = OCR2B_val;
    1844:	6f 3f       	cpi	r22, 0xFF	; 255
    1846:	11 f0       	breq	.+4      	; 0x184c <set_OCR2+0x10>
    1848:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    184c:	08 95       	ret

0000184e <set_dutycicle_ms_TC2>:
	
	Angulo deseado    |      dutycicle		|    OCR0x
		-90			  |		   1ms			|     14
		 90			  |		   2ms			|     31
*/
void set_dutycicle_ms_TC2(float dutycicleA, float dutycicleB){
    184e:	8f 92       	push	r8
    1850:	9f 92       	push	r9
    1852:	af 92       	push	r10
    1854:	bf 92       	push	r11
    1856:	cf 92       	push	r12
    1858:	df 92       	push	r13
    185a:	ef 92       	push	r14
    185c:	ff 92       	push	r15
    185e:	cf 93       	push	r28
    1860:	4b 01       	movw	r8, r22
    1862:	5c 01       	movw	r10, r24
    1864:	69 01       	movw	r12, r18
    1866:	7a 01       	movw	r14, r20
	uint8_t OCR2A_val = -1;
	uint8_t OCR2B_val = -1;
	if(!(dutycicleA<0)){
    1868:	20 e0       	ldi	r18, 0x00	; 0
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	a9 01       	movw	r20, r18
    186e:	0e 94 1a 12 	call	0x2434	; 0x2434 <__cmpsf2>
    1872:	88 23       	and	r24, r24
    1874:	c4 f0       	brlt	.+48     	; 0x18a6 <set_dutycicle_ms_TC2+0x58>
		// OCR2A_val = (uint8_t)( (dutycicleA/1000.0)*(F_CPU/prescaler_TC2)+1 );
		OCR2A_val = (uint8_t)((17.0/1.0)*(dutycicleA - 1.0) + 14.0);	
    1876:	20 e0       	ldi	r18, 0x00	; 0
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	40 e8       	ldi	r20, 0x80	; 128
    187c:	5f e3       	ldi	r21, 0x3F	; 63
    187e:	c5 01       	movw	r24, r10
    1880:	b4 01       	movw	r22, r8
    1882:	0e 94 ad 11 	call	0x235a	; 0x235a <__subsf3>
    1886:	20 e0       	ldi	r18, 0x00	; 0
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	48 e8       	ldi	r20, 0x88	; 136
    188c:	51 e4       	ldi	r21, 0x41	; 65
    188e:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__mulsf3>
    1892:	20 e0       	ldi	r18, 0x00	; 0
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	40 e6       	ldi	r20, 0x60	; 96
    1898:	51 e4       	ldi	r21, 0x41	; 65
    189a:	0e 94 ae 11 	call	0x235c	; 0x235c <__addsf3>
    189e:	0e 94 98 12 	call	0x2530	; 0x2530 <__fixunssfsi>
    18a2:	c6 2f       	mov	r28, r22
    18a4:	01 c0       	rjmp	.+2      	; 0x18a8 <set_dutycicle_ms_TC2+0x5a>
	Angulo deseado    |      dutycicle		|    OCR0x
		-90			  |		   1ms			|     14
		 90			  |		   2ms			|     31
*/
void set_dutycicle_ms_TC2(float dutycicleA, float dutycicleB){
	uint8_t OCR2A_val = -1;
    18a6:	cf ef       	ldi	r28, 0xFF	; 255
	uint8_t OCR2B_val = -1;
	if(!(dutycicleA<0)){
		// OCR2A_val = (uint8_t)( (dutycicleA/1000.0)*(F_CPU/prescaler_TC2)+1 );
		OCR2A_val = (uint8_t)((17.0/1.0)*(dutycicleA - 1.0) + 14.0);	
	}
	if(!(dutycicleB<0)){
    18a8:	20 e0       	ldi	r18, 0x00	; 0
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	a9 01       	movw	r20, r18
    18ae:	c7 01       	movw	r24, r14
    18b0:	b6 01       	movw	r22, r12
    18b2:	0e 94 1a 12 	call	0x2434	; 0x2434 <__cmpsf2>
    18b6:	88 23       	and	r24, r24
    18b8:	bc f0       	brlt	.+46     	; 0x18e8 <set_dutycicle_ms_TC2+0x9a>
		// OCR2B_val = (uint8_t)( (dutycicleB/1000.0)*(F_CPU/prescaler_TC2)+1 );
		OCR2B_val = (uint8_t)((17.0/1.0)*(dutycicleB - 1.0) + 14.0);
    18ba:	20 e0       	ldi	r18, 0x00	; 0
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	40 e8       	ldi	r20, 0x80	; 128
    18c0:	5f e3       	ldi	r21, 0x3F	; 63
    18c2:	c7 01       	movw	r24, r14
    18c4:	b6 01       	movw	r22, r12
    18c6:	0e 94 ad 11 	call	0x235a	; 0x235a <__subsf3>
    18ca:	20 e0       	ldi	r18, 0x00	; 0
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	48 e8       	ldi	r20, 0x88	; 136
    18d0:	51 e4       	ldi	r21, 0x41	; 65
    18d2:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__mulsf3>
    18d6:	20 e0       	ldi	r18, 0x00	; 0
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	40 e6       	ldi	r20, 0x60	; 96
    18dc:	51 e4       	ldi	r21, 0x41	; 65
    18de:	0e 94 ae 11 	call	0x235c	; 0x235c <__addsf3>
    18e2:	0e 94 98 12 	call	0x2530	; 0x2530 <__fixunssfsi>
    18e6:	01 c0       	rjmp	.+2      	; 0x18ea <set_dutycicle_ms_TC2+0x9c>
		-90			  |		   1ms			|     14
		 90			  |		   2ms			|     31
*/
void set_dutycicle_ms_TC2(float dutycicleA, float dutycicleB){
	uint8_t OCR2A_val = -1;
	uint8_t OCR2B_val = -1;
    18e8:	6f ef       	ldi	r22, 0xFF	; 255
	}
	if(!(dutycicleB<0)){
		// OCR2B_val = (uint8_t)( (dutycicleB/1000.0)*(F_CPU/prescaler_TC2)+1 );
		OCR2B_val = (uint8_t)((17.0/1.0)*(dutycicleB - 1.0) + 14.0);
	}
	set_OCR2(OCR2A_val, OCR2B_val);
    18ea:	8c 2f       	mov	r24, r28
    18ec:	0e 94 1e 0c 	call	0x183c	; 0x183c <set_OCR2>
}
    18f0:	cf 91       	pop	r28
    18f2:	ff 90       	pop	r15
    18f4:	ef 90       	pop	r14
    18f6:	df 90       	pop	r13
    18f8:	cf 90       	pop	r12
    18fa:	bf 90       	pop	r11
    18fc:	af 90       	pop	r10
    18fe:	9f 90       	pop	r9
    1900:	8f 90       	pop	r8
    1902:	08 95       	ret

00001904 <mi_putc>:
	}
}


int mi_putc(char c, FILE *stream){
	while(!(UCSR0A & (1<<UDRE0)));		// Esperar hasta que se desocupe el buffer de transmision
    1904:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    1908:	95 ff       	sbrs	r25, 5
    190a:	fc cf       	rjmp	.-8      	; 0x1904 <mi_putc>
	UDR0 = c;							// Poner el dato en el registro UDR0
    190c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	return 0; 
}
    1910:	80 e0       	ldi	r24, 0x00	; 0
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	08 95       	ret

00001916 <mi_getc>:


int mi_getc(FILE *stream){
	while ( !(UCSR0A & (1<<RXC0)));		// Esperar hasta que la recepcion se complete
    1916:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    191a:	88 23       	and	r24, r24
    191c:	e4 f7       	brge	.-8      	; 0x1916 <mi_getc>
	return UDR0;						// Leer el dato del registro UDR0
    191e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	08 95       	ret

00001926 <UART_init>:
#define comSize 30
char comando[comSize];		// buffer de recepcion

FILE uart_io = FDEV_SETUP_STREAM(mi_putc, mi_getc, _FDEV_SETUP_RW);

void UART_init(uint32_t baud, uint8_t InterRx, uint8_t InterTx){
    1926:	cf 92       	push	r12
    1928:	df 92       	push	r13
    192a:	ef 92       	push	r14
    192c:	ff 92       	push	r15
    192e:	cf 93       	push	r28
    1930:	df 93       	push	r29
    1932:	6b 01       	movw	r12, r22
    1934:	7c 01       	movw	r14, r24
    1936:	d4 2f       	mov	r29, r20
    1938:	c2 2f       	mov	r28, r18
	flagcom = 0;
    193a:	10 92 1d 08 	sts	0x081D, r1	; 0x80081d <flagcom>
	
	stdout = stdin = &uart_io;
    193e:	e1 e2       	ldi	r30, 0x21	; 33
    1940:	f8 e0       	ldi	r31, 0x08	; 8
    1942:	80 e0       	ldi	r24, 0x00	; 0
    1944:	91 e0       	ldi	r25, 0x01	; 1
    1946:	91 83       	std	Z+1, r25	; 0x01
    1948:	80 83       	st	Z, r24
    194a:	93 83       	std	Z+3, r25	; 0x03
    194c:	82 83       	std	Z+2, r24	; 0x02
	
	UBRR0  = F_CPU/16/baud - 1;						// Configuracion del baudrate
    194e:	60 e4       	ldi	r22, 0x40	; 64
    1950:	72 e4       	ldi	r23, 0x42	; 66
    1952:	8f e0       	ldi	r24, 0x0F	; 15
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	a7 01       	movw	r20, r14
    1958:	96 01       	movw	r18, r12
    195a:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <__udivmodsi4>
    195e:	21 50       	subi	r18, 0x01	; 1
    1960:	31 09       	sbc	r19, r1
    1962:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    1966:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);		// Habilitacion del pin Rx y Tx. Habilitacion de interrupcion por recepcion completa
    196a:	88 e9       	ldi	r24, 0x98	; 152
    196c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);				// 2 bits de STOP y 8 bits de datos
    1970:	8e e0       	ldi	r24, 0x0E	; 14
    1972:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	
	// === INTERRUPCIONES DE UART (por recepcion) ===
	if(InterRx){
    1976:	dd 23       	and	r29, r29
    1978:	51 f0       	breq	.+20     	; 0x198e <UART_init+0x68>
		UCSR0A &=~ (1<<RXC0);		// Apagar el flag de interrupcion por recepcion completa
    197a:	e0 ec       	ldi	r30, 0xC0	; 192
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	80 81       	ld	r24, Z
    1980:	8f 77       	andi	r24, 0x7F	; 127
    1982:	80 83       	st	Z, r24
		UCSR0B |=  (1<<RXCIE0);		// Habilitar la interrupcion Rx
    1984:	e1 ec       	ldi	r30, 0xC1	; 193
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	80 81       	ld	r24, Z
    198a:	80 68       	ori	r24, 0x80	; 128
    198c:	80 83       	st	Z, r24
	}
	// === INTERRUPCIONES DE UART (por transmision) ===
	if(InterTx){
    198e:	cc 23       	and	r28, r28
    1990:	51 f0       	breq	.+20     	; 0x19a6 <UART_init+0x80>
		UCSR0A &=~ (1<<TXC0);		// Apagar el flag de interrupcion por transmision completa
    1992:	e0 ec       	ldi	r30, 0xC0	; 192
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	80 81       	ld	r24, Z
    1998:	8f 7b       	andi	r24, 0xBF	; 191
    199a:	80 83       	st	Z, r24
		UCSR0B |=  (1<<TXCIE0);		// Habilitar la interrupcion Tx
    199c:	e1 ec       	ldi	r30, 0xC1	; 193
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	80 81       	ld	r24, Z
    19a2:	80 64       	ori	r24, 0x40	; 64
    19a4:	80 83       	st	Z, r24
	}
}
    19a6:	df 91       	pop	r29
    19a8:	cf 91       	pop	r28
    19aa:	ff 90       	pop	r15
    19ac:	ef 90       	pop	r14
    19ae:	df 90       	pop	r13
    19b0:	cf 90       	pop	r12
    19b2:	08 95       	ret

000019b4 <__vector_18>:
	while ( !(UCSR0A & (1<<RXC0)));		// Esperar hasta que la recepcion se complete
	return UDR0;						// Leer el dato del registro UDR0
}


ISR(USART_RX_vect){
    19b4:	1f 92       	push	r1
    19b6:	0f 92       	push	r0
    19b8:	0f b6       	in	r0, 0x3f	; 63
    19ba:	0f 92       	push	r0
    19bc:	11 24       	eor	r1, r1
    19be:	2f 93       	push	r18
    19c0:	3f 93       	push	r19
    19c2:	4f 93       	push	r20
    19c4:	5f 93       	push	r21
    19c6:	6f 93       	push	r22
    19c8:	7f 93       	push	r23
    19ca:	8f 93       	push	r24
    19cc:	9f 93       	push	r25
    19ce:	af 93       	push	r26
    19d0:	bf 93       	push	r27
    19d2:	ef 93       	push	r30
    19d4:	ff 93       	push	r31
	char dato;
	dato = getc();
    19d6:	80 e0       	ldi	r24, 0x00	; 0
    19d8:	91 e0       	ldi	r25, 0x01	; 1
    19da:	0e 94 8b 0c 	call	0x1916	; 0x1916 <mi_getc>
	switch(dato)
    19de:	9c 01       	movw	r18, r24
    19e0:	33 27       	eor	r19, r19
    19e2:	2d 30       	cpi	r18, 0x0D	; 13
    19e4:	31 05       	cpc	r19, r1
    19e6:	69 f0       	breq	.+26     	; 0x1a02 <__vector_18+0x4e>
    19e8:	2a 33       	cpi	r18, 0x3A	; 58
    19ea:	31 05       	cpc	r19, r1
    19ec:	21 f0       	breq	.+8      	; 0x19f6 <__vector_18+0x42>
    19ee:	28 30       	cpi	r18, 0x08	; 8
    19f0:	31 05       	cpc	r19, r1
    19f2:	f1 f4       	brne	.+60     	; 0x1a30 <__vector_18+0x7c>
    19f4:	17 c0       	rjmp	.+46     	; 0x1a24 <__vector_18+0x70>
	{
		case ':':			// Delimitador de inicio
			flagcom = 1;
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	80 93 1d 08 	sts	0x081D, r24	; 0x80081d <flagcom>
			indcom = 0;		// Inicializa indice de buffer de recepcion
    19fc:	10 92 e4 07 	sts	0x07E4, r1	; 0x8007e4 <__data_end>
			break;
    1a00:	27 c0       	rjmp	.+78     	; 0x1a50 <__vector_18+0x9c>
		case '\r':						// Delimitador de final
			if(flagcom){
    1a02:	80 91 1d 08 	lds	r24, 0x081D	; 0x80081d <flagcom>
    1a06:	88 23       	and	r24, r24
    1a08:	51 f0       	breq	.+20     	; 0x1a1e <__vector_18+0x6a>
				comando[indcom] = 0;		// coloca \0 luego del ultimo caracter recibido antes de \r
    1a0a:	e0 91 e4 07 	lds	r30, 0x07E4	; 0x8007e4 <__data_end>
    1a0e:	f0 e0       	ldi	r31, 0x00	; 0
    1a10:	e1 50       	subi	r30, 0x01	; 1
    1a12:	f8 4f       	sbci	r31, 0xF8	; 248
    1a14:	10 82       	st	Z, r1
				InterpretaComando(comando);	// Llama a funcion interprete de comandos
    1a16:	8f ef       	ldi	r24, 0xFF	; 255
    1a18:	97 e0       	ldi	r25, 0x07	; 7
    1a1a:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <InterpretaComando>
				//printf("No hay interprete de comando.\r\n");
			}
			flagcom = 0;
    1a1e:	10 92 1d 08 	sts	0x081D, r1	; 0x80081d <flagcom>
			break;
    1a22:	16 c0       	rjmp	.+44     	; 0x1a50 <__vector_18+0x9c>
		case 8:			// backspace
			indcom--;
    1a24:	80 91 e4 07 	lds	r24, 0x07E4	; 0x8007e4 <__data_end>
    1a28:	81 50       	subi	r24, 0x01	; 1
    1a2a:	80 93 e4 07 	sts	0x07E4, r24	; 0x8007e4 <__data_end>
			break;
    1a2e:	10 c0       	rjmp	.+32     	; 0x1a50 <__vector_18+0x9c>
		default:								// Todo lo que este entre delimitadores
			if(flagcom && indcom<comSize) comando[indcom++]=dato; // Guarda en elemento del buffer e incrementa indcom para apuntar a siguiente
    1a30:	20 91 1d 08 	lds	r18, 0x081D	; 0x80081d <flagcom>
    1a34:	22 23       	and	r18, r18
    1a36:	61 f0       	breq	.+24     	; 0x1a50 <__vector_18+0x9c>
    1a38:	e0 91 e4 07 	lds	r30, 0x07E4	; 0x8007e4 <__data_end>
    1a3c:	ee 31       	cpi	r30, 0x1E	; 30
    1a3e:	40 f4       	brcc	.+16     	; 0x1a50 <__vector_18+0x9c>
    1a40:	91 e0       	ldi	r25, 0x01	; 1
    1a42:	9e 0f       	add	r25, r30
    1a44:	90 93 e4 07 	sts	0x07E4, r25	; 0x8007e4 <__data_end>
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	e1 50       	subi	r30, 0x01	; 1
    1a4c:	f8 4f       	sbci	r31, 0xF8	; 248
    1a4e:	80 83       	st	Z, r24
			break;
	}
}
    1a50:	ff 91       	pop	r31
    1a52:	ef 91       	pop	r30
    1a54:	bf 91       	pop	r27
    1a56:	af 91       	pop	r26
    1a58:	9f 91       	pop	r25
    1a5a:	8f 91       	pop	r24
    1a5c:	7f 91       	pop	r23
    1a5e:	6f 91       	pop	r22
    1a60:	5f 91       	pop	r21
    1a62:	4f 91       	pop	r20
    1a64:	3f 91       	pop	r19
    1a66:	2f 91       	pop	r18
    1a68:	0f 90       	pop	r0
    1a6a:	0f be       	out	0x3f, r0	; 63
    1a6c:	0f 90       	pop	r0
    1a6e:	1f 90       	pop	r1
    1a70:	18 95       	reti

00001a72 <help>:
			break;
	}
}

void help(){
	printf("\r\n================= Options: ================= \r\n");
    1a72:	8b ed       	ldi	r24, 0xDB	; 219
    1a74:	94 e0       	ldi	r25, 0x04	; 4
    1a76:	0e 94 6e 14 	call	0x28dc	; 0x28dc <puts>
	printf(":Amnn	--> Set minimum aceptable degree\r\n");
    1a7a:	8c e0       	ldi	r24, 0x0C	; 12
    1a7c:	95 e0       	ldi	r25, 0x05	; 5
    1a7e:	0e 94 6e 14 	call	0x28dc	; 0x28dc <puts>
	printf(":AMnn	--> Set maximum aceptable degree\r\n");
    1a82:	84 e3       	ldi	r24, 0x34	; 52
    1a84:	95 e0       	ldi	r25, 0x05	; 5
    1a86:	0e 94 6e 14 	call	0x28dc	; 0x28dc <puts>
	printf(":Ainn	--> Set initial degree\r\n");
    1a8a:	8c e5       	ldi	r24, 0x5C	; 92
    1a8c:	95 e0       	ldi	r25, 0x05	; 5
    1a8e:	0e 94 6e 14 	call	0x28dc	; 0x28dc <puts>
	//printf(":Dnn	--> Hand flexion degree, nn is degrees [%d, %d]\r\n", (int)min_degree, (int)max_degree);
	printf(":Fxnn	--> Finger flexion degree, x is finger\r");
    1a92:	8a e7       	ldi	r24, 0x7A	; 122
    1a94:	95 e0       	ldi	r25, 0x05	; 5
    1a96:	9f 93       	push	r25
    1a98:	8f 93       	push	r24
    1a9a:	0e 94 58 14 	call	0x28b0	; 0x28b0 <printf>
	printf("           [1,5], nn is degrees [%d, %d]\r\n", (int)min_degree, (int)max_degree);
    1a9e:	60 91 f8 07 	lds	r22, 0x07F8	; 0x8007f8 <max_degree>
    1aa2:	70 91 f9 07 	lds	r23, 0x07F9	; 0x8007f9 <max_degree+0x1>
    1aa6:	80 91 fa 07 	lds	r24, 0x07FA	; 0x8007fa <max_degree+0x2>
    1aaa:	90 91 fb 07 	lds	r25, 0x07FB	; 0x8007fb <max_degree+0x3>
    1aae:	0e 94 91 12 	call	0x2522	; 0x2522 <__fixsfsi>
    1ab2:	7f 93       	push	r23
    1ab4:	6f 93       	push	r22
    1ab6:	60 91 e9 07 	lds	r22, 0x07E9	; 0x8007e9 <min_degree>
    1aba:	70 91 ea 07 	lds	r23, 0x07EA	; 0x8007ea <min_degree+0x1>
    1abe:	80 91 eb 07 	lds	r24, 0x07EB	; 0x8007eb <min_degree+0x2>
    1ac2:	90 91 ec 07 	lds	r25, 0x07EC	; 0x8007ec <min_degree+0x3>
    1ac6:	0e 94 91 12 	call	0x2522	; 0x2522 <__fixsfsi>
    1aca:	7f 93       	push	r23
    1acc:	6f 93       	push	r22
    1ace:	88 ea       	ldi	r24, 0xA8	; 168
    1ad0:	95 e0       	ldi	r25, 0x05	; 5
    1ad2:	9f 93       	push	r25
    1ad4:	8f 93       	push	r24
    1ad6:	0e 94 58 14 	call	0x28b0	; 0x28b0 <printf>
	//printf(":M		--> Move hand indefinitely\r\n");
	//printf(":S		--> Stop movement\r\n");
	printf(":Hnn	--> Set all fingers to degree nn [%d, %d]\r\n", (int)min_degree, (int)max_degree);
    1ada:	60 91 f8 07 	lds	r22, 0x07F8	; 0x8007f8 <max_degree>
    1ade:	70 91 f9 07 	lds	r23, 0x07F9	; 0x8007f9 <max_degree+0x1>
    1ae2:	80 91 fa 07 	lds	r24, 0x07FA	; 0x8007fa <max_degree+0x2>
    1ae6:	90 91 fb 07 	lds	r25, 0x07FB	; 0x8007fb <max_degree+0x3>
    1aea:	0e 94 91 12 	call	0x2522	; 0x2522 <__fixsfsi>
    1aee:	7f 93       	push	r23
    1af0:	6f 93       	push	r22
    1af2:	60 91 e9 07 	lds	r22, 0x07E9	; 0x8007e9 <min_degree>
    1af6:	70 91 ea 07 	lds	r23, 0x07EA	; 0x8007ea <min_degree+0x1>
    1afa:	80 91 eb 07 	lds	r24, 0x07EB	; 0x8007eb <min_degree+0x2>
    1afe:	90 91 ec 07 	lds	r25, 0x07EC	; 0x8007ec <min_degree+0x3>
    1b02:	0e 94 91 12 	call	0x2522	; 0x2522 <__fixsfsi>
    1b06:	7f 93       	push	r23
    1b08:	6f 93       	push	r22
    1b0a:	83 ed       	ldi	r24, 0xD3	; 211
    1b0c:	95 e0       	ldi	r25, 0x05	; 5
    1b0e:	9f 93       	push	r25
    1b10:	8f 93       	push	r24
    1b12:	0e 94 58 14 	call	0x28b0	; 0x28b0 <printf>
	printf(":C		--> Close hand\r\n");
    1b16:	84 e0       	ldi	r24, 0x04	; 4
    1b18:	96 e0       	ldi	r25, 0x06	; 6
    1b1a:	0e 94 6e 14 	call	0x28dc	; 0x28dc <puts>
	printf(":O		--> Open hand\r\n");
    1b1e:	88 e1       	ldi	r24, 0x18	; 24
    1b20:	96 e0       	ldi	r25, 0x06	; 6
    1b22:	0e 94 6e 14 	call	0x28dc	; 0x28dc <puts>
	printf(":R		--> Reset hand\r\n");
    1b26:	8b e2       	ldi	r24, 0x2B	; 43
    1b28:	96 e0       	ldi	r25, 0x06	; 6
    1b2a:	0e 94 6e 14 	call	0x28dc	; 0x28dc <puts>
	printf(":h		--> Show help\r\n\r\n");
    1b2e:	8f e3       	ldi	r24, 0x3F	; 63
    1b30:	96 e0       	ldi	r25, 0x06	; 6
    1b32:	0e 94 6e 14 	call	0x28dc	; 0x28dc <puts>
}
    1b36:	8d b7       	in	r24, 0x3d	; 61
    1b38:	9e b7       	in	r25, 0x3e	; 62
    1b3a:	0e 96       	adiw	r24, 0x0e	; 14
    1b3c:	0f b6       	in	r0, 0x3f	; 63
    1b3e:	f8 94       	cli
    1b40:	9e bf       	out	0x3e, r25	; 62
    1b42:	0f be       	out	0x3f, r0	; 63
    1b44:	8d bf       	out	0x3d, r24	; 61
    1b46:	08 95       	ret

00001b48 <InterpretaComando>:
#include "uartInterpreter.h"

void InterpretaComando(char comando[]){
    1b48:	8f 92       	push	r8
    1b4a:	9f 92       	push	r9
    1b4c:	af 92       	push	r10
    1b4e:	bf 92       	push	r11
    1b50:	cf 92       	push	r12
    1b52:	df 92       	push	r13
    1b54:	ef 92       	push	r14
    1b56:	ff 92       	push	r15
    1b58:	cf 93       	push	r28
    1b5a:	df 93       	push	r29
	int aux;
	switch(comando[0]){
    1b5c:	dc 01       	movw	r26, r24
    1b5e:	ec 91       	ld	r30, X
    1b60:	4e 2f       	mov	r20, r30
    1b62:	50 e0       	ldi	r21, 0x00	; 0
    1b64:	fa 01       	movw	r30, r20
    1b66:	e1 54       	subi	r30, 0x41	; 65
    1b68:	f1 09       	sbc	r31, r1
    1b6a:	e2 33       	cpi	r30, 0x32	; 50
    1b6c:	f1 05       	cpc	r31, r1
    1b6e:	08 f0       	brcs	.+2      	; 0x1b72 <InterpretaComando+0x2a>
    1b70:	d0 c3       	rjmp	.+1952   	; 0x2312 <InterpretaComando+0x7ca>
    1b72:	ec 5b       	subi	r30, 0xBC	; 188
    1b74:	ff 4f       	sbci	r31, 0xFF	; 255
    1b76:	0c 94 2c 14 	jmp	0x2858	; 0x2858 <__tablejump2__>
		case 'a':
		case 'A':
			switch (comando[1]) {
    1b7a:	fc 01       	movw	r30, r24
    1b7c:	21 81       	ldd	r18, Z+1	; 0x01
    1b7e:	29 36       	cpi	r18, 0x69	; 105
    1b80:	09 f4       	brne	.+2      	; 0x1b84 <InterpretaComando+0x3c>
    1b82:	eb c0       	rjmp	.+470    	; 0x1d5a <InterpretaComando+0x212>
    1b84:	2d 36       	cpi	r18, 0x6D	; 109
    1b86:	21 f0       	breq	.+8      	; 0x1b90 <InterpretaComando+0x48>
    1b88:	2d 34       	cpi	r18, 0x4D	; 77
    1b8a:	09 f0       	breq	.+2      	; 0x1b8e <InterpretaComando+0x46>
    1b8c:	2d c1       	rjmp	.+602    	; 0x1de8 <InterpretaComando+0x2a0>
    1b8e:	72 c0       	rjmp	.+228    	; 0x1c74 <InterpretaComando+0x12c>
				case 'm':
					if(comando[2]){
    1b90:	22 81       	ldd	r18, Z+2	; 0x02
    1b92:	22 23       	and	r18, r18
    1b94:	09 f4       	brne	.+2      	; 0x1b98 <InterpretaComando+0x50>
    1b96:	57 c0       	rjmp	.+174    	; 0x1c46 <InterpretaComando+0xfe>
						aux = atoi(&comando[2]);
    1b98:	02 96       	adiw	r24, 0x02	; 2
    1b9a:	0e 94 32 14 	call	0x2864	; 0x2864 <atoi>
						if (aux<max_degree && aux>=-90.0){
    1b9e:	bc 01       	movw	r22, r24
    1ba0:	99 0f       	add	r25, r25
    1ba2:	88 0b       	sbc	r24, r24
    1ba4:	99 0b       	sbc	r25, r25
    1ba6:	0e 94 c9 12 	call	0x2592	; 0x2592 <__floatsisf>
    1baa:	6b 01       	movw	r12, r22
    1bac:	7c 01       	movw	r14, r24
    1bae:	20 91 f8 07 	lds	r18, 0x07F8	; 0x8007f8 <max_degree>
    1bb2:	30 91 f9 07 	lds	r19, 0x07F9	; 0x8007f9 <max_degree+0x1>
    1bb6:	40 91 fa 07 	lds	r20, 0x07FA	; 0x8007fa <max_degree+0x2>
    1bba:	50 91 fb 07 	lds	r21, 0x07FB	; 0x8007fb <max_degree+0x3>
    1bbe:	0e 94 1a 12 	call	0x2434	; 0x2434 <__cmpsf2>
    1bc2:	88 23       	and	r24, r24
    1bc4:	94 f4       	brge	.+36     	; 0x1bea <InterpretaComando+0xa2>
    1bc6:	20 e0       	ldi	r18, 0x00	; 0
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	44 eb       	ldi	r20, 0xB4	; 180
    1bcc:	52 ec       	ldi	r21, 0xC2	; 194
    1bce:	c7 01       	movw	r24, r14
    1bd0:	b6 01       	movw	r22, r12
    1bd2:	0e 94 79 13 	call	0x26f2	; 0x26f2 <__gesf2>
    1bd6:	88 23       	and	r24, r24
    1bd8:	44 f0       	brlt	.+16     	; 0x1bea <InterpretaComando+0xa2>
							min_degree = aux;
    1bda:	c0 92 e9 07 	sts	0x07E9, r12	; 0x8007e9 <min_degree>
    1bde:	d0 92 ea 07 	sts	0x07EA, r13	; 0x8007ea <min_degree+0x1>
    1be2:	e0 92 eb 07 	sts	0x07EB, r14	; 0x8007eb <min_degree+0x2>
    1be6:	f0 92 ec 07 	sts	0x07EC, r15	; 0x8007ec <min_degree+0x3>
						}
						if (!(min_degree<=init_degree)){
    1bea:	c0 90 e9 07 	lds	r12, 0x07E9	; 0x8007e9 <min_degree>
    1bee:	d0 90 ea 07 	lds	r13, 0x07EA	; 0x8007ea <min_degree+0x1>
    1bf2:	e0 90 eb 07 	lds	r14, 0x07EB	; 0x8007eb <min_degree+0x2>
    1bf6:	f0 90 ec 07 	lds	r15, 0x07EC	; 0x8007ec <min_degree+0x3>
    1bfa:	20 91 f4 07 	lds	r18, 0x07F4	; 0x8007f4 <init_degree>
    1bfe:	30 91 f5 07 	lds	r19, 0x07F5	; 0x8007f5 <init_degree+0x1>
    1c02:	40 91 f6 07 	lds	r20, 0x07F6	; 0x8007f6 <init_degree+0x2>
    1c06:	50 91 f7 07 	lds	r21, 0x07F7	; 0x8007f7 <init_degree+0x3>
    1c0a:	c7 01       	movw	r24, r14
    1c0c:	b6 01       	movw	r22, r12
    1c0e:	0e 94 1a 12 	call	0x2434	; 0x2434 <__cmpsf2>
    1c12:	18 16       	cp	r1, r24
    1c14:	c4 f4       	brge	.+48     	; 0x1c46 <InterpretaComando+0xfe>
							init_degree = min_degree;
    1c16:	c0 92 f4 07 	sts	0x07F4, r12	; 0x8007f4 <init_degree>
    1c1a:	d0 92 f5 07 	sts	0x07F5, r13	; 0x8007f5 <init_degree+0x1>
    1c1e:	e0 92 f6 07 	sts	0x07F6, r14	; 0x8007f6 <init_degree+0x2>
    1c22:	f0 92 f7 07 	sts	0x07F7, r15	; 0x8007f7 <init_degree+0x3>
							printf("Initial degree: %d\r\n", (int)init_degree);
    1c26:	c7 01       	movw	r24, r14
    1c28:	b6 01       	movw	r22, r12
    1c2a:	0e 94 91 12 	call	0x2522	; 0x2522 <__fixsfsi>
    1c2e:	7f 93       	push	r23
    1c30:	6f 93       	push	r22
    1c32:	84 e5       	ldi	r24, 0x54	; 84
    1c34:	96 e0       	ldi	r25, 0x06	; 6
    1c36:	9f 93       	push	r25
    1c38:	8f 93       	push	r24
    1c3a:	0e 94 58 14 	call	0x28b0	; 0x28b0 <printf>
    1c3e:	0f 90       	pop	r0
    1c40:	0f 90       	pop	r0
    1c42:	0f 90       	pop	r0
    1c44:	0f 90       	pop	r0
						}
					}
					printf("Minimum degree: %d\r\n", (int)min_degree);
    1c46:	60 91 e9 07 	lds	r22, 0x07E9	; 0x8007e9 <min_degree>
    1c4a:	70 91 ea 07 	lds	r23, 0x07EA	; 0x8007ea <min_degree+0x1>
    1c4e:	80 91 eb 07 	lds	r24, 0x07EB	; 0x8007eb <min_degree+0x2>
    1c52:	90 91 ec 07 	lds	r25, 0x07EC	; 0x8007ec <min_degree+0x3>
    1c56:	0e 94 91 12 	call	0x2522	; 0x2522 <__fixsfsi>
    1c5a:	7f 93       	push	r23
    1c5c:	6f 93       	push	r22
    1c5e:	89 e6       	ldi	r24, 0x69	; 105
    1c60:	96 e0       	ldi	r25, 0x06	; 6
    1c62:	9f 93       	push	r25
    1c64:	8f 93       	push	r24
    1c66:	0e 94 58 14 	call	0x28b0	; 0x28b0 <printf>
					break;
    1c6a:	0f 90       	pop	r0
    1c6c:	0f 90       	pop	r0
    1c6e:	0f 90       	pop	r0
    1c70:	0f 90       	pop	r0
    1c72:	53 c3       	rjmp	.+1702   	; 0x231a <InterpretaComando+0x7d2>
				case 'M':
					if(comando[2]){
    1c74:	fc 01       	movw	r30, r24
    1c76:	22 81       	ldd	r18, Z+2	; 0x02
    1c78:	22 23       	and	r18, r18
    1c7a:	09 f4       	brne	.+2      	; 0x1c7e <InterpretaComando+0x136>
    1c7c:	57 c0       	rjmp	.+174    	; 0x1d2c <InterpretaComando+0x1e4>
						aux = atoi(&comando[2]);
    1c7e:	02 96       	adiw	r24, 0x02	; 2
    1c80:	0e 94 32 14 	call	0x2864	; 0x2864 <atoi>
						if (aux>min_degree && aux<=90.0){
    1c84:	bc 01       	movw	r22, r24
    1c86:	99 0f       	add	r25, r25
    1c88:	88 0b       	sbc	r24, r24
    1c8a:	99 0b       	sbc	r25, r25
    1c8c:	0e 94 c9 12 	call	0x2592	; 0x2592 <__floatsisf>
    1c90:	6b 01       	movw	r12, r22
    1c92:	7c 01       	movw	r14, r24
    1c94:	20 91 e9 07 	lds	r18, 0x07E9	; 0x8007e9 <min_degree>
    1c98:	30 91 ea 07 	lds	r19, 0x07EA	; 0x8007ea <min_degree+0x1>
    1c9c:	40 91 eb 07 	lds	r20, 0x07EB	; 0x8007eb <min_degree+0x2>
    1ca0:	50 91 ec 07 	lds	r21, 0x07EC	; 0x8007ec <min_degree+0x3>
    1ca4:	0e 94 79 13 	call	0x26f2	; 0x26f2 <__gesf2>
    1ca8:	18 16       	cp	r1, r24
    1caa:	94 f4       	brge	.+36     	; 0x1cd0 <InterpretaComando+0x188>
    1cac:	20 e0       	ldi	r18, 0x00	; 0
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	44 eb       	ldi	r20, 0xB4	; 180
    1cb2:	52 e4       	ldi	r21, 0x42	; 66
    1cb4:	c7 01       	movw	r24, r14
    1cb6:	b6 01       	movw	r22, r12
    1cb8:	0e 94 1a 12 	call	0x2434	; 0x2434 <__cmpsf2>
    1cbc:	18 16       	cp	r1, r24
    1cbe:	44 f0       	brlt	.+16     	; 0x1cd0 <InterpretaComando+0x188>
							max_degree = aux;
    1cc0:	c0 92 f8 07 	sts	0x07F8, r12	; 0x8007f8 <max_degree>
    1cc4:	d0 92 f9 07 	sts	0x07F9, r13	; 0x8007f9 <max_degree+0x1>
    1cc8:	e0 92 fa 07 	sts	0x07FA, r14	; 0x8007fa <max_degree+0x2>
    1ccc:	f0 92 fb 07 	sts	0x07FB, r15	; 0x8007fb <max_degree+0x3>
						}
						if (!(max_degree>=init_degree)){
    1cd0:	c0 90 f8 07 	lds	r12, 0x07F8	; 0x8007f8 <max_degree>
    1cd4:	d0 90 f9 07 	lds	r13, 0x07F9	; 0x8007f9 <max_degree+0x1>
    1cd8:	e0 90 fa 07 	lds	r14, 0x07FA	; 0x8007fa <max_degree+0x2>
    1cdc:	f0 90 fb 07 	lds	r15, 0x07FB	; 0x8007fb <max_degree+0x3>
    1ce0:	20 91 f4 07 	lds	r18, 0x07F4	; 0x8007f4 <init_degree>
    1ce4:	30 91 f5 07 	lds	r19, 0x07F5	; 0x8007f5 <init_degree+0x1>
    1ce8:	40 91 f6 07 	lds	r20, 0x07F6	; 0x8007f6 <init_degree+0x2>
    1cec:	50 91 f7 07 	lds	r21, 0x07F7	; 0x8007f7 <init_degree+0x3>
    1cf0:	c7 01       	movw	r24, r14
    1cf2:	b6 01       	movw	r22, r12
    1cf4:	0e 94 79 13 	call	0x26f2	; 0x26f2 <__gesf2>
    1cf8:	88 23       	and	r24, r24
    1cfa:	c4 f4       	brge	.+48     	; 0x1d2c <InterpretaComando+0x1e4>
							init_degree = max_degree;
    1cfc:	c0 92 f4 07 	sts	0x07F4, r12	; 0x8007f4 <init_degree>
    1d00:	d0 92 f5 07 	sts	0x07F5, r13	; 0x8007f5 <init_degree+0x1>
    1d04:	e0 92 f6 07 	sts	0x07F6, r14	; 0x8007f6 <init_degree+0x2>
    1d08:	f0 92 f7 07 	sts	0x07F7, r15	; 0x8007f7 <init_degree+0x3>
							printf("Initial degree: %d\r\n", (int)init_degree);
    1d0c:	c7 01       	movw	r24, r14
    1d0e:	b6 01       	movw	r22, r12
    1d10:	0e 94 91 12 	call	0x2522	; 0x2522 <__fixsfsi>
    1d14:	7f 93       	push	r23
    1d16:	6f 93       	push	r22
    1d18:	84 e5       	ldi	r24, 0x54	; 84
    1d1a:	96 e0       	ldi	r25, 0x06	; 6
    1d1c:	9f 93       	push	r25
    1d1e:	8f 93       	push	r24
    1d20:	0e 94 58 14 	call	0x28b0	; 0x28b0 <printf>
    1d24:	0f 90       	pop	r0
    1d26:	0f 90       	pop	r0
    1d28:	0f 90       	pop	r0
    1d2a:	0f 90       	pop	r0
						}
					}
					printf("Maximum degree: %d\r\n", (int)max_degree);
    1d2c:	60 91 f8 07 	lds	r22, 0x07F8	; 0x8007f8 <max_degree>
    1d30:	70 91 f9 07 	lds	r23, 0x07F9	; 0x8007f9 <max_degree+0x1>
    1d34:	80 91 fa 07 	lds	r24, 0x07FA	; 0x8007fa <max_degree+0x2>
    1d38:	90 91 fb 07 	lds	r25, 0x07FB	; 0x8007fb <max_degree+0x3>
    1d3c:	0e 94 91 12 	call	0x2522	; 0x2522 <__fixsfsi>
    1d40:	7f 93       	push	r23
    1d42:	6f 93       	push	r22
    1d44:	8e e7       	ldi	r24, 0x7E	; 126
    1d46:	96 e0       	ldi	r25, 0x06	; 6
    1d48:	9f 93       	push	r25
    1d4a:	8f 93       	push	r24
    1d4c:	0e 94 58 14 	call	0x28b0	; 0x28b0 <printf>
					break;
    1d50:	0f 90       	pop	r0
    1d52:	0f 90       	pop	r0
    1d54:	0f 90       	pop	r0
    1d56:	0f 90       	pop	r0
    1d58:	e0 c2       	rjmp	.+1472   	; 0x231a <InterpretaComando+0x7d2>
				case 'i':
					if(comando[2]){
    1d5a:	22 81       	ldd	r18, Z+2	; 0x02
    1d5c:	22 23       	and	r18, r18
    1d5e:	69 f1       	breq	.+90     	; 0x1dba <InterpretaComando+0x272>
						aux = atoi(&comando[2]);
    1d60:	02 96       	adiw	r24, 0x02	; 2
    1d62:	0e 94 32 14 	call	0x2864	; 0x2864 <atoi>
						if (aux<=max_degree && aux>=min_degree){
    1d66:	bc 01       	movw	r22, r24
    1d68:	99 0f       	add	r25, r25
    1d6a:	88 0b       	sbc	r24, r24
    1d6c:	99 0b       	sbc	r25, r25
    1d6e:	0e 94 c9 12 	call	0x2592	; 0x2592 <__floatsisf>
    1d72:	6b 01       	movw	r12, r22
    1d74:	7c 01       	movw	r14, r24
    1d76:	20 91 f8 07 	lds	r18, 0x07F8	; 0x8007f8 <max_degree>
    1d7a:	30 91 f9 07 	lds	r19, 0x07F9	; 0x8007f9 <max_degree+0x1>
    1d7e:	40 91 fa 07 	lds	r20, 0x07FA	; 0x8007fa <max_degree+0x2>
    1d82:	50 91 fb 07 	lds	r21, 0x07FB	; 0x8007fb <max_degree+0x3>
    1d86:	0e 94 1a 12 	call	0x2434	; 0x2434 <__cmpsf2>
    1d8a:	18 16       	cp	r1, r24
    1d8c:	b4 f0       	brlt	.+44     	; 0x1dba <InterpretaComando+0x272>
    1d8e:	20 91 e9 07 	lds	r18, 0x07E9	; 0x8007e9 <min_degree>
    1d92:	30 91 ea 07 	lds	r19, 0x07EA	; 0x8007ea <min_degree+0x1>
    1d96:	40 91 eb 07 	lds	r20, 0x07EB	; 0x8007eb <min_degree+0x2>
    1d9a:	50 91 ec 07 	lds	r21, 0x07EC	; 0x8007ec <min_degree+0x3>
    1d9e:	c7 01       	movw	r24, r14
    1da0:	b6 01       	movw	r22, r12
    1da2:	0e 94 79 13 	call	0x26f2	; 0x26f2 <__gesf2>
    1da6:	88 23       	and	r24, r24
    1da8:	44 f0       	brlt	.+16     	; 0x1dba <InterpretaComando+0x272>
							init_degree = aux;
    1daa:	c0 92 f4 07 	sts	0x07F4, r12	; 0x8007f4 <init_degree>
    1dae:	d0 92 f5 07 	sts	0x07F5, r13	; 0x8007f5 <init_degree+0x1>
    1db2:	e0 92 f6 07 	sts	0x07F6, r14	; 0x8007f6 <init_degree+0x2>
    1db6:	f0 92 f7 07 	sts	0x07F7, r15	; 0x8007f7 <init_degree+0x3>
						}
					}
					printf("Initial degree: %d\r\n", (int)init_degree);
    1dba:	60 91 f4 07 	lds	r22, 0x07F4	; 0x8007f4 <init_degree>
    1dbe:	70 91 f5 07 	lds	r23, 0x07F5	; 0x8007f5 <init_degree+0x1>
    1dc2:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <init_degree+0x2>
    1dc6:	90 91 f7 07 	lds	r25, 0x07F7	; 0x8007f7 <init_degree+0x3>
    1dca:	0e 94 91 12 	call	0x2522	; 0x2522 <__fixsfsi>
    1dce:	7f 93       	push	r23
    1dd0:	6f 93       	push	r22
    1dd2:	84 e5       	ldi	r24, 0x54	; 84
    1dd4:	96 e0       	ldi	r25, 0x06	; 6
    1dd6:	9f 93       	push	r25
    1dd8:	8f 93       	push	r24
    1dda:	0e 94 58 14 	call	0x28b0	; 0x28b0 <printf>
					break;
    1dde:	0f 90       	pop	r0
    1de0:	0f 90       	pop	r0
    1de2:	0f 90       	pop	r0
    1de4:	0f 90       	pop	r0
    1de6:	99 c2       	rjmp	.+1330   	; 0x231a <InterpretaComando+0x7d2>
				default:
					printf("The command wasn't recognized, try using the help command (:h).\r\n");
    1de8:	83 e9       	ldi	r24, 0x93	; 147
    1dea:	96 e0       	ldi	r25, 0x06	; 6
    1dec:	0e 94 6e 14 	call	0x28dc	; 0x28dc <puts>
					break;
    1df0:	94 c2       	rjmp	.+1320   	; 0x231a <InterpretaComando+0x7d2>
			}
			break;
		case 'f':
		case 'F':
			switch(comando[1]){
    1df2:	fc 01       	movw	r30, r24
    1df4:	21 81       	ldd	r18, Z+1	; 0x01
    1df6:	23 33       	cpi	r18, 0x33	; 51
    1df8:	09 f4       	brne	.+2      	; 0x1dfc <InterpretaComando+0x2b4>
    1dfa:	d0 c0       	rjmp	.+416    	; 0x1f9c <InterpretaComando+0x454>
    1dfc:	30 f4       	brcc	.+12     	; 0x1e0a <InterpretaComando+0x2c2>
    1dfe:	21 33       	cpi	r18, 0x31	; 49
    1e00:	59 f0       	breq	.+22     	; 0x1e18 <InterpretaComando+0x2d0>
    1e02:	22 33       	cpi	r18, 0x32	; 50
    1e04:	09 f4       	brne	.+2      	; 0x1e08 <InterpretaComando+0x2c0>
    1e06:	69 c0       	rjmp	.+210    	; 0x1eda <InterpretaComando+0x392>
    1e08:	ec c1       	rjmp	.+984    	; 0x21e2 <InterpretaComando+0x69a>
    1e0a:	24 33       	cpi	r18, 0x34	; 52
    1e0c:	09 f4       	brne	.+2      	; 0x1e10 <InterpretaComando+0x2c8>
    1e0e:	27 c1       	rjmp	.+590    	; 0x205e <InterpretaComando+0x516>
    1e10:	25 33       	cpi	r18, 0x35	; 53
    1e12:	09 f4       	brne	.+2      	; 0x1e16 <InterpretaComando+0x2ce>
    1e14:	85 c1       	rjmp	.+778    	; 0x2120 <InterpretaComando+0x5d8>
    1e16:	e5 c1       	rjmp	.+970    	; 0x21e2 <InterpretaComando+0x69a>
				case '1':
					if(comando[2]){
    1e18:	22 81       	ldd	r18, Z+2	; 0x02
    1e1a:	22 23       	and	r18, r18
    1e1c:	09 f4       	brne	.+2      	; 0x1e20 <InterpretaComando+0x2d8>
    1e1e:	58 c0       	rjmp	.+176    	; 0x1ed0 <InterpretaComando+0x388>
						aux = atoi(&comando[2]);
    1e20:	02 96       	adiw	r24, 0x02	; 2
    1e22:	0e 94 32 14 	call	0x2864	; 0x2864 <atoi>
    1e26:	ec 01       	movw	r28, r24
						if(aux>=min_degree && aux<=max_degree){
    1e28:	bc 01       	movw	r22, r24
    1e2a:	99 0f       	add	r25, r25
    1e2c:	88 0b       	sbc	r24, r24
    1e2e:	99 0b       	sbc	r25, r25
    1e30:	0e 94 c9 12 	call	0x2592	; 0x2592 <__floatsisf>
    1e34:	6b 01       	movw	r12, r22
    1e36:	7c 01       	movw	r14, r24
    1e38:	80 90 e9 07 	lds	r8, 0x07E9	; 0x8007e9 <min_degree>
    1e3c:	90 90 ea 07 	lds	r9, 0x07EA	; 0x8007ea <min_degree+0x1>
    1e40:	a0 90 eb 07 	lds	r10, 0x07EB	; 0x8007eb <min_degree+0x2>
    1e44:	b0 90 ec 07 	lds	r11, 0x07EC	; 0x8007ec <min_degree+0x3>
    1e48:	a5 01       	movw	r20, r10
    1e4a:	94 01       	movw	r18, r8
    1e4c:	0e 94 79 13 	call	0x26f2	; 0x26f2 <__gesf2>
    1e50:	88 23       	and	r24, r24
    1e52:	fc f0       	brlt	.+62     	; 0x1e92 <InterpretaComando+0x34a>
    1e54:	20 91 f8 07 	lds	r18, 0x07F8	; 0x8007f8 <max_degree>
    1e58:	30 91 f9 07 	lds	r19, 0x07F9	; 0x8007f9 <max_degree+0x1>
    1e5c:	40 91 fa 07 	lds	r20, 0x07FA	; 0x8007fa <max_degree+0x2>
    1e60:	50 91 fb 07 	lds	r21, 0x07FB	; 0x8007fb <max_degree+0x3>
    1e64:	c7 01       	movw	r24, r14
    1e66:	b6 01       	movw	r22, r12
    1e68:	0e 94 1a 12 	call	0x2434	; 0x2434 <__cmpsf2>
    1e6c:	18 16       	cp	r1, r24
    1e6e:	8c f0       	brlt	.+34     	; 0x1e92 <InterpretaComando+0x34a>
							printf("Finger 1, degree: %d\r\n", aux);
    1e70:	df 93       	push	r29
    1e72:	cf 93       	push	r28
    1e74:	84 ed       	ldi	r24, 0xD4	; 212
    1e76:	96 e0       	ldi	r25, 0x06	; 6
    1e78:	9f 93       	push	r25
    1e7a:	8f 93       	push	r24
    1e7c:	0e 94 58 14 	call	0x28b0	; 0x28b0 <printf>
							finger1_degree(aux);
    1e80:	c7 01       	movw	r24, r14
    1e82:	b6 01       	movw	r22, r12
    1e84:	0e 94 8b 01 	call	0x316	; 0x316 <finger1_degree>
    1e88:	0f 90       	pop	r0
    1e8a:	0f 90       	pop	r0
    1e8c:	0f 90       	pop	r0
    1e8e:	0f 90       	pop	r0
    1e90:	44 c2       	rjmp	.+1160   	; 0x231a <InterpretaComando+0x7d2>
						} else printf("Solo grados entre %d y %d\r\n",(int)min_degree,(int)max_degree);
    1e92:	60 91 f8 07 	lds	r22, 0x07F8	; 0x8007f8 <max_degree>
    1e96:	70 91 f9 07 	lds	r23, 0x07F9	; 0x8007f9 <max_degree+0x1>
    1e9a:	80 91 fa 07 	lds	r24, 0x07FA	; 0x8007fa <max_degree+0x2>
    1e9e:	90 91 fb 07 	lds	r25, 0x07FB	; 0x8007fb <max_degree+0x3>
    1ea2:	0e 94 91 12 	call	0x2522	; 0x2522 <__fixsfsi>
    1ea6:	7f 93       	push	r23
    1ea8:	6f 93       	push	r22
    1eaa:	c5 01       	movw	r24, r10
    1eac:	b4 01       	movw	r22, r8
    1eae:	0e 94 91 12 	call	0x2522	; 0x2522 <__fixsfsi>
    1eb2:	7f 93       	push	r23
    1eb4:	6f 93       	push	r22
    1eb6:	8b ee       	ldi	r24, 0xEB	; 235
    1eb8:	96 e0       	ldi	r25, 0x06	; 6
    1eba:	9f 93       	push	r25
    1ebc:	8f 93       	push	r24
    1ebe:	0e 94 58 14 	call	0x28b0	; 0x28b0 <printf>
    1ec2:	0f 90       	pop	r0
    1ec4:	0f 90       	pop	r0
    1ec6:	0f 90       	pop	r0
    1ec8:	0f 90       	pop	r0
    1eca:	0f 90       	pop	r0
    1ecc:	0f 90       	pop	r0
    1ece:	25 c2       	rjmp	.+1098   	; 0x231a <InterpretaComando+0x7d2>
						} else {
						get_degrees_TC1(1,0);
    1ed0:	60 e0       	ldi	r22, 0x00	; 0
    1ed2:	81 e0       	ldi	r24, 0x01	; 1
    1ed4:	0e 94 19 05 	call	0xa32	; 0xa32 <get_degrees_TC1>
    1ed8:	20 c2       	rjmp	.+1088   	; 0x231a <InterpretaComando+0x7d2>
					}
					break;
				case '2':
					if(comando[2]){
    1eda:	22 81       	ldd	r18, Z+2	; 0x02
    1edc:	22 23       	and	r18, r18
    1ede:	09 f4       	brne	.+2      	; 0x1ee2 <InterpretaComando+0x39a>
    1ee0:	58 c0       	rjmp	.+176    	; 0x1f92 <InterpretaComando+0x44a>
						aux = atoi(&comando[2]);
    1ee2:	02 96       	adiw	r24, 0x02	; 2
    1ee4:	0e 94 32 14 	call	0x2864	; 0x2864 <atoi>
    1ee8:	ec 01       	movw	r28, r24
						if(aux>=min_degree && aux<=max_degree){
    1eea:	bc 01       	movw	r22, r24
    1eec:	99 0f       	add	r25, r25
    1eee:	88 0b       	sbc	r24, r24
    1ef0:	99 0b       	sbc	r25, r25
    1ef2:	0e 94 c9 12 	call	0x2592	; 0x2592 <__floatsisf>
    1ef6:	6b 01       	movw	r12, r22
    1ef8:	7c 01       	movw	r14, r24
    1efa:	80 90 e9 07 	lds	r8, 0x07E9	; 0x8007e9 <min_degree>
    1efe:	90 90 ea 07 	lds	r9, 0x07EA	; 0x8007ea <min_degree+0x1>
    1f02:	a0 90 eb 07 	lds	r10, 0x07EB	; 0x8007eb <min_degree+0x2>
    1f06:	b0 90 ec 07 	lds	r11, 0x07EC	; 0x8007ec <min_degree+0x3>
    1f0a:	a5 01       	movw	r20, r10
    1f0c:	94 01       	movw	r18, r8
    1f0e:	0e 94 79 13 	call	0x26f2	; 0x26f2 <__gesf2>
    1f12:	88 23       	and	r24, r24
    1f14:	fc f0       	brlt	.+62     	; 0x1f54 <InterpretaComando+0x40c>
    1f16:	20 91 f8 07 	lds	r18, 0x07F8	; 0x8007f8 <max_degree>
    1f1a:	30 91 f9 07 	lds	r19, 0x07F9	; 0x8007f9 <max_degree+0x1>
    1f1e:	40 91 fa 07 	lds	r20, 0x07FA	; 0x8007fa <max_degree+0x2>
    1f22:	50 91 fb 07 	lds	r21, 0x07FB	; 0x8007fb <max_degree+0x3>
    1f26:	c7 01       	movw	r24, r14
    1f28:	b6 01       	movw	r22, r12
    1f2a:	0e 94 1a 12 	call	0x2434	; 0x2434 <__cmpsf2>
    1f2e:	18 16       	cp	r1, r24
    1f30:	8c f0       	brlt	.+34     	; 0x1f54 <InterpretaComando+0x40c>
							printf("Finger 2, degree: %d\r\n", aux);
    1f32:	df 93       	push	r29
    1f34:	cf 93       	push	r28
    1f36:	87 e0       	ldi	r24, 0x07	; 7
    1f38:	97 e0       	ldi	r25, 0x07	; 7
    1f3a:	9f 93       	push	r25
    1f3c:	8f 93       	push	r24
    1f3e:	0e 94 58 14 	call	0x28b0	; 0x28b0 <printf>
							finger2_degree(aux);
    1f42:	c7 01       	movw	r24, r14
    1f44:	b6 01       	movw	r22, r12
    1f46:	0e 94 9d 01 	call	0x33a	; 0x33a <finger2_degree>
    1f4a:	0f 90       	pop	r0
    1f4c:	0f 90       	pop	r0
    1f4e:	0f 90       	pop	r0
    1f50:	0f 90       	pop	r0
    1f52:	e3 c1       	rjmp	.+966    	; 0x231a <InterpretaComando+0x7d2>
						} else printf("Solo grados entre %d y %d\r\n",(int)min_degree,(int)max_degree);
    1f54:	60 91 f8 07 	lds	r22, 0x07F8	; 0x8007f8 <max_degree>
    1f58:	70 91 f9 07 	lds	r23, 0x07F9	; 0x8007f9 <max_degree+0x1>
    1f5c:	80 91 fa 07 	lds	r24, 0x07FA	; 0x8007fa <max_degree+0x2>
    1f60:	90 91 fb 07 	lds	r25, 0x07FB	; 0x8007fb <max_degree+0x3>
    1f64:	0e 94 91 12 	call	0x2522	; 0x2522 <__fixsfsi>
    1f68:	7f 93       	push	r23
    1f6a:	6f 93       	push	r22
    1f6c:	c5 01       	movw	r24, r10
    1f6e:	b4 01       	movw	r22, r8
    1f70:	0e 94 91 12 	call	0x2522	; 0x2522 <__fixsfsi>
    1f74:	7f 93       	push	r23
    1f76:	6f 93       	push	r22
    1f78:	8b ee       	ldi	r24, 0xEB	; 235
    1f7a:	96 e0       	ldi	r25, 0x06	; 6
    1f7c:	9f 93       	push	r25
    1f7e:	8f 93       	push	r24
    1f80:	0e 94 58 14 	call	0x28b0	; 0x28b0 <printf>
    1f84:	0f 90       	pop	r0
    1f86:	0f 90       	pop	r0
    1f88:	0f 90       	pop	r0
    1f8a:	0f 90       	pop	r0
    1f8c:	0f 90       	pop	r0
    1f8e:	0f 90       	pop	r0
    1f90:	c4 c1       	rjmp	.+904    	; 0x231a <InterpretaComando+0x7d2>
						} else {
						get_degrees_TC1(0,1);
    1f92:	61 e0       	ldi	r22, 0x01	; 1
    1f94:	80 e0       	ldi	r24, 0x00	; 0
    1f96:	0e 94 19 05 	call	0xa32	; 0xa32 <get_degrees_TC1>
    1f9a:	bf c1       	rjmp	.+894    	; 0x231a <InterpretaComando+0x7d2>
					}
					break;
				case '3':
					if(comando[2]){
    1f9c:	22 81       	ldd	r18, Z+2	; 0x02
    1f9e:	22 23       	and	r18, r18
    1fa0:	09 f4       	brne	.+2      	; 0x1fa4 <InterpretaComando+0x45c>
    1fa2:	58 c0       	rjmp	.+176    	; 0x2054 <InterpretaComando+0x50c>
						aux = atoi(&comando[2]);
    1fa4:	02 96       	adiw	r24, 0x02	; 2
    1fa6:	0e 94 32 14 	call	0x2864	; 0x2864 <atoi>
    1faa:	ec 01       	movw	r28, r24
						if(aux>=min_degree && aux<=max_degree){
    1fac:	bc 01       	movw	r22, r24
    1fae:	99 0f       	add	r25, r25
    1fb0:	88 0b       	sbc	r24, r24
    1fb2:	99 0b       	sbc	r25, r25
    1fb4:	0e 94 c9 12 	call	0x2592	; 0x2592 <__floatsisf>
    1fb8:	6b 01       	movw	r12, r22
    1fba:	7c 01       	movw	r14, r24
    1fbc:	80 90 e9 07 	lds	r8, 0x07E9	; 0x8007e9 <min_degree>
    1fc0:	90 90 ea 07 	lds	r9, 0x07EA	; 0x8007ea <min_degree+0x1>
    1fc4:	a0 90 eb 07 	lds	r10, 0x07EB	; 0x8007eb <min_degree+0x2>
    1fc8:	b0 90 ec 07 	lds	r11, 0x07EC	; 0x8007ec <min_degree+0x3>
    1fcc:	a5 01       	movw	r20, r10
    1fce:	94 01       	movw	r18, r8
    1fd0:	0e 94 79 13 	call	0x26f2	; 0x26f2 <__gesf2>
    1fd4:	88 23       	and	r24, r24
    1fd6:	fc f0       	brlt	.+62     	; 0x2016 <InterpretaComando+0x4ce>
    1fd8:	20 91 f8 07 	lds	r18, 0x07F8	; 0x8007f8 <max_degree>
    1fdc:	30 91 f9 07 	lds	r19, 0x07F9	; 0x8007f9 <max_degree+0x1>
    1fe0:	40 91 fa 07 	lds	r20, 0x07FA	; 0x8007fa <max_degree+0x2>
    1fe4:	50 91 fb 07 	lds	r21, 0x07FB	; 0x8007fb <max_degree+0x3>
    1fe8:	c7 01       	movw	r24, r14
    1fea:	b6 01       	movw	r22, r12
    1fec:	0e 94 1a 12 	call	0x2434	; 0x2434 <__cmpsf2>
    1ff0:	18 16       	cp	r1, r24
    1ff2:	8c f0       	brlt	.+34     	; 0x2016 <InterpretaComando+0x4ce>
							printf("Finger 3, degree: %d\r\n", aux);
    1ff4:	df 93       	push	r29
    1ff6:	cf 93       	push	r28
    1ff8:	8e e1       	ldi	r24, 0x1E	; 30
    1ffa:	97 e0       	ldi	r25, 0x07	; 7
    1ffc:	9f 93       	push	r25
    1ffe:	8f 93       	push	r24
    2000:	0e 94 58 14 	call	0x28b0	; 0x28b0 <printf>
							finger3_degree(aux);
    2004:	c7 01       	movw	r24, r14
    2006:	b6 01       	movw	r22, r12
    2008:	0e 94 af 01 	call	0x35e	; 0x35e <finger3_degree>
    200c:	0f 90       	pop	r0
    200e:	0f 90       	pop	r0
    2010:	0f 90       	pop	r0
    2012:	0f 90       	pop	r0
    2014:	82 c1       	rjmp	.+772    	; 0x231a <InterpretaComando+0x7d2>
						} else printf("Solo grados entre %d y %d\r\n",(int)min_degree,(int)max_degree);
    2016:	60 91 f8 07 	lds	r22, 0x07F8	; 0x8007f8 <max_degree>
    201a:	70 91 f9 07 	lds	r23, 0x07F9	; 0x8007f9 <max_degree+0x1>
    201e:	80 91 fa 07 	lds	r24, 0x07FA	; 0x8007fa <max_degree+0x2>
    2022:	90 91 fb 07 	lds	r25, 0x07FB	; 0x8007fb <max_degree+0x3>
    2026:	0e 94 91 12 	call	0x2522	; 0x2522 <__fixsfsi>
    202a:	7f 93       	push	r23
    202c:	6f 93       	push	r22
    202e:	c5 01       	movw	r24, r10
    2030:	b4 01       	movw	r22, r8
    2032:	0e 94 91 12 	call	0x2522	; 0x2522 <__fixsfsi>
    2036:	7f 93       	push	r23
    2038:	6f 93       	push	r22
    203a:	8b ee       	ldi	r24, 0xEB	; 235
    203c:	96 e0       	ldi	r25, 0x06	; 6
    203e:	9f 93       	push	r25
    2040:	8f 93       	push	r24
    2042:	0e 94 58 14 	call	0x28b0	; 0x28b0 <printf>
    2046:	0f 90       	pop	r0
    2048:	0f 90       	pop	r0
    204a:	0f 90       	pop	r0
    204c:	0f 90       	pop	r0
    204e:	0f 90       	pop	r0
    2050:	0f 90       	pop	r0
    2052:	63 c1       	rjmp	.+710    	; 0x231a <InterpretaComando+0x7d2>
						}else {
						get_degrees_TC0(1,0);
    2054:	60 e0       	ldi	r22, 0x00	; 0
    2056:	81 e0       	ldi	r24, 0x01	; 1
    2058:	0e 94 4f 04 	call	0x89e	; 0x89e <get_degrees_TC0>
    205c:	5e c1       	rjmp	.+700    	; 0x231a <InterpretaComando+0x7d2>
					}
					break;
				case '4':
					if(comando[2]){
    205e:	22 81       	ldd	r18, Z+2	; 0x02
    2060:	22 23       	and	r18, r18
    2062:	09 f4       	brne	.+2      	; 0x2066 <InterpretaComando+0x51e>
    2064:	58 c0       	rjmp	.+176    	; 0x2116 <InterpretaComando+0x5ce>
						aux = atoi(&comando[2]);
    2066:	02 96       	adiw	r24, 0x02	; 2
    2068:	0e 94 32 14 	call	0x2864	; 0x2864 <atoi>
    206c:	ec 01       	movw	r28, r24
						if(aux>=min_degree && aux<=max_degree){
    206e:	bc 01       	movw	r22, r24
    2070:	99 0f       	add	r25, r25
    2072:	88 0b       	sbc	r24, r24
    2074:	99 0b       	sbc	r25, r25
    2076:	0e 94 c9 12 	call	0x2592	; 0x2592 <__floatsisf>
    207a:	6b 01       	movw	r12, r22
    207c:	7c 01       	movw	r14, r24
    207e:	80 90 e9 07 	lds	r8, 0x07E9	; 0x8007e9 <min_degree>
    2082:	90 90 ea 07 	lds	r9, 0x07EA	; 0x8007ea <min_degree+0x1>
    2086:	a0 90 eb 07 	lds	r10, 0x07EB	; 0x8007eb <min_degree+0x2>
    208a:	b0 90 ec 07 	lds	r11, 0x07EC	; 0x8007ec <min_degree+0x3>
    208e:	a5 01       	movw	r20, r10
    2090:	94 01       	movw	r18, r8
    2092:	0e 94 79 13 	call	0x26f2	; 0x26f2 <__gesf2>
    2096:	88 23       	and	r24, r24
    2098:	fc f0       	brlt	.+62     	; 0x20d8 <InterpretaComando+0x590>
    209a:	20 91 f8 07 	lds	r18, 0x07F8	; 0x8007f8 <max_degree>
    209e:	30 91 f9 07 	lds	r19, 0x07F9	; 0x8007f9 <max_degree+0x1>
    20a2:	40 91 fa 07 	lds	r20, 0x07FA	; 0x8007fa <max_degree+0x2>
    20a6:	50 91 fb 07 	lds	r21, 0x07FB	; 0x8007fb <max_degree+0x3>
    20aa:	c7 01       	movw	r24, r14
    20ac:	b6 01       	movw	r22, r12
    20ae:	0e 94 1a 12 	call	0x2434	; 0x2434 <__cmpsf2>
    20b2:	18 16       	cp	r1, r24
    20b4:	8c f0       	brlt	.+34     	; 0x20d8 <InterpretaComando+0x590>
							printf("Finger 4, degree: %d\r\n", aux);
    20b6:	df 93       	push	r29
    20b8:	cf 93       	push	r28
    20ba:	85 e3       	ldi	r24, 0x35	; 53
    20bc:	97 e0       	ldi	r25, 0x07	; 7
    20be:	9f 93       	push	r25
    20c0:	8f 93       	push	r24
    20c2:	0e 94 58 14 	call	0x28b0	; 0x28b0 <printf>
							finger4_degree(aux);
    20c6:	c7 01       	movw	r24, r14
    20c8:	b6 01       	movw	r22, r12
    20ca:	0e 94 c1 01 	call	0x382	; 0x382 <finger4_degree>
    20ce:	0f 90       	pop	r0
    20d0:	0f 90       	pop	r0
    20d2:	0f 90       	pop	r0
    20d4:	0f 90       	pop	r0
    20d6:	21 c1       	rjmp	.+578    	; 0x231a <InterpretaComando+0x7d2>
						} else printf("Solo grados entre %d y %d\r\n",(int)min_degree,(int)max_degree);
    20d8:	60 91 f8 07 	lds	r22, 0x07F8	; 0x8007f8 <max_degree>
    20dc:	70 91 f9 07 	lds	r23, 0x07F9	; 0x8007f9 <max_degree+0x1>
    20e0:	80 91 fa 07 	lds	r24, 0x07FA	; 0x8007fa <max_degree+0x2>
    20e4:	90 91 fb 07 	lds	r25, 0x07FB	; 0x8007fb <max_degree+0x3>
    20e8:	0e 94 91 12 	call	0x2522	; 0x2522 <__fixsfsi>
    20ec:	7f 93       	push	r23
    20ee:	6f 93       	push	r22
    20f0:	c5 01       	movw	r24, r10
    20f2:	b4 01       	movw	r22, r8
    20f4:	0e 94 91 12 	call	0x2522	; 0x2522 <__fixsfsi>
    20f8:	7f 93       	push	r23
    20fa:	6f 93       	push	r22
    20fc:	8b ee       	ldi	r24, 0xEB	; 235
    20fe:	96 e0       	ldi	r25, 0x06	; 6
    2100:	9f 93       	push	r25
    2102:	8f 93       	push	r24
    2104:	0e 94 58 14 	call	0x28b0	; 0x28b0 <printf>
    2108:	0f 90       	pop	r0
    210a:	0f 90       	pop	r0
    210c:	0f 90       	pop	r0
    210e:	0f 90       	pop	r0
    2110:	0f 90       	pop	r0
    2112:	0f 90       	pop	r0
    2114:	02 c1       	rjmp	.+516    	; 0x231a <InterpretaComando+0x7d2>
						}else {
						get_degrees_TC0(0,1);
    2116:	61 e0       	ldi	r22, 0x01	; 1
    2118:	80 e0       	ldi	r24, 0x00	; 0
    211a:	0e 94 4f 04 	call	0x89e	; 0x89e <get_degrees_TC0>
    211e:	fd c0       	rjmp	.+506    	; 0x231a <InterpretaComando+0x7d2>
					}
					break;
				case '5':
					if(comando[2]){
    2120:	22 81       	ldd	r18, Z+2	; 0x02
    2122:	22 23       	and	r18, r18
    2124:	09 f4       	brne	.+2      	; 0x2128 <InterpretaComando+0x5e0>
    2126:	58 c0       	rjmp	.+176    	; 0x21d8 <InterpretaComando+0x690>
						aux = atoi(&comando[2]);
    2128:	02 96       	adiw	r24, 0x02	; 2
    212a:	0e 94 32 14 	call	0x2864	; 0x2864 <atoi>
    212e:	ec 01       	movw	r28, r24
						if(aux>=min_degree && aux<=max_degree){
    2130:	bc 01       	movw	r22, r24
    2132:	99 0f       	add	r25, r25
    2134:	88 0b       	sbc	r24, r24
    2136:	99 0b       	sbc	r25, r25
    2138:	0e 94 c9 12 	call	0x2592	; 0x2592 <__floatsisf>
    213c:	6b 01       	movw	r12, r22
    213e:	7c 01       	movw	r14, r24
    2140:	80 90 e9 07 	lds	r8, 0x07E9	; 0x8007e9 <min_degree>
    2144:	90 90 ea 07 	lds	r9, 0x07EA	; 0x8007ea <min_degree+0x1>
    2148:	a0 90 eb 07 	lds	r10, 0x07EB	; 0x8007eb <min_degree+0x2>
    214c:	b0 90 ec 07 	lds	r11, 0x07EC	; 0x8007ec <min_degree+0x3>
    2150:	a5 01       	movw	r20, r10
    2152:	94 01       	movw	r18, r8
    2154:	0e 94 79 13 	call	0x26f2	; 0x26f2 <__gesf2>
    2158:	88 23       	and	r24, r24
    215a:	fc f0       	brlt	.+62     	; 0x219a <InterpretaComando+0x652>
    215c:	20 91 f8 07 	lds	r18, 0x07F8	; 0x8007f8 <max_degree>
    2160:	30 91 f9 07 	lds	r19, 0x07F9	; 0x8007f9 <max_degree+0x1>
    2164:	40 91 fa 07 	lds	r20, 0x07FA	; 0x8007fa <max_degree+0x2>
    2168:	50 91 fb 07 	lds	r21, 0x07FB	; 0x8007fb <max_degree+0x3>
    216c:	c7 01       	movw	r24, r14
    216e:	b6 01       	movw	r22, r12
    2170:	0e 94 1a 12 	call	0x2434	; 0x2434 <__cmpsf2>
    2174:	18 16       	cp	r1, r24
    2176:	8c f0       	brlt	.+34     	; 0x219a <InterpretaComando+0x652>
							printf("Finger 5, degree: %d\r\n", aux);
    2178:	df 93       	push	r29
    217a:	cf 93       	push	r28
    217c:	8c e4       	ldi	r24, 0x4C	; 76
    217e:	97 e0       	ldi	r25, 0x07	; 7
    2180:	9f 93       	push	r25
    2182:	8f 93       	push	r24
    2184:	0e 94 58 14 	call	0x28b0	; 0x28b0 <printf>
							finger5_degree(aux);
    2188:	c7 01       	movw	r24, r14
    218a:	b6 01       	movw	r22, r12
    218c:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <finger5_degree>
    2190:	0f 90       	pop	r0
    2192:	0f 90       	pop	r0
    2194:	0f 90       	pop	r0
    2196:	0f 90       	pop	r0
    2198:	c0 c0       	rjmp	.+384    	; 0x231a <InterpretaComando+0x7d2>
						} else printf("Solo grados entre %d y %d\r\n",(int)min_degree,(int)max_degree);
    219a:	60 91 f8 07 	lds	r22, 0x07F8	; 0x8007f8 <max_degree>
    219e:	70 91 f9 07 	lds	r23, 0x07F9	; 0x8007f9 <max_degree+0x1>
    21a2:	80 91 fa 07 	lds	r24, 0x07FA	; 0x8007fa <max_degree+0x2>
    21a6:	90 91 fb 07 	lds	r25, 0x07FB	; 0x8007fb <max_degree+0x3>
    21aa:	0e 94 91 12 	call	0x2522	; 0x2522 <__fixsfsi>
    21ae:	7f 93       	push	r23
    21b0:	6f 93       	push	r22
    21b2:	c5 01       	movw	r24, r10
    21b4:	b4 01       	movw	r22, r8
    21b6:	0e 94 91 12 	call	0x2522	; 0x2522 <__fixsfsi>
    21ba:	7f 93       	push	r23
    21bc:	6f 93       	push	r22
    21be:	8b ee       	ldi	r24, 0xEB	; 235
    21c0:	96 e0       	ldi	r25, 0x06	; 6
    21c2:	9f 93       	push	r25
    21c4:	8f 93       	push	r24
    21c6:	0e 94 58 14 	call	0x28b0	; 0x28b0 <printf>
    21ca:	0f 90       	pop	r0
    21cc:	0f 90       	pop	r0
    21ce:	0f 90       	pop	r0
    21d0:	0f 90       	pop	r0
    21d2:	0f 90       	pop	r0
    21d4:	0f 90       	pop	r0
    21d6:	a1 c0       	rjmp	.+322    	; 0x231a <InterpretaComando+0x7d2>
						}else {
						get_degrees_TC2(1,0);
    21d8:	60 e0       	ldi	r22, 0x00	; 0
    21da:	81 e0       	ldi	r24, 0x01	; 1
    21dc:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <get_degrees_TC2>
    21e0:	9c c0       	rjmp	.+312    	; 0x231a <InterpretaComando+0x7d2>
					}
					break;
				default:
					printf("Error\r\n");
    21e2:	83 e6       	ldi	r24, 0x63	; 99
    21e4:	97 e0       	ldi	r25, 0x07	; 7
    21e6:	0e 94 6e 14 	call	0x28dc	; 0x28dc <puts>
					break;
    21ea:	97 c0       	rjmp	.+302    	; 0x231a <InterpretaComando+0x7d2>
			}
			break;
		case 'H':
			if(comando[1]){
    21ec:	dc 01       	movw	r26, r24
    21ee:	11 96       	adiw	r26, 0x01	; 1
    21f0:	2c 91       	ld	r18, X
    21f2:	22 23       	and	r18, r18
    21f4:	09 f4       	brne	.+2      	; 0x21f8 <InterpretaComando+0x6b0>
    21f6:	58 c0       	rjmp	.+176    	; 0x22a8 <InterpretaComando+0x760>
				aux = atoi(&comando[1]);
    21f8:	01 96       	adiw	r24, 0x01	; 1
    21fa:	0e 94 32 14 	call	0x2864	; 0x2864 <atoi>
    21fe:	ec 01       	movw	r28, r24
				if(aux>=min_degree && aux<=max_degree){
    2200:	bc 01       	movw	r22, r24
    2202:	99 0f       	add	r25, r25
    2204:	88 0b       	sbc	r24, r24
    2206:	99 0b       	sbc	r25, r25
    2208:	0e 94 c9 12 	call	0x2592	; 0x2592 <__floatsisf>
    220c:	6b 01       	movw	r12, r22
    220e:	7c 01       	movw	r14, r24
    2210:	80 90 e9 07 	lds	r8, 0x07E9	; 0x8007e9 <min_degree>
    2214:	90 90 ea 07 	lds	r9, 0x07EA	; 0x8007ea <min_degree+0x1>
    2218:	a0 90 eb 07 	lds	r10, 0x07EB	; 0x8007eb <min_degree+0x2>
    221c:	b0 90 ec 07 	lds	r11, 0x07EC	; 0x8007ec <min_degree+0x3>
    2220:	a5 01       	movw	r20, r10
    2222:	94 01       	movw	r18, r8
    2224:	0e 94 79 13 	call	0x26f2	; 0x26f2 <__gesf2>
    2228:	88 23       	and	r24, r24
    222a:	fc f0       	brlt	.+62     	; 0x226a <InterpretaComando+0x722>
    222c:	20 91 f8 07 	lds	r18, 0x07F8	; 0x8007f8 <max_degree>
    2230:	30 91 f9 07 	lds	r19, 0x07F9	; 0x8007f9 <max_degree+0x1>
    2234:	40 91 fa 07 	lds	r20, 0x07FA	; 0x8007fa <max_degree+0x2>
    2238:	50 91 fb 07 	lds	r21, 0x07FB	; 0x8007fb <max_degree+0x3>
    223c:	c7 01       	movw	r24, r14
    223e:	b6 01       	movw	r22, r12
    2240:	0e 94 1a 12 	call	0x2434	; 0x2434 <__cmpsf2>
    2244:	18 16       	cp	r1, r24
    2246:	8c f0       	brlt	.+34     	; 0x226a <InterpretaComando+0x722>
					hand_degree(aux);
    2248:	c7 01       	movw	r24, r14
    224a:	b6 01       	movw	r22, r12
    224c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <hand_degree>
					printf("Hand degree %d\r\n",aux);
    2250:	df 93       	push	r29
    2252:	cf 93       	push	r28
    2254:	8a e6       	ldi	r24, 0x6A	; 106
    2256:	97 e0       	ldi	r25, 0x07	; 7
    2258:	9f 93       	push	r25
    225a:	8f 93       	push	r24
    225c:	0e 94 58 14 	call	0x28b0	; 0x28b0 <printf>
    2260:	0f 90       	pop	r0
    2262:	0f 90       	pop	r0
    2264:	0f 90       	pop	r0
    2266:	0f 90       	pop	r0
    2268:	58 c0       	rjmp	.+176    	; 0x231a <InterpretaComando+0x7d2>
				} else printf("Solo grados entre %d y %d\r\n",(int)min_degree,(int)max_degree);
    226a:	60 91 f8 07 	lds	r22, 0x07F8	; 0x8007f8 <max_degree>
    226e:	70 91 f9 07 	lds	r23, 0x07F9	; 0x8007f9 <max_degree+0x1>
    2272:	80 91 fa 07 	lds	r24, 0x07FA	; 0x8007fa <max_degree+0x2>
    2276:	90 91 fb 07 	lds	r25, 0x07FB	; 0x8007fb <max_degree+0x3>
    227a:	0e 94 91 12 	call	0x2522	; 0x2522 <__fixsfsi>
    227e:	7f 93       	push	r23
    2280:	6f 93       	push	r22
    2282:	c5 01       	movw	r24, r10
    2284:	b4 01       	movw	r22, r8
    2286:	0e 94 91 12 	call	0x2522	; 0x2522 <__fixsfsi>
    228a:	7f 93       	push	r23
    228c:	6f 93       	push	r22
    228e:	8b ee       	ldi	r24, 0xEB	; 235
    2290:	96 e0       	ldi	r25, 0x06	; 6
    2292:	9f 93       	push	r25
    2294:	8f 93       	push	r24
    2296:	0e 94 58 14 	call	0x28b0	; 0x28b0 <printf>
    229a:	0f 90       	pop	r0
    229c:	0f 90       	pop	r0
    229e:	0f 90       	pop	r0
    22a0:	0f 90       	pop	r0
    22a2:	0f 90       	pop	r0
    22a4:	0f 90       	pop	r0
    22a6:	39 c0       	rjmp	.+114    	; 0x231a <InterpretaComando+0x7d2>
			} else {
				printf("Comando incompleto. Verificar ayuda (:h)\r\n");
    22a8:	8b e7       	ldi	r24, 0x7B	; 123
    22aa:	97 e0       	ldi	r25, 0x07	; 7
    22ac:	0e 94 6e 14 	call	0x28dc	; 0x28dc <puts>
    22b0:	34 c0       	rjmp	.+104    	; 0x231a <InterpretaComando+0x7d2>
		// 			printf("STOP\r\n");
		// 			move = 0;
		// 			break;
		case 'c':
		case 'C':
			printf("Closing hand...\r\n");
    22b2:	85 ea       	ldi	r24, 0xA5	; 165
    22b4:	97 e0       	ldi	r25, 0x07	; 7
    22b6:	0e 94 6e 14 	call	0x28dc	; 0x28dc <puts>
			hand_degree(min_degree);
    22ba:	60 91 e9 07 	lds	r22, 0x07E9	; 0x8007e9 <min_degree>
    22be:	70 91 ea 07 	lds	r23, 0x07EA	; 0x8007ea <min_degree+0x1>
    22c2:	80 91 eb 07 	lds	r24, 0x07EB	; 0x8007eb <min_degree+0x2>
    22c6:	90 91 ec 07 	lds	r25, 0x07EC	; 0x8007ec <min_degree+0x3>
    22ca:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <hand_degree>
			break;
    22ce:	25 c0       	rjmp	.+74     	; 0x231a <InterpretaComando+0x7d2>
		case 'o':
		case 'O':
			printf("Opening hand...\r\n");
    22d0:	86 eb       	ldi	r24, 0xB6	; 182
    22d2:	97 e0       	ldi	r25, 0x07	; 7
    22d4:	0e 94 6e 14 	call	0x28dc	; 0x28dc <puts>
			hand_degree(max_degree);
    22d8:	60 91 f8 07 	lds	r22, 0x07F8	; 0x8007f8 <max_degree>
    22dc:	70 91 f9 07 	lds	r23, 0x07F9	; 0x8007f9 <max_degree+0x1>
    22e0:	80 91 fa 07 	lds	r24, 0x07FA	; 0x8007fa <max_degree+0x2>
    22e4:	90 91 fb 07 	lds	r25, 0x07FB	; 0x8007fb <max_degree+0x3>
    22e8:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <hand_degree>
			break;
    22ec:	16 c0       	rjmp	.+44     	; 0x231a <InterpretaComando+0x7d2>
		case 'r':
		case 'R':
			printf("Reset to initial position.\r\n");
    22ee:	87 ec       	ldi	r24, 0xC7	; 199
    22f0:	97 e0       	ldi	r25, 0x07	; 7
    22f2:	0e 94 6e 14 	call	0x28dc	; 0x28dc <puts>
			hand_degree(init_degree);
    22f6:	60 91 f4 07 	lds	r22, 0x07F4	; 0x8007f4 <init_degree>
    22fa:	70 91 f5 07 	lds	r23, 0x07F5	; 0x8007f5 <init_degree+0x1>
    22fe:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <init_degree+0x2>
    2302:	90 91 f7 07 	lds	r25, 0x07F7	; 0x8007f7 <init_degree+0x3>
    2306:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <hand_degree>
			break;
    230a:	07 c0       	rjmp	.+14     	; 0x231a <InterpretaComando+0x7d2>
		case 'h':
			help();
    230c:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <help>
			break;
    2310:	04 c0       	rjmp	.+8      	; 0x231a <InterpretaComando+0x7d2>
		default:
			printf("The command wasn't recognized, try using the help command (:h).\r\n");
    2312:	83 e9       	ldi	r24, 0x93	; 147
    2314:	96 e0       	ldi	r25, 0x06	; 6
    2316:	0e 94 6e 14 	call	0x28dc	; 0x28dc <puts>
			break;
	}
}
    231a:	df 91       	pop	r29
    231c:	cf 91       	pop	r28
    231e:	ff 90       	pop	r15
    2320:	ef 90       	pop	r14
    2322:	df 90       	pop	r13
    2324:	cf 90       	pop	r12
    2326:	bf 90       	pop	r11
    2328:	af 90       	pop	r10
    232a:	9f 90       	pop	r9
    232c:	8f 90       	pop	r8
    232e:	08 95       	ret

00002330 <main>:


int main(void)
{
	// Configuracion de las interrupciones externas INT0
	configuracion_INT0(INT0_flancoSubida);
    2330:	83 e0       	ldi	r24, 0x03	; 3
    2332:	0e 94 95 00 	call	0x12a	; 0x12a <configuracion_INT0>
	
	// Configuracion de la UART
	UART_init(BAUD,1,0);	// Define baudrate, habilita interrupciones por Rx pero no por Tx
    2336:	20 e0       	ldi	r18, 0x00	; 0
    2338:	41 e0       	ldi	r20, 0x01	; 1
    233a:	60 e8       	ldi	r22, 0x80	; 128
    233c:	75 e2       	ldi	r23, 0x25	; 37
    233e:	80 e0       	ldi	r24, 0x00	; 0
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	0e 94 93 0c 	call	0x1926	; 0x1926 <UART_init>
	
	// Configuracion de I2C slave
	I2C_init_slave(SLA, INTER_ON);
    2346:	61 e0       	ldi	r22, 0x01	; 1
    2348:	80 e2       	ldi	r24, 0x20	; 32
    234a:	0e 94 da 01 	call	0x3b4	; 0x3b4 <I2C_init_slave>
	
	// Iniciar mano en posicion inicial
	init_hand();
    234e:	0e 94 11 01 	call	0x222	; 0x222 <init_hand>
	
	sei();		// Habilitacion de interrupciones globales
    2352:	78 94       	sei
	
	help();		// Muestra la guia de los comandos
    2354:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <help>
    2358:	ff cf       	rjmp	.-2      	; 0x2358 <main+0x28>

0000235a <__subsf3>:
    235a:	50 58       	subi	r21, 0x80	; 128

0000235c <__addsf3>:
    235c:	bb 27       	eor	r27, r27
    235e:	aa 27       	eor	r26, r26
    2360:	0e 94 c5 11 	call	0x238a	; 0x238a <__addsf3x>
    2364:	0c 94 3f 13 	jmp	0x267e	; 0x267e <__fp_round>
    2368:	0e 94 31 13 	call	0x2662	; 0x2662 <__fp_pscA>
    236c:	38 f0       	brcs	.+14     	; 0x237c <__addsf3+0x20>
    236e:	0e 94 38 13 	call	0x2670	; 0x2670 <__fp_pscB>
    2372:	20 f0       	brcs	.+8      	; 0x237c <__addsf3+0x20>
    2374:	39 f4       	brne	.+14     	; 0x2384 <__addsf3+0x28>
    2376:	9f 3f       	cpi	r25, 0xFF	; 255
    2378:	19 f4       	brne	.+6      	; 0x2380 <__addsf3+0x24>
    237a:	26 f4       	brtc	.+8      	; 0x2384 <__addsf3+0x28>
    237c:	0c 94 2e 13 	jmp	0x265c	; 0x265c <__fp_nan>
    2380:	0e f4       	brtc	.+2      	; 0x2384 <__addsf3+0x28>
    2382:	e0 95       	com	r30
    2384:	e7 fb       	bst	r30, 7
    2386:	0c 94 28 13 	jmp	0x2650	; 0x2650 <__fp_inf>

0000238a <__addsf3x>:
    238a:	e9 2f       	mov	r30, r25
    238c:	0e 94 50 13 	call	0x26a0	; 0x26a0 <__fp_split3>
    2390:	58 f3       	brcs	.-42     	; 0x2368 <__addsf3+0xc>
    2392:	ba 17       	cp	r27, r26
    2394:	62 07       	cpc	r22, r18
    2396:	73 07       	cpc	r23, r19
    2398:	84 07       	cpc	r24, r20
    239a:	95 07       	cpc	r25, r21
    239c:	20 f0       	brcs	.+8      	; 0x23a6 <__addsf3x+0x1c>
    239e:	79 f4       	brne	.+30     	; 0x23be <__addsf3x+0x34>
    23a0:	a6 f5       	brtc	.+104    	; 0x240a <__addsf3x+0x80>
    23a2:	0c 94 72 13 	jmp	0x26e4	; 0x26e4 <__fp_zero>
    23a6:	0e f4       	brtc	.+2      	; 0x23aa <__addsf3x+0x20>
    23a8:	e0 95       	com	r30
    23aa:	0b 2e       	mov	r0, r27
    23ac:	ba 2f       	mov	r27, r26
    23ae:	a0 2d       	mov	r26, r0
    23b0:	0b 01       	movw	r0, r22
    23b2:	b9 01       	movw	r22, r18
    23b4:	90 01       	movw	r18, r0
    23b6:	0c 01       	movw	r0, r24
    23b8:	ca 01       	movw	r24, r20
    23ba:	a0 01       	movw	r20, r0
    23bc:	11 24       	eor	r1, r1
    23be:	ff 27       	eor	r31, r31
    23c0:	59 1b       	sub	r21, r25
    23c2:	99 f0       	breq	.+38     	; 0x23ea <__addsf3x+0x60>
    23c4:	59 3f       	cpi	r21, 0xF9	; 249
    23c6:	50 f4       	brcc	.+20     	; 0x23dc <__addsf3x+0x52>
    23c8:	50 3e       	cpi	r21, 0xE0	; 224
    23ca:	68 f1       	brcs	.+90     	; 0x2426 <__addsf3x+0x9c>
    23cc:	1a 16       	cp	r1, r26
    23ce:	f0 40       	sbci	r31, 0x00	; 0
    23d0:	a2 2f       	mov	r26, r18
    23d2:	23 2f       	mov	r18, r19
    23d4:	34 2f       	mov	r19, r20
    23d6:	44 27       	eor	r20, r20
    23d8:	58 5f       	subi	r21, 0xF8	; 248
    23da:	f3 cf       	rjmp	.-26     	; 0x23c2 <__addsf3x+0x38>
    23dc:	46 95       	lsr	r20
    23de:	37 95       	ror	r19
    23e0:	27 95       	ror	r18
    23e2:	a7 95       	ror	r26
    23e4:	f0 40       	sbci	r31, 0x00	; 0
    23e6:	53 95       	inc	r21
    23e8:	c9 f7       	brne	.-14     	; 0x23dc <__addsf3x+0x52>
    23ea:	7e f4       	brtc	.+30     	; 0x240a <__addsf3x+0x80>
    23ec:	1f 16       	cp	r1, r31
    23ee:	ba 0b       	sbc	r27, r26
    23f0:	62 0b       	sbc	r22, r18
    23f2:	73 0b       	sbc	r23, r19
    23f4:	84 0b       	sbc	r24, r20
    23f6:	ba f0       	brmi	.+46     	; 0x2426 <__addsf3x+0x9c>
    23f8:	91 50       	subi	r25, 0x01	; 1
    23fa:	a1 f0       	breq	.+40     	; 0x2424 <__addsf3x+0x9a>
    23fc:	ff 0f       	add	r31, r31
    23fe:	bb 1f       	adc	r27, r27
    2400:	66 1f       	adc	r22, r22
    2402:	77 1f       	adc	r23, r23
    2404:	88 1f       	adc	r24, r24
    2406:	c2 f7       	brpl	.-16     	; 0x23f8 <__addsf3x+0x6e>
    2408:	0e c0       	rjmp	.+28     	; 0x2426 <__addsf3x+0x9c>
    240a:	ba 0f       	add	r27, r26
    240c:	62 1f       	adc	r22, r18
    240e:	73 1f       	adc	r23, r19
    2410:	84 1f       	adc	r24, r20
    2412:	48 f4       	brcc	.+18     	; 0x2426 <__addsf3x+0x9c>
    2414:	87 95       	ror	r24
    2416:	77 95       	ror	r23
    2418:	67 95       	ror	r22
    241a:	b7 95       	ror	r27
    241c:	f7 95       	ror	r31
    241e:	9e 3f       	cpi	r25, 0xFE	; 254
    2420:	08 f0       	brcs	.+2      	; 0x2424 <__addsf3x+0x9a>
    2422:	b0 cf       	rjmp	.-160    	; 0x2384 <__addsf3+0x28>
    2424:	93 95       	inc	r25
    2426:	88 0f       	add	r24, r24
    2428:	08 f0       	brcs	.+2      	; 0x242c <__addsf3x+0xa2>
    242a:	99 27       	eor	r25, r25
    242c:	ee 0f       	add	r30, r30
    242e:	97 95       	ror	r25
    2430:	87 95       	ror	r24
    2432:	08 95       	ret

00002434 <__cmpsf2>:
    2434:	0e 94 04 13 	call	0x2608	; 0x2608 <__fp_cmp>
    2438:	08 f4       	brcc	.+2      	; 0x243c <__cmpsf2+0x8>
    243a:	81 e0       	ldi	r24, 0x01	; 1
    243c:	08 95       	ret

0000243e <__divsf3>:
    243e:	0e 94 33 12 	call	0x2466	; 0x2466 <__divsf3x>
    2442:	0c 94 3f 13 	jmp	0x267e	; 0x267e <__fp_round>
    2446:	0e 94 38 13 	call	0x2670	; 0x2670 <__fp_pscB>
    244a:	58 f0       	brcs	.+22     	; 0x2462 <__divsf3+0x24>
    244c:	0e 94 31 13 	call	0x2662	; 0x2662 <__fp_pscA>
    2450:	40 f0       	brcs	.+16     	; 0x2462 <__divsf3+0x24>
    2452:	29 f4       	brne	.+10     	; 0x245e <__divsf3+0x20>
    2454:	5f 3f       	cpi	r21, 0xFF	; 255
    2456:	29 f0       	breq	.+10     	; 0x2462 <__divsf3+0x24>
    2458:	0c 94 28 13 	jmp	0x2650	; 0x2650 <__fp_inf>
    245c:	51 11       	cpse	r21, r1
    245e:	0c 94 73 13 	jmp	0x26e6	; 0x26e6 <__fp_szero>
    2462:	0c 94 2e 13 	jmp	0x265c	; 0x265c <__fp_nan>

00002466 <__divsf3x>:
    2466:	0e 94 50 13 	call	0x26a0	; 0x26a0 <__fp_split3>
    246a:	68 f3       	brcs	.-38     	; 0x2446 <__divsf3+0x8>

0000246c <__divsf3_pse>:
    246c:	99 23       	and	r25, r25
    246e:	b1 f3       	breq	.-20     	; 0x245c <__divsf3+0x1e>
    2470:	55 23       	and	r21, r21
    2472:	91 f3       	breq	.-28     	; 0x2458 <__divsf3+0x1a>
    2474:	95 1b       	sub	r25, r21
    2476:	55 0b       	sbc	r21, r21
    2478:	bb 27       	eor	r27, r27
    247a:	aa 27       	eor	r26, r26
    247c:	62 17       	cp	r22, r18
    247e:	73 07       	cpc	r23, r19
    2480:	84 07       	cpc	r24, r20
    2482:	38 f0       	brcs	.+14     	; 0x2492 <__divsf3_pse+0x26>
    2484:	9f 5f       	subi	r25, 0xFF	; 255
    2486:	5f 4f       	sbci	r21, 0xFF	; 255
    2488:	22 0f       	add	r18, r18
    248a:	33 1f       	adc	r19, r19
    248c:	44 1f       	adc	r20, r20
    248e:	aa 1f       	adc	r26, r26
    2490:	a9 f3       	breq	.-22     	; 0x247c <__divsf3_pse+0x10>
    2492:	35 d0       	rcall	.+106    	; 0x24fe <__divsf3_pse+0x92>
    2494:	0e 2e       	mov	r0, r30
    2496:	3a f0       	brmi	.+14     	; 0x24a6 <__divsf3_pse+0x3a>
    2498:	e0 e8       	ldi	r30, 0x80	; 128
    249a:	32 d0       	rcall	.+100    	; 0x2500 <__divsf3_pse+0x94>
    249c:	91 50       	subi	r25, 0x01	; 1
    249e:	50 40       	sbci	r21, 0x00	; 0
    24a0:	e6 95       	lsr	r30
    24a2:	00 1c       	adc	r0, r0
    24a4:	ca f7       	brpl	.-14     	; 0x2498 <__divsf3_pse+0x2c>
    24a6:	2b d0       	rcall	.+86     	; 0x24fe <__divsf3_pse+0x92>
    24a8:	fe 2f       	mov	r31, r30
    24aa:	29 d0       	rcall	.+82     	; 0x24fe <__divsf3_pse+0x92>
    24ac:	66 0f       	add	r22, r22
    24ae:	77 1f       	adc	r23, r23
    24b0:	88 1f       	adc	r24, r24
    24b2:	bb 1f       	adc	r27, r27
    24b4:	26 17       	cp	r18, r22
    24b6:	37 07       	cpc	r19, r23
    24b8:	48 07       	cpc	r20, r24
    24ba:	ab 07       	cpc	r26, r27
    24bc:	b0 e8       	ldi	r27, 0x80	; 128
    24be:	09 f0       	breq	.+2      	; 0x24c2 <__divsf3_pse+0x56>
    24c0:	bb 0b       	sbc	r27, r27
    24c2:	80 2d       	mov	r24, r0
    24c4:	bf 01       	movw	r22, r30
    24c6:	ff 27       	eor	r31, r31
    24c8:	93 58       	subi	r25, 0x83	; 131
    24ca:	5f 4f       	sbci	r21, 0xFF	; 255
    24cc:	3a f0       	brmi	.+14     	; 0x24dc <__divsf3_pse+0x70>
    24ce:	9e 3f       	cpi	r25, 0xFE	; 254
    24d0:	51 05       	cpc	r21, r1
    24d2:	78 f0       	brcs	.+30     	; 0x24f2 <__divsf3_pse+0x86>
    24d4:	0c 94 28 13 	jmp	0x2650	; 0x2650 <__fp_inf>
    24d8:	0c 94 73 13 	jmp	0x26e6	; 0x26e6 <__fp_szero>
    24dc:	5f 3f       	cpi	r21, 0xFF	; 255
    24de:	e4 f3       	brlt	.-8      	; 0x24d8 <__divsf3_pse+0x6c>
    24e0:	98 3e       	cpi	r25, 0xE8	; 232
    24e2:	d4 f3       	brlt	.-12     	; 0x24d8 <__divsf3_pse+0x6c>
    24e4:	86 95       	lsr	r24
    24e6:	77 95       	ror	r23
    24e8:	67 95       	ror	r22
    24ea:	b7 95       	ror	r27
    24ec:	f7 95       	ror	r31
    24ee:	9f 5f       	subi	r25, 0xFF	; 255
    24f0:	c9 f7       	brne	.-14     	; 0x24e4 <__divsf3_pse+0x78>
    24f2:	88 0f       	add	r24, r24
    24f4:	91 1d       	adc	r25, r1
    24f6:	96 95       	lsr	r25
    24f8:	87 95       	ror	r24
    24fa:	97 f9       	bld	r25, 7
    24fc:	08 95       	ret
    24fe:	e1 e0       	ldi	r30, 0x01	; 1
    2500:	66 0f       	add	r22, r22
    2502:	77 1f       	adc	r23, r23
    2504:	88 1f       	adc	r24, r24
    2506:	bb 1f       	adc	r27, r27
    2508:	62 17       	cp	r22, r18
    250a:	73 07       	cpc	r23, r19
    250c:	84 07       	cpc	r24, r20
    250e:	ba 07       	cpc	r27, r26
    2510:	20 f0       	brcs	.+8      	; 0x251a <__divsf3_pse+0xae>
    2512:	62 1b       	sub	r22, r18
    2514:	73 0b       	sbc	r23, r19
    2516:	84 0b       	sbc	r24, r20
    2518:	ba 0b       	sbc	r27, r26
    251a:	ee 1f       	adc	r30, r30
    251c:	88 f7       	brcc	.-30     	; 0x2500 <__divsf3_pse+0x94>
    251e:	e0 95       	com	r30
    2520:	08 95       	ret

00002522 <__fixsfsi>:
    2522:	0e 94 98 12 	call	0x2530	; 0x2530 <__fixunssfsi>
    2526:	68 94       	set
    2528:	b1 11       	cpse	r27, r1
    252a:	0c 94 73 13 	jmp	0x26e6	; 0x26e6 <__fp_szero>
    252e:	08 95       	ret

00002530 <__fixunssfsi>:
    2530:	0e 94 58 13 	call	0x26b0	; 0x26b0 <__fp_splitA>
    2534:	88 f0       	brcs	.+34     	; 0x2558 <__fixunssfsi+0x28>
    2536:	9f 57       	subi	r25, 0x7F	; 127
    2538:	98 f0       	brcs	.+38     	; 0x2560 <__fixunssfsi+0x30>
    253a:	b9 2f       	mov	r27, r25
    253c:	99 27       	eor	r25, r25
    253e:	b7 51       	subi	r27, 0x17	; 23
    2540:	b0 f0       	brcs	.+44     	; 0x256e <__fixunssfsi+0x3e>
    2542:	e1 f0       	breq	.+56     	; 0x257c <__fixunssfsi+0x4c>
    2544:	66 0f       	add	r22, r22
    2546:	77 1f       	adc	r23, r23
    2548:	88 1f       	adc	r24, r24
    254a:	99 1f       	adc	r25, r25
    254c:	1a f0       	brmi	.+6      	; 0x2554 <__fixunssfsi+0x24>
    254e:	ba 95       	dec	r27
    2550:	c9 f7       	brne	.-14     	; 0x2544 <__fixunssfsi+0x14>
    2552:	14 c0       	rjmp	.+40     	; 0x257c <__fixunssfsi+0x4c>
    2554:	b1 30       	cpi	r27, 0x01	; 1
    2556:	91 f0       	breq	.+36     	; 0x257c <__fixunssfsi+0x4c>
    2558:	0e 94 72 13 	call	0x26e4	; 0x26e4 <__fp_zero>
    255c:	b1 e0       	ldi	r27, 0x01	; 1
    255e:	08 95       	ret
    2560:	0c 94 72 13 	jmp	0x26e4	; 0x26e4 <__fp_zero>
    2564:	67 2f       	mov	r22, r23
    2566:	78 2f       	mov	r23, r24
    2568:	88 27       	eor	r24, r24
    256a:	b8 5f       	subi	r27, 0xF8	; 248
    256c:	39 f0       	breq	.+14     	; 0x257c <__fixunssfsi+0x4c>
    256e:	b9 3f       	cpi	r27, 0xF9	; 249
    2570:	cc f3       	brlt	.-14     	; 0x2564 <__fixunssfsi+0x34>
    2572:	86 95       	lsr	r24
    2574:	77 95       	ror	r23
    2576:	67 95       	ror	r22
    2578:	b3 95       	inc	r27
    257a:	d9 f7       	brne	.-10     	; 0x2572 <__fixunssfsi+0x42>
    257c:	3e f4       	brtc	.+14     	; 0x258c <__fixunssfsi+0x5c>
    257e:	90 95       	com	r25
    2580:	80 95       	com	r24
    2582:	70 95       	com	r23
    2584:	61 95       	neg	r22
    2586:	7f 4f       	sbci	r23, 0xFF	; 255
    2588:	8f 4f       	sbci	r24, 0xFF	; 255
    258a:	9f 4f       	sbci	r25, 0xFF	; 255
    258c:	08 95       	ret

0000258e <__floatunsisf>:
    258e:	e8 94       	clt
    2590:	09 c0       	rjmp	.+18     	; 0x25a4 <__floatsisf+0x12>

00002592 <__floatsisf>:
    2592:	97 fb       	bst	r25, 7
    2594:	3e f4       	brtc	.+14     	; 0x25a4 <__floatsisf+0x12>
    2596:	90 95       	com	r25
    2598:	80 95       	com	r24
    259a:	70 95       	com	r23
    259c:	61 95       	neg	r22
    259e:	7f 4f       	sbci	r23, 0xFF	; 255
    25a0:	8f 4f       	sbci	r24, 0xFF	; 255
    25a2:	9f 4f       	sbci	r25, 0xFF	; 255
    25a4:	99 23       	and	r25, r25
    25a6:	a9 f0       	breq	.+42     	; 0x25d2 <__floatsisf+0x40>
    25a8:	f9 2f       	mov	r31, r25
    25aa:	96 e9       	ldi	r25, 0x96	; 150
    25ac:	bb 27       	eor	r27, r27
    25ae:	93 95       	inc	r25
    25b0:	f6 95       	lsr	r31
    25b2:	87 95       	ror	r24
    25b4:	77 95       	ror	r23
    25b6:	67 95       	ror	r22
    25b8:	b7 95       	ror	r27
    25ba:	f1 11       	cpse	r31, r1
    25bc:	f8 cf       	rjmp	.-16     	; 0x25ae <__floatsisf+0x1c>
    25be:	fa f4       	brpl	.+62     	; 0x25fe <__floatsisf+0x6c>
    25c0:	bb 0f       	add	r27, r27
    25c2:	11 f4       	brne	.+4      	; 0x25c8 <__floatsisf+0x36>
    25c4:	60 ff       	sbrs	r22, 0
    25c6:	1b c0       	rjmp	.+54     	; 0x25fe <__floatsisf+0x6c>
    25c8:	6f 5f       	subi	r22, 0xFF	; 255
    25ca:	7f 4f       	sbci	r23, 0xFF	; 255
    25cc:	8f 4f       	sbci	r24, 0xFF	; 255
    25ce:	9f 4f       	sbci	r25, 0xFF	; 255
    25d0:	16 c0       	rjmp	.+44     	; 0x25fe <__floatsisf+0x6c>
    25d2:	88 23       	and	r24, r24
    25d4:	11 f0       	breq	.+4      	; 0x25da <__floatsisf+0x48>
    25d6:	96 e9       	ldi	r25, 0x96	; 150
    25d8:	11 c0       	rjmp	.+34     	; 0x25fc <__floatsisf+0x6a>
    25da:	77 23       	and	r23, r23
    25dc:	21 f0       	breq	.+8      	; 0x25e6 <__floatsisf+0x54>
    25de:	9e e8       	ldi	r25, 0x8E	; 142
    25e0:	87 2f       	mov	r24, r23
    25e2:	76 2f       	mov	r23, r22
    25e4:	05 c0       	rjmp	.+10     	; 0x25f0 <__floatsisf+0x5e>
    25e6:	66 23       	and	r22, r22
    25e8:	71 f0       	breq	.+28     	; 0x2606 <__floatsisf+0x74>
    25ea:	96 e8       	ldi	r25, 0x86	; 134
    25ec:	86 2f       	mov	r24, r22
    25ee:	70 e0       	ldi	r23, 0x00	; 0
    25f0:	60 e0       	ldi	r22, 0x00	; 0
    25f2:	2a f0       	brmi	.+10     	; 0x25fe <__floatsisf+0x6c>
    25f4:	9a 95       	dec	r25
    25f6:	66 0f       	add	r22, r22
    25f8:	77 1f       	adc	r23, r23
    25fa:	88 1f       	adc	r24, r24
    25fc:	da f7       	brpl	.-10     	; 0x25f4 <__floatsisf+0x62>
    25fe:	88 0f       	add	r24, r24
    2600:	96 95       	lsr	r25
    2602:	87 95       	ror	r24
    2604:	97 f9       	bld	r25, 7
    2606:	08 95       	ret

00002608 <__fp_cmp>:
    2608:	99 0f       	add	r25, r25
    260a:	00 08       	sbc	r0, r0
    260c:	55 0f       	add	r21, r21
    260e:	aa 0b       	sbc	r26, r26
    2610:	e0 e8       	ldi	r30, 0x80	; 128
    2612:	fe ef       	ldi	r31, 0xFE	; 254
    2614:	16 16       	cp	r1, r22
    2616:	17 06       	cpc	r1, r23
    2618:	e8 07       	cpc	r30, r24
    261a:	f9 07       	cpc	r31, r25
    261c:	c0 f0       	brcs	.+48     	; 0x264e <__fp_cmp+0x46>
    261e:	12 16       	cp	r1, r18
    2620:	13 06       	cpc	r1, r19
    2622:	e4 07       	cpc	r30, r20
    2624:	f5 07       	cpc	r31, r21
    2626:	98 f0       	brcs	.+38     	; 0x264e <__fp_cmp+0x46>
    2628:	62 1b       	sub	r22, r18
    262a:	73 0b       	sbc	r23, r19
    262c:	84 0b       	sbc	r24, r20
    262e:	95 0b       	sbc	r25, r21
    2630:	39 f4       	brne	.+14     	; 0x2640 <__fp_cmp+0x38>
    2632:	0a 26       	eor	r0, r26
    2634:	61 f0       	breq	.+24     	; 0x264e <__fp_cmp+0x46>
    2636:	23 2b       	or	r18, r19
    2638:	24 2b       	or	r18, r20
    263a:	25 2b       	or	r18, r21
    263c:	21 f4       	brne	.+8      	; 0x2646 <__fp_cmp+0x3e>
    263e:	08 95       	ret
    2640:	0a 26       	eor	r0, r26
    2642:	09 f4       	brne	.+2      	; 0x2646 <__fp_cmp+0x3e>
    2644:	a1 40       	sbci	r26, 0x01	; 1
    2646:	a6 95       	lsr	r26
    2648:	8f ef       	ldi	r24, 0xFF	; 255
    264a:	81 1d       	adc	r24, r1
    264c:	81 1d       	adc	r24, r1
    264e:	08 95       	ret

00002650 <__fp_inf>:
    2650:	97 f9       	bld	r25, 7
    2652:	9f 67       	ori	r25, 0x7F	; 127
    2654:	80 e8       	ldi	r24, 0x80	; 128
    2656:	70 e0       	ldi	r23, 0x00	; 0
    2658:	60 e0       	ldi	r22, 0x00	; 0
    265a:	08 95       	ret

0000265c <__fp_nan>:
    265c:	9f ef       	ldi	r25, 0xFF	; 255
    265e:	80 ec       	ldi	r24, 0xC0	; 192
    2660:	08 95       	ret

00002662 <__fp_pscA>:
    2662:	00 24       	eor	r0, r0
    2664:	0a 94       	dec	r0
    2666:	16 16       	cp	r1, r22
    2668:	17 06       	cpc	r1, r23
    266a:	18 06       	cpc	r1, r24
    266c:	09 06       	cpc	r0, r25
    266e:	08 95       	ret

00002670 <__fp_pscB>:
    2670:	00 24       	eor	r0, r0
    2672:	0a 94       	dec	r0
    2674:	12 16       	cp	r1, r18
    2676:	13 06       	cpc	r1, r19
    2678:	14 06       	cpc	r1, r20
    267a:	05 06       	cpc	r0, r21
    267c:	08 95       	ret

0000267e <__fp_round>:
    267e:	09 2e       	mov	r0, r25
    2680:	03 94       	inc	r0
    2682:	00 0c       	add	r0, r0
    2684:	11 f4       	brne	.+4      	; 0x268a <__fp_round+0xc>
    2686:	88 23       	and	r24, r24
    2688:	52 f0       	brmi	.+20     	; 0x269e <__fp_round+0x20>
    268a:	bb 0f       	add	r27, r27
    268c:	40 f4       	brcc	.+16     	; 0x269e <__fp_round+0x20>
    268e:	bf 2b       	or	r27, r31
    2690:	11 f4       	brne	.+4      	; 0x2696 <__fp_round+0x18>
    2692:	60 ff       	sbrs	r22, 0
    2694:	04 c0       	rjmp	.+8      	; 0x269e <__fp_round+0x20>
    2696:	6f 5f       	subi	r22, 0xFF	; 255
    2698:	7f 4f       	sbci	r23, 0xFF	; 255
    269a:	8f 4f       	sbci	r24, 0xFF	; 255
    269c:	9f 4f       	sbci	r25, 0xFF	; 255
    269e:	08 95       	ret

000026a0 <__fp_split3>:
    26a0:	57 fd       	sbrc	r21, 7
    26a2:	90 58       	subi	r25, 0x80	; 128
    26a4:	44 0f       	add	r20, r20
    26a6:	55 1f       	adc	r21, r21
    26a8:	59 f0       	breq	.+22     	; 0x26c0 <__fp_splitA+0x10>
    26aa:	5f 3f       	cpi	r21, 0xFF	; 255
    26ac:	71 f0       	breq	.+28     	; 0x26ca <__fp_splitA+0x1a>
    26ae:	47 95       	ror	r20

000026b0 <__fp_splitA>:
    26b0:	88 0f       	add	r24, r24
    26b2:	97 fb       	bst	r25, 7
    26b4:	99 1f       	adc	r25, r25
    26b6:	61 f0       	breq	.+24     	; 0x26d0 <__fp_splitA+0x20>
    26b8:	9f 3f       	cpi	r25, 0xFF	; 255
    26ba:	79 f0       	breq	.+30     	; 0x26da <__fp_splitA+0x2a>
    26bc:	87 95       	ror	r24
    26be:	08 95       	ret
    26c0:	12 16       	cp	r1, r18
    26c2:	13 06       	cpc	r1, r19
    26c4:	14 06       	cpc	r1, r20
    26c6:	55 1f       	adc	r21, r21
    26c8:	f2 cf       	rjmp	.-28     	; 0x26ae <__fp_split3+0xe>
    26ca:	46 95       	lsr	r20
    26cc:	f1 df       	rcall	.-30     	; 0x26b0 <__fp_splitA>
    26ce:	08 c0       	rjmp	.+16     	; 0x26e0 <__fp_splitA+0x30>
    26d0:	16 16       	cp	r1, r22
    26d2:	17 06       	cpc	r1, r23
    26d4:	18 06       	cpc	r1, r24
    26d6:	99 1f       	adc	r25, r25
    26d8:	f1 cf       	rjmp	.-30     	; 0x26bc <__fp_splitA+0xc>
    26da:	86 95       	lsr	r24
    26dc:	71 05       	cpc	r23, r1
    26de:	61 05       	cpc	r22, r1
    26e0:	08 94       	sec
    26e2:	08 95       	ret

000026e4 <__fp_zero>:
    26e4:	e8 94       	clt

000026e6 <__fp_szero>:
    26e6:	bb 27       	eor	r27, r27
    26e8:	66 27       	eor	r22, r22
    26ea:	77 27       	eor	r23, r23
    26ec:	cb 01       	movw	r24, r22
    26ee:	97 f9       	bld	r25, 7
    26f0:	08 95       	ret

000026f2 <__gesf2>:
    26f2:	0e 94 04 13 	call	0x2608	; 0x2608 <__fp_cmp>
    26f6:	08 f4       	brcc	.+2      	; 0x26fa <__gesf2+0x8>
    26f8:	8f ef       	ldi	r24, 0xFF	; 255
    26fa:	08 95       	ret

000026fc <__mulsf3>:
    26fc:	0e 94 91 13 	call	0x2722	; 0x2722 <__mulsf3x>
    2700:	0c 94 3f 13 	jmp	0x267e	; 0x267e <__fp_round>
    2704:	0e 94 31 13 	call	0x2662	; 0x2662 <__fp_pscA>
    2708:	38 f0       	brcs	.+14     	; 0x2718 <__mulsf3+0x1c>
    270a:	0e 94 38 13 	call	0x2670	; 0x2670 <__fp_pscB>
    270e:	20 f0       	brcs	.+8      	; 0x2718 <__mulsf3+0x1c>
    2710:	95 23       	and	r25, r21
    2712:	11 f0       	breq	.+4      	; 0x2718 <__mulsf3+0x1c>
    2714:	0c 94 28 13 	jmp	0x2650	; 0x2650 <__fp_inf>
    2718:	0c 94 2e 13 	jmp	0x265c	; 0x265c <__fp_nan>
    271c:	11 24       	eor	r1, r1
    271e:	0c 94 73 13 	jmp	0x26e6	; 0x26e6 <__fp_szero>

00002722 <__mulsf3x>:
    2722:	0e 94 50 13 	call	0x26a0	; 0x26a0 <__fp_split3>
    2726:	70 f3       	brcs	.-36     	; 0x2704 <__mulsf3+0x8>

00002728 <__mulsf3_pse>:
    2728:	95 9f       	mul	r25, r21
    272a:	c1 f3       	breq	.-16     	; 0x271c <__mulsf3+0x20>
    272c:	95 0f       	add	r25, r21
    272e:	50 e0       	ldi	r21, 0x00	; 0
    2730:	55 1f       	adc	r21, r21
    2732:	62 9f       	mul	r22, r18
    2734:	f0 01       	movw	r30, r0
    2736:	72 9f       	mul	r23, r18
    2738:	bb 27       	eor	r27, r27
    273a:	f0 0d       	add	r31, r0
    273c:	b1 1d       	adc	r27, r1
    273e:	63 9f       	mul	r22, r19
    2740:	aa 27       	eor	r26, r26
    2742:	f0 0d       	add	r31, r0
    2744:	b1 1d       	adc	r27, r1
    2746:	aa 1f       	adc	r26, r26
    2748:	64 9f       	mul	r22, r20
    274a:	66 27       	eor	r22, r22
    274c:	b0 0d       	add	r27, r0
    274e:	a1 1d       	adc	r26, r1
    2750:	66 1f       	adc	r22, r22
    2752:	82 9f       	mul	r24, r18
    2754:	22 27       	eor	r18, r18
    2756:	b0 0d       	add	r27, r0
    2758:	a1 1d       	adc	r26, r1
    275a:	62 1f       	adc	r22, r18
    275c:	73 9f       	mul	r23, r19
    275e:	b0 0d       	add	r27, r0
    2760:	a1 1d       	adc	r26, r1
    2762:	62 1f       	adc	r22, r18
    2764:	83 9f       	mul	r24, r19
    2766:	a0 0d       	add	r26, r0
    2768:	61 1d       	adc	r22, r1
    276a:	22 1f       	adc	r18, r18
    276c:	74 9f       	mul	r23, r20
    276e:	33 27       	eor	r19, r19
    2770:	a0 0d       	add	r26, r0
    2772:	61 1d       	adc	r22, r1
    2774:	23 1f       	adc	r18, r19
    2776:	84 9f       	mul	r24, r20
    2778:	60 0d       	add	r22, r0
    277a:	21 1d       	adc	r18, r1
    277c:	82 2f       	mov	r24, r18
    277e:	76 2f       	mov	r23, r22
    2780:	6a 2f       	mov	r22, r26
    2782:	11 24       	eor	r1, r1
    2784:	9f 57       	subi	r25, 0x7F	; 127
    2786:	50 40       	sbci	r21, 0x00	; 0
    2788:	9a f0       	brmi	.+38     	; 0x27b0 <__mulsf3_pse+0x88>
    278a:	f1 f0       	breq	.+60     	; 0x27c8 <__mulsf3_pse+0xa0>
    278c:	88 23       	and	r24, r24
    278e:	4a f0       	brmi	.+18     	; 0x27a2 <__mulsf3_pse+0x7a>
    2790:	ee 0f       	add	r30, r30
    2792:	ff 1f       	adc	r31, r31
    2794:	bb 1f       	adc	r27, r27
    2796:	66 1f       	adc	r22, r22
    2798:	77 1f       	adc	r23, r23
    279a:	88 1f       	adc	r24, r24
    279c:	91 50       	subi	r25, 0x01	; 1
    279e:	50 40       	sbci	r21, 0x00	; 0
    27a0:	a9 f7       	brne	.-22     	; 0x278c <__mulsf3_pse+0x64>
    27a2:	9e 3f       	cpi	r25, 0xFE	; 254
    27a4:	51 05       	cpc	r21, r1
    27a6:	80 f0       	brcs	.+32     	; 0x27c8 <__mulsf3_pse+0xa0>
    27a8:	0c 94 28 13 	jmp	0x2650	; 0x2650 <__fp_inf>
    27ac:	0c 94 73 13 	jmp	0x26e6	; 0x26e6 <__fp_szero>
    27b0:	5f 3f       	cpi	r21, 0xFF	; 255
    27b2:	e4 f3       	brlt	.-8      	; 0x27ac <__mulsf3_pse+0x84>
    27b4:	98 3e       	cpi	r25, 0xE8	; 232
    27b6:	d4 f3       	brlt	.-12     	; 0x27ac <__mulsf3_pse+0x84>
    27b8:	86 95       	lsr	r24
    27ba:	77 95       	ror	r23
    27bc:	67 95       	ror	r22
    27be:	b7 95       	ror	r27
    27c0:	f7 95       	ror	r31
    27c2:	e7 95       	ror	r30
    27c4:	9f 5f       	subi	r25, 0xFF	; 255
    27c6:	c1 f7       	brne	.-16     	; 0x27b8 <__mulsf3_pse+0x90>
    27c8:	fe 2b       	or	r31, r30
    27ca:	88 0f       	add	r24, r24
    27cc:	91 1d       	adc	r25, r1
    27ce:	96 95       	lsr	r25
    27d0:	87 95       	ror	r24
    27d2:	97 f9       	bld	r25, 7
    27d4:	08 95       	ret

000027d6 <__udivmodsi4>:
    27d6:	a1 e2       	ldi	r26, 0x21	; 33
    27d8:	1a 2e       	mov	r1, r26
    27da:	aa 1b       	sub	r26, r26
    27dc:	bb 1b       	sub	r27, r27
    27de:	fd 01       	movw	r30, r26
    27e0:	0d c0       	rjmp	.+26     	; 0x27fc <__udivmodsi4_ep>

000027e2 <__udivmodsi4_loop>:
    27e2:	aa 1f       	adc	r26, r26
    27e4:	bb 1f       	adc	r27, r27
    27e6:	ee 1f       	adc	r30, r30
    27e8:	ff 1f       	adc	r31, r31
    27ea:	a2 17       	cp	r26, r18
    27ec:	b3 07       	cpc	r27, r19
    27ee:	e4 07       	cpc	r30, r20
    27f0:	f5 07       	cpc	r31, r21
    27f2:	20 f0       	brcs	.+8      	; 0x27fc <__udivmodsi4_ep>
    27f4:	a2 1b       	sub	r26, r18
    27f6:	b3 0b       	sbc	r27, r19
    27f8:	e4 0b       	sbc	r30, r20
    27fa:	f5 0b       	sbc	r31, r21

000027fc <__udivmodsi4_ep>:
    27fc:	66 1f       	adc	r22, r22
    27fe:	77 1f       	adc	r23, r23
    2800:	88 1f       	adc	r24, r24
    2802:	99 1f       	adc	r25, r25
    2804:	1a 94       	dec	r1
    2806:	69 f7       	brne	.-38     	; 0x27e2 <__udivmodsi4_loop>
    2808:	60 95       	com	r22
    280a:	70 95       	com	r23
    280c:	80 95       	com	r24
    280e:	90 95       	com	r25
    2810:	9b 01       	movw	r18, r22
    2812:	ac 01       	movw	r20, r24
    2814:	bd 01       	movw	r22, r26
    2816:	cf 01       	movw	r24, r30
    2818:	08 95       	ret

0000281a <__divmodsi4>:
    281a:	05 2e       	mov	r0, r21
    281c:	97 fb       	bst	r25, 7
    281e:	1e f4       	brtc	.+6      	; 0x2826 <__divmodsi4+0xc>
    2820:	00 94       	com	r0
    2822:	0e 94 24 14 	call	0x2848	; 0x2848 <__negsi2>
    2826:	57 fd       	sbrc	r21, 7
    2828:	07 d0       	rcall	.+14     	; 0x2838 <__divmodsi4_neg2>
    282a:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <__udivmodsi4>
    282e:	07 fc       	sbrc	r0, 7
    2830:	03 d0       	rcall	.+6      	; 0x2838 <__divmodsi4_neg2>
    2832:	4e f4       	brtc	.+18     	; 0x2846 <__divmodsi4_exit>
    2834:	0c 94 24 14 	jmp	0x2848	; 0x2848 <__negsi2>

00002838 <__divmodsi4_neg2>:
    2838:	50 95       	com	r21
    283a:	40 95       	com	r20
    283c:	30 95       	com	r19
    283e:	21 95       	neg	r18
    2840:	3f 4f       	sbci	r19, 0xFF	; 255
    2842:	4f 4f       	sbci	r20, 0xFF	; 255
    2844:	5f 4f       	sbci	r21, 0xFF	; 255

00002846 <__divmodsi4_exit>:
    2846:	08 95       	ret

00002848 <__negsi2>:
    2848:	90 95       	com	r25
    284a:	80 95       	com	r24
    284c:	70 95       	com	r23
    284e:	61 95       	neg	r22
    2850:	7f 4f       	sbci	r23, 0xFF	; 255
    2852:	8f 4f       	sbci	r24, 0xFF	; 255
    2854:	9f 4f       	sbci	r25, 0xFF	; 255
    2856:	08 95       	ret

00002858 <__tablejump2__>:
    2858:	ee 0f       	add	r30, r30
    285a:	ff 1f       	adc	r31, r31
    285c:	05 90       	lpm	r0, Z+
    285e:	f4 91       	lpm	r31, Z
    2860:	e0 2d       	mov	r30, r0
    2862:	09 94       	ijmp

00002864 <atoi>:
    2864:	fc 01       	movw	r30, r24
    2866:	88 27       	eor	r24, r24
    2868:	99 27       	eor	r25, r25
    286a:	e8 94       	clt
    286c:	21 91       	ld	r18, Z+
    286e:	20 32       	cpi	r18, 0x20	; 32
    2870:	e9 f3       	breq	.-6      	; 0x286c <atoi+0x8>
    2872:	29 30       	cpi	r18, 0x09	; 9
    2874:	10 f0       	brcs	.+4      	; 0x287a <atoi+0x16>
    2876:	2e 30       	cpi	r18, 0x0E	; 14
    2878:	c8 f3       	brcs	.-14     	; 0x286c <atoi+0x8>
    287a:	2b 32       	cpi	r18, 0x2B	; 43
    287c:	41 f0       	breq	.+16     	; 0x288e <atoi+0x2a>
    287e:	2d 32       	cpi	r18, 0x2D	; 45
    2880:	39 f4       	brne	.+14     	; 0x2890 <atoi+0x2c>
    2882:	68 94       	set
    2884:	04 c0       	rjmp	.+8      	; 0x288e <atoi+0x2a>
    2886:	0e 94 50 14 	call	0x28a0	; 0x28a0 <__mulhi_const_10>
    288a:	82 0f       	add	r24, r18
    288c:	91 1d       	adc	r25, r1
    288e:	21 91       	ld	r18, Z+
    2890:	20 53       	subi	r18, 0x30	; 48
    2892:	2a 30       	cpi	r18, 0x0A	; 10
    2894:	c0 f3       	brcs	.-16     	; 0x2886 <atoi+0x22>
    2896:	1e f4       	brtc	.+6      	; 0x289e <atoi+0x3a>
    2898:	90 95       	com	r25
    289a:	81 95       	neg	r24
    289c:	9f 4f       	sbci	r25, 0xFF	; 255
    289e:	08 95       	ret

000028a0 <__mulhi_const_10>:
    28a0:	7a e0       	ldi	r23, 0x0A	; 10
    28a2:	97 9f       	mul	r25, r23
    28a4:	90 2d       	mov	r25, r0
    28a6:	87 9f       	mul	r24, r23
    28a8:	80 2d       	mov	r24, r0
    28aa:	91 0d       	add	r25, r1
    28ac:	11 24       	eor	r1, r1
    28ae:	08 95       	ret

000028b0 <printf>:
    28b0:	a0 e0       	ldi	r26, 0x00	; 0
    28b2:	b0 e0       	ldi	r27, 0x00	; 0
    28b4:	ee e5       	ldi	r30, 0x5E	; 94
    28b6:	f4 e1       	ldi	r31, 0x14	; 20
    28b8:	0c 94 3f 17 	jmp	0x2e7e	; 0x2e7e <__prologue_saves__+0x20>
    28bc:	ae 01       	movw	r20, r28
    28be:	4b 5f       	subi	r20, 0xFB	; 251
    28c0:	5f 4f       	sbci	r21, 0xFF	; 255
    28c2:	fa 01       	movw	r30, r20
    28c4:	61 91       	ld	r22, Z+
    28c6:	71 91       	ld	r23, Z+
    28c8:	af 01       	movw	r20, r30
    28ca:	80 91 23 08 	lds	r24, 0x0823	; 0x800823 <__iob+0x2>
    28ce:	90 91 24 08 	lds	r25, 0x0824	; 0x800824 <__iob+0x3>
    28d2:	0e 94 9e 14 	call	0x293c	; 0x293c <vfprintf>
    28d6:	e2 e0       	ldi	r30, 0x02	; 2
    28d8:	0c 94 5b 17 	jmp	0x2eb6	; 0x2eb6 <__epilogue_restores__+0x20>

000028dc <puts>:
    28dc:	0f 93       	push	r16
    28de:	1f 93       	push	r17
    28e0:	cf 93       	push	r28
    28e2:	df 93       	push	r29
    28e4:	e0 91 23 08 	lds	r30, 0x0823	; 0x800823 <__iob+0x2>
    28e8:	f0 91 24 08 	lds	r31, 0x0824	; 0x800824 <__iob+0x3>
    28ec:	23 81       	ldd	r18, Z+3	; 0x03
    28ee:	21 ff       	sbrs	r18, 1
    28f0:	1b c0       	rjmp	.+54     	; 0x2928 <puts+0x4c>
    28f2:	8c 01       	movw	r16, r24
    28f4:	d0 e0       	ldi	r29, 0x00	; 0
    28f6:	c0 e0       	ldi	r28, 0x00	; 0
    28f8:	f8 01       	movw	r30, r16
    28fa:	81 91       	ld	r24, Z+
    28fc:	8f 01       	movw	r16, r30
    28fe:	60 91 23 08 	lds	r22, 0x0823	; 0x800823 <__iob+0x2>
    2902:	70 91 24 08 	lds	r23, 0x0824	; 0x800824 <__iob+0x3>
    2906:	db 01       	movw	r26, r22
    2908:	18 96       	adiw	r26, 0x08	; 8
    290a:	ed 91       	ld	r30, X+
    290c:	fc 91       	ld	r31, X
    290e:	19 97       	sbiw	r26, 0x09	; 9
    2910:	88 23       	and	r24, r24
    2912:	31 f0       	breq	.+12     	; 0x2920 <puts+0x44>
    2914:	09 95       	icall
    2916:	89 2b       	or	r24, r25
    2918:	79 f3       	breq	.-34     	; 0x28f8 <puts+0x1c>
    291a:	df ef       	ldi	r29, 0xFF	; 255
    291c:	cf ef       	ldi	r28, 0xFF	; 255
    291e:	ec cf       	rjmp	.-40     	; 0x28f8 <puts+0x1c>
    2920:	8a e0       	ldi	r24, 0x0A	; 10
    2922:	09 95       	icall
    2924:	89 2b       	or	r24, r25
    2926:	19 f0       	breq	.+6      	; 0x292e <puts+0x52>
    2928:	8f ef       	ldi	r24, 0xFF	; 255
    292a:	9f ef       	ldi	r25, 0xFF	; 255
    292c:	02 c0       	rjmp	.+4      	; 0x2932 <puts+0x56>
    292e:	8d 2f       	mov	r24, r29
    2930:	9c 2f       	mov	r25, r28
    2932:	df 91       	pop	r29
    2934:	cf 91       	pop	r28
    2936:	1f 91       	pop	r17
    2938:	0f 91       	pop	r16
    293a:	08 95       	ret

0000293c <vfprintf>:
    293c:	ab e0       	ldi	r26, 0x0B	; 11
    293e:	b0 e0       	ldi	r27, 0x00	; 0
    2940:	e4 ea       	ldi	r30, 0xA4	; 164
    2942:	f4 e1       	ldi	r31, 0x14	; 20
    2944:	0c 94 2f 17 	jmp	0x2e5e	; 0x2e5e <__prologue_saves__>
    2948:	6c 01       	movw	r12, r24
    294a:	7b 01       	movw	r14, r22
    294c:	8a 01       	movw	r16, r20
    294e:	fc 01       	movw	r30, r24
    2950:	17 82       	std	Z+7, r1	; 0x07
    2952:	16 82       	std	Z+6, r1	; 0x06
    2954:	83 81       	ldd	r24, Z+3	; 0x03
    2956:	81 ff       	sbrs	r24, 1
    2958:	cc c1       	rjmp	.+920    	; 0x2cf2 <vfprintf+0x3b6>
    295a:	ce 01       	movw	r24, r28
    295c:	01 96       	adiw	r24, 0x01	; 1
    295e:	3c 01       	movw	r6, r24
    2960:	f6 01       	movw	r30, r12
    2962:	93 81       	ldd	r25, Z+3	; 0x03
    2964:	f7 01       	movw	r30, r14
    2966:	93 fd       	sbrc	r25, 3
    2968:	85 91       	lpm	r24, Z+
    296a:	93 ff       	sbrs	r25, 3
    296c:	81 91       	ld	r24, Z+
    296e:	7f 01       	movw	r14, r30
    2970:	88 23       	and	r24, r24
    2972:	09 f4       	brne	.+2      	; 0x2976 <vfprintf+0x3a>
    2974:	ba c1       	rjmp	.+884    	; 0x2cea <vfprintf+0x3ae>
    2976:	85 32       	cpi	r24, 0x25	; 37
    2978:	39 f4       	brne	.+14     	; 0x2988 <vfprintf+0x4c>
    297a:	93 fd       	sbrc	r25, 3
    297c:	85 91       	lpm	r24, Z+
    297e:	93 ff       	sbrs	r25, 3
    2980:	81 91       	ld	r24, Z+
    2982:	7f 01       	movw	r14, r30
    2984:	85 32       	cpi	r24, 0x25	; 37
    2986:	29 f4       	brne	.+10     	; 0x2992 <vfprintf+0x56>
    2988:	b6 01       	movw	r22, r12
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <fputc>
    2990:	e7 cf       	rjmp	.-50     	; 0x2960 <vfprintf+0x24>
    2992:	91 2c       	mov	r9, r1
    2994:	21 2c       	mov	r2, r1
    2996:	31 2c       	mov	r3, r1
    2998:	ff e1       	ldi	r31, 0x1F	; 31
    299a:	f3 15       	cp	r31, r3
    299c:	d8 f0       	brcs	.+54     	; 0x29d4 <vfprintf+0x98>
    299e:	8b 32       	cpi	r24, 0x2B	; 43
    29a0:	79 f0       	breq	.+30     	; 0x29c0 <vfprintf+0x84>
    29a2:	38 f4       	brcc	.+14     	; 0x29b2 <vfprintf+0x76>
    29a4:	80 32       	cpi	r24, 0x20	; 32
    29a6:	79 f0       	breq	.+30     	; 0x29c6 <vfprintf+0x8a>
    29a8:	83 32       	cpi	r24, 0x23	; 35
    29aa:	a1 f4       	brne	.+40     	; 0x29d4 <vfprintf+0x98>
    29ac:	23 2d       	mov	r18, r3
    29ae:	20 61       	ori	r18, 0x10	; 16
    29b0:	1d c0       	rjmp	.+58     	; 0x29ec <vfprintf+0xb0>
    29b2:	8d 32       	cpi	r24, 0x2D	; 45
    29b4:	61 f0       	breq	.+24     	; 0x29ce <vfprintf+0x92>
    29b6:	80 33       	cpi	r24, 0x30	; 48
    29b8:	69 f4       	brne	.+26     	; 0x29d4 <vfprintf+0x98>
    29ba:	23 2d       	mov	r18, r3
    29bc:	21 60       	ori	r18, 0x01	; 1
    29be:	16 c0       	rjmp	.+44     	; 0x29ec <vfprintf+0xb0>
    29c0:	83 2d       	mov	r24, r3
    29c2:	82 60       	ori	r24, 0x02	; 2
    29c4:	38 2e       	mov	r3, r24
    29c6:	e3 2d       	mov	r30, r3
    29c8:	e4 60       	ori	r30, 0x04	; 4
    29ca:	3e 2e       	mov	r3, r30
    29cc:	2a c0       	rjmp	.+84     	; 0x2a22 <vfprintf+0xe6>
    29ce:	f3 2d       	mov	r31, r3
    29d0:	f8 60       	ori	r31, 0x08	; 8
    29d2:	1d c0       	rjmp	.+58     	; 0x2a0e <vfprintf+0xd2>
    29d4:	37 fc       	sbrc	r3, 7
    29d6:	2d c0       	rjmp	.+90     	; 0x2a32 <vfprintf+0xf6>
    29d8:	20 ed       	ldi	r18, 0xD0	; 208
    29da:	28 0f       	add	r18, r24
    29dc:	2a 30       	cpi	r18, 0x0A	; 10
    29de:	40 f0       	brcs	.+16     	; 0x29f0 <vfprintf+0xb4>
    29e0:	8e 32       	cpi	r24, 0x2E	; 46
    29e2:	b9 f4       	brne	.+46     	; 0x2a12 <vfprintf+0xd6>
    29e4:	36 fc       	sbrc	r3, 6
    29e6:	81 c1       	rjmp	.+770    	; 0x2cea <vfprintf+0x3ae>
    29e8:	23 2d       	mov	r18, r3
    29ea:	20 64       	ori	r18, 0x40	; 64
    29ec:	32 2e       	mov	r3, r18
    29ee:	19 c0       	rjmp	.+50     	; 0x2a22 <vfprintf+0xe6>
    29f0:	36 fe       	sbrs	r3, 6
    29f2:	06 c0       	rjmp	.+12     	; 0x2a00 <vfprintf+0xc4>
    29f4:	8a e0       	ldi	r24, 0x0A	; 10
    29f6:	98 9e       	mul	r9, r24
    29f8:	20 0d       	add	r18, r0
    29fa:	11 24       	eor	r1, r1
    29fc:	92 2e       	mov	r9, r18
    29fe:	11 c0       	rjmp	.+34     	; 0x2a22 <vfprintf+0xe6>
    2a00:	ea e0       	ldi	r30, 0x0A	; 10
    2a02:	2e 9e       	mul	r2, r30
    2a04:	20 0d       	add	r18, r0
    2a06:	11 24       	eor	r1, r1
    2a08:	22 2e       	mov	r2, r18
    2a0a:	f3 2d       	mov	r31, r3
    2a0c:	f0 62       	ori	r31, 0x20	; 32
    2a0e:	3f 2e       	mov	r3, r31
    2a10:	08 c0       	rjmp	.+16     	; 0x2a22 <vfprintf+0xe6>
    2a12:	8c 36       	cpi	r24, 0x6C	; 108
    2a14:	21 f4       	brne	.+8      	; 0x2a1e <vfprintf+0xe2>
    2a16:	83 2d       	mov	r24, r3
    2a18:	80 68       	ori	r24, 0x80	; 128
    2a1a:	38 2e       	mov	r3, r24
    2a1c:	02 c0       	rjmp	.+4      	; 0x2a22 <vfprintf+0xe6>
    2a1e:	88 36       	cpi	r24, 0x68	; 104
    2a20:	41 f4       	brne	.+16     	; 0x2a32 <vfprintf+0xf6>
    2a22:	f7 01       	movw	r30, r14
    2a24:	93 fd       	sbrc	r25, 3
    2a26:	85 91       	lpm	r24, Z+
    2a28:	93 ff       	sbrs	r25, 3
    2a2a:	81 91       	ld	r24, Z+
    2a2c:	7f 01       	movw	r14, r30
    2a2e:	81 11       	cpse	r24, r1
    2a30:	b3 cf       	rjmp	.-154    	; 0x2998 <vfprintf+0x5c>
    2a32:	98 2f       	mov	r25, r24
    2a34:	9f 7d       	andi	r25, 0xDF	; 223
    2a36:	95 54       	subi	r25, 0x45	; 69
    2a38:	93 30       	cpi	r25, 0x03	; 3
    2a3a:	28 f4       	brcc	.+10     	; 0x2a46 <vfprintf+0x10a>
    2a3c:	0c 5f       	subi	r16, 0xFC	; 252
    2a3e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a40:	9f e3       	ldi	r25, 0x3F	; 63
    2a42:	99 83       	std	Y+1, r25	; 0x01
    2a44:	0d c0       	rjmp	.+26     	; 0x2a60 <vfprintf+0x124>
    2a46:	83 36       	cpi	r24, 0x63	; 99
    2a48:	31 f0       	breq	.+12     	; 0x2a56 <vfprintf+0x11a>
    2a4a:	83 37       	cpi	r24, 0x73	; 115
    2a4c:	71 f0       	breq	.+28     	; 0x2a6a <vfprintf+0x12e>
    2a4e:	83 35       	cpi	r24, 0x53	; 83
    2a50:	09 f0       	breq	.+2      	; 0x2a54 <vfprintf+0x118>
    2a52:	59 c0       	rjmp	.+178    	; 0x2b06 <vfprintf+0x1ca>
    2a54:	21 c0       	rjmp	.+66     	; 0x2a98 <vfprintf+0x15c>
    2a56:	f8 01       	movw	r30, r16
    2a58:	80 81       	ld	r24, Z
    2a5a:	89 83       	std	Y+1, r24	; 0x01
    2a5c:	0e 5f       	subi	r16, 0xFE	; 254
    2a5e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a60:	88 24       	eor	r8, r8
    2a62:	83 94       	inc	r8
    2a64:	91 2c       	mov	r9, r1
    2a66:	53 01       	movw	r10, r6
    2a68:	13 c0       	rjmp	.+38     	; 0x2a90 <vfprintf+0x154>
    2a6a:	28 01       	movw	r4, r16
    2a6c:	f2 e0       	ldi	r31, 0x02	; 2
    2a6e:	4f 0e       	add	r4, r31
    2a70:	51 1c       	adc	r5, r1
    2a72:	f8 01       	movw	r30, r16
    2a74:	a0 80       	ld	r10, Z
    2a76:	b1 80       	ldd	r11, Z+1	; 0x01
    2a78:	36 fe       	sbrs	r3, 6
    2a7a:	03 c0       	rjmp	.+6      	; 0x2a82 <vfprintf+0x146>
    2a7c:	69 2d       	mov	r22, r9
    2a7e:	70 e0       	ldi	r23, 0x00	; 0
    2a80:	02 c0       	rjmp	.+4      	; 0x2a86 <vfprintf+0x14a>
    2a82:	6f ef       	ldi	r22, 0xFF	; 255
    2a84:	7f ef       	ldi	r23, 0xFF	; 255
    2a86:	c5 01       	movw	r24, r10
    2a88:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <strnlen>
    2a8c:	4c 01       	movw	r8, r24
    2a8e:	82 01       	movw	r16, r4
    2a90:	f3 2d       	mov	r31, r3
    2a92:	ff 77       	andi	r31, 0x7F	; 127
    2a94:	3f 2e       	mov	r3, r31
    2a96:	16 c0       	rjmp	.+44     	; 0x2ac4 <vfprintf+0x188>
    2a98:	28 01       	movw	r4, r16
    2a9a:	22 e0       	ldi	r18, 0x02	; 2
    2a9c:	42 0e       	add	r4, r18
    2a9e:	51 1c       	adc	r5, r1
    2aa0:	f8 01       	movw	r30, r16
    2aa2:	a0 80       	ld	r10, Z
    2aa4:	b1 80       	ldd	r11, Z+1	; 0x01
    2aa6:	36 fe       	sbrs	r3, 6
    2aa8:	03 c0       	rjmp	.+6      	; 0x2ab0 <vfprintf+0x174>
    2aaa:	69 2d       	mov	r22, r9
    2aac:	70 e0       	ldi	r23, 0x00	; 0
    2aae:	02 c0       	rjmp	.+4      	; 0x2ab4 <vfprintf+0x178>
    2ab0:	6f ef       	ldi	r22, 0xFF	; 255
    2ab2:	7f ef       	ldi	r23, 0xFF	; 255
    2ab4:	c5 01       	movw	r24, r10
    2ab6:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <strnlen_P>
    2aba:	4c 01       	movw	r8, r24
    2abc:	f3 2d       	mov	r31, r3
    2abe:	f0 68       	ori	r31, 0x80	; 128
    2ac0:	3f 2e       	mov	r3, r31
    2ac2:	82 01       	movw	r16, r4
    2ac4:	33 fc       	sbrc	r3, 3
    2ac6:	1b c0       	rjmp	.+54     	; 0x2afe <vfprintf+0x1c2>
    2ac8:	82 2d       	mov	r24, r2
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	88 16       	cp	r8, r24
    2ace:	99 06       	cpc	r9, r25
    2ad0:	b0 f4       	brcc	.+44     	; 0x2afe <vfprintf+0x1c2>
    2ad2:	b6 01       	movw	r22, r12
    2ad4:	80 e2       	ldi	r24, 0x20	; 32
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <fputc>
    2adc:	2a 94       	dec	r2
    2ade:	f4 cf       	rjmp	.-24     	; 0x2ac8 <vfprintf+0x18c>
    2ae0:	f5 01       	movw	r30, r10
    2ae2:	37 fc       	sbrc	r3, 7
    2ae4:	85 91       	lpm	r24, Z+
    2ae6:	37 fe       	sbrs	r3, 7
    2ae8:	81 91       	ld	r24, Z+
    2aea:	5f 01       	movw	r10, r30
    2aec:	b6 01       	movw	r22, r12
    2aee:	90 e0       	ldi	r25, 0x00	; 0
    2af0:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <fputc>
    2af4:	21 10       	cpse	r2, r1
    2af6:	2a 94       	dec	r2
    2af8:	21 e0       	ldi	r18, 0x01	; 1
    2afa:	82 1a       	sub	r8, r18
    2afc:	91 08       	sbc	r9, r1
    2afe:	81 14       	cp	r8, r1
    2b00:	91 04       	cpc	r9, r1
    2b02:	71 f7       	brne	.-36     	; 0x2ae0 <vfprintf+0x1a4>
    2b04:	e8 c0       	rjmp	.+464    	; 0x2cd6 <vfprintf+0x39a>
    2b06:	84 36       	cpi	r24, 0x64	; 100
    2b08:	11 f0       	breq	.+4      	; 0x2b0e <vfprintf+0x1d2>
    2b0a:	89 36       	cpi	r24, 0x69	; 105
    2b0c:	41 f5       	brne	.+80     	; 0x2b5e <vfprintf+0x222>
    2b0e:	f8 01       	movw	r30, r16
    2b10:	37 fe       	sbrs	r3, 7
    2b12:	07 c0       	rjmp	.+14     	; 0x2b22 <vfprintf+0x1e6>
    2b14:	60 81       	ld	r22, Z
    2b16:	71 81       	ldd	r23, Z+1	; 0x01
    2b18:	82 81       	ldd	r24, Z+2	; 0x02
    2b1a:	93 81       	ldd	r25, Z+3	; 0x03
    2b1c:	0c 5f       	subi	r16, 0xFC	; 252
    2b1e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b20:	08 c0       	rjmp	.+16     	; 0x2b32 <vfprintf+0x1f6>
    2b22:	60 81       	ld	r22, Z
    2b24:	71 81       	ldd	r23, Z+1	; 0x01
    2b26:	07 2e       	mov	r0, r23
    2b28:	00 0c       	add	r0, r0
    2b2a:	88 0b       	sbc	r24, r24
    2b2c:	99 0b       	sbc	r25, r25
    2b2e:	0e 5f       	subi	r16, 0xFE	; 254
    2b30:	1f 4f       	sbci	r17, 0xFF	; 255
    2b32:	f3 2d       	mov	r31, r3
    2b34:	ff 76       	andi	r31, 0x6F	; 111
    2b36:	3f 2e       	mov	r3, r31
    2b38:	97 ff       	sbrs	r25, 7
    2b3a:	09 c0       	rjmp	.+18     	; 0x2b4e <vfprintf+0x212>
    2b3c:	90 95       	com	r25
    2b3e:	80 95       	com	r24
    2b40:	70 95       	com	r23
    2b42:	61 95       	neg	r22
    2b44:	7f 4f       	sbci	r23, 0xFF	; 255
    2b46:	8f 4f       	sbci	r24, 0xFF	; 255
    2b48:	9f 4f       	sbci	r25, 0xFF	; 255
    2b4a:	f0 68       	ori	r31, 0x80	; 128
    2b4c:	3f 2e       	mov	r3, r31
    2b4e:	2a e0       	ldi	r18, 0x0A	; 10
    2b50:	30 e0       	ldi	r19, 0x00	; 0
    2b52:	a3 01       	movw	r20, r6
    2b54:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <__ultoa_invert>
    2b58:	88 2e       	mov	r8, r24
    2b5a:	86 18       	sub	r8, r6
    2b5c:	45 c0       	rjmp	.+138    	; 0x2be8 <vfprintf+0x2ac>
    2b5e:	85 37       	cpi	r24, 0x75	; 117
    2b60:	31 f4       	brne	.+12     	; 0x2b6e <vfprintf+0x232>
    2b62:	23 2d       	mov	r18, r3
    2b64:	2f 7e       	andi	r18, 0xEF	; 239
    2b66:	b2 2e       	mov	r11, r18
    2b68:	2a e0       	ldi	r18, 0x0A	; 10
    2b6a:	30 e0       	ldi	r19, 0x00	; 0
    2b6c:	25 c0       	rjmp	.+74     	; 0x2bb8 <vfprintf+0x27c>
    2b6e:	93 2d       	mov	r25, r3
    2b70:	99 7f       	andi	r25, 0xF9	; 249
    2b72:	b9 2e       	mov	r11, r25
    2b74:	8f 36       	cpi	r24, 0x6F	; 111
    2b76:	c1 f0       	breq	.+48     	; 0x2ba8 <vfprintf+0x26c>
    2b78:	18 f4       	brcc	.+6      	; 0x2b80 <vfprintf+0x244>
    2b7a:	88 35       	cpi	r24, 0x58	; 88
    2b7c:	79 f0       	breq	.+30     	; 0x2b9c <vfprintf+0x260>
    2b7e:	b5 c0       	rjmp	.+362    	; 0x2cea <vfprintf+0x3ae>
    2b80:	80 37       	cpi	r24, 0x70	; 112
    2b82:	19 f0       	breq	.+6      	; 0x2b8a <vfprintf+0x24e>
    2b84:	88 37       	cpi	r24, 0x78	; 120
    2b86:	21 f0       	breq	.+8      	; 0x2b90 <vfprintf+0x254>
    2b88:	b0 c0       	rjmp	.+352    	; 0x2cea <vfprintf+0x3ae>
    2b8a:	e9 2f       	mov	r30, r25
    2b8c:	e0 61       	ori	r30, 0x10	; 16
    2b8e:	be 2e       	mov	r11, r30
    2b90:	b4 fe       	sbrs	r11, 4
    2b92:	0d c0       	rjmp	.+26     	; 0x2bae <vfprintf+0x272>
    2b94:	fb 2d       	mov	r31, r11
    2b96:	f4 60       	ori	r31, 0x04	; 4
    2b98:	bf 2e       	mov	r11, r31
    2b9a:	09 c0       	rjmp	.+18     	; 0x2bae <vfprintf+0x272>
    2b9c:	34 fe       	sbrs	r3, 4
    2b9e:	0a c0       	rjmp	.+20     	; 0x2bb4 <vfprintf+0x278>
    2ba0:	29 2f       	mov	r18, r25
    2ba2:	26 60       	ori	r18, 0x06	; 6
    2ba4:	b2 2e       	mov	r11, r18
    2ba6:	06 c0       	rjmp	.+12     	; 0x2bb4 <vfprintf+0x278>
    2ba8:	28 e0       	ldi	r18, 0x08	; 8
    2baa:	30 e0       	ldi	r19, 0x00	; 0
    2bac:	05 c0       	rjmp	.+10     	; 0x2bb8 <vfprintf+0x27c>
    2bae:	20 e1       	ldi	r18, 0x10	; 16
    2bb0:	30 e0       	ldi	r19, 0x00	; 0
    2bb2:	02 c0       	rjmp	.+4      	; 0x2bb8 <vfprintf+0x27c>
    2bb4:	20 e1       	ldi	r18, 0x10	; 16
    2bb6:	32 e0       	ldi	r19, 0x02	; 2
    2bb8:	f8 01       	movw	r30, r16
    2bba:	b7 fe       	sbrs	r11, 7
    2bbc:	07 c0       	rjmp	.+14     	; 0x2bcc <vfprintf+0x290>
    2bbe:	60 81       	ld	r22, Z
    2bc0:	71 81       	ldd	r23, Z+1	; 0x01
    2bc2:	82 81       	ldd	r24, Z+2	; 0x02
    2bc4:	93 81       	ldd	r25, Z+3	; 0x03
    2bc6:	0c 5f       	subi	r16, 0xFC	; 252
    2bc8:	1f 4f       	sbci	r17, 0xFF	; 255
    2bca:	06 c0       	rjmp	.+12     	; 0x2bd8 <vfprintf+0x29c>
    2bcc:	60 81       	ld	r22, Z
    2bce:	71 81       	ldd	r23, Z+1	; 0x01
    2bd0:	80 e0       	ldi	r24, 0x00	; 0
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	0e 5f       	subi	r16, 0xFE	; 254
    2bd6:	1f 4f       	sbci	r17, 0xFF	; 255
    2bd8:	a3 01       	movw	r20, r6
    2bda:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <__ultoa_invert>
    2bde:	88 2e       	mov	r8, r24
    2be0:	86 18       	sub	r8, r6
    2be2:	fb 2d       	mov	r31, r11
    2be4:	ff 77       	andi	r31, 0x7F	; 127
    2be6:	3f 2e       	mov	r3, r31
    2be8:	36 fe       	sbrs	r3, 6
    2bea:	0d c0       	rjmp	.+26     	; 0x2c06 <vfprintf+0x2ca>
    2bec:	23 2d       	mov	r18, r3
    2bee:	2e 7f       	andi	r18, 0xFE	; 254
    2bf0:	a2 2e       	mov	r10, r18
    2bf2:	89 14       	cp	r8, r9
    2bf4:	58 f4       	brcc	.+22     	; 0x2c0c <vfprintf+0x2d0>
    2bf6:	34 fe       	sbrs	r3, 4
    2bf8:	0b c0       	rjmp	.+22     	; 0x2c10 <vfprintf+0x2d4>
    2bfa:	32 fc       	sbrc	r3, 2
    2bfc:	09 c0       	rjmp	.+18     	; 0x2c10 <vfprintf+0x2d4>
    2bfe:	83 2d       	mov	r24, r3
    2c00:	8e 7e       	andi	r24, 0xEE	; 238
    2c02:	a8 2e       	mov	r10, r24
    2c04:	05 c0       	rjmp	.+10     	; 0x2c10 <vfprintf+0x2d4>
    2c06:	b8 2c       	mov	r11, r8
    2c08:	a3 2c       	mov	r10, r3
    2c0a:	03 c0       	rjmp	.+6      	; 0x2c12 <vfprintf+0x2d6>
    2c0c:	b8 2c       	mov	r11, r8
    2c0e:	01 c0       	rjmp	.+2      	; 0x2c12 <vfprintf+0x2d6>
    2c10:	b9 2c       	mov	r11, r9
    2c12:	a4 fe       	sbrs	r10, 4
    2c14:	0f c0       	rjmp	.+30     	; 0x2c34 <vfprintf+0x2f8>
    2c16:	fe 01       	movw	r30, r28
    2c18:	e8 0d       	add	r30, r8
    2c1a:	f1 1d       	adc	r31, r1
    2c1c:	80 81       	ld	r24, Z
    2c1e:	80 33       	cpi	r24, 0x30	; 48
    2c20:	21 f4       	brne	.+8      	; 0x2c2a <vfprintf+0x2ee>
    2c22:	9a 2d       	mov	r25, r10
    2c24:	99 7e       	andi	r25, 0xE9	; 233
    2c26:	a9 2e       	mov	r10, r25
    2c28:	09 c0       	rjmp	.+18     	; 0x2c3c <vfprintf+0x300>
    2c2a:	a2 fe       	sbrs	r10, 2
    2c2c:	06 c0       	rjmp	.+12     	; 0x2c3a <vfprintf+0x2fe>
    2c2e:	b3 94       	inc	r11
    2c30:	b3 94       	inc	r11
    2c32:	04 c0       	rjmp	.+8      	; 0x2c3c <vfprintf+0x300>
    2c34:	8a 2d       	mov	r24, r10
    2c36:	86 78       	andi	r24, 0x86	; 134
    2c38:	09 f0       	breq	.+2      	; 0x2c3c <vfprintf+0x300>
    2c3a:	b3 94       	inc	r11
    2c3c:	a3 fc       	sbrc	r10, 3
    2c3e:	11 c0       	rjmp	.+34     	; 0x2c62 <vfprintf+0x326>
    2c40:	a0 fe       	sbrs	r10, 0
    2c42:	06 c0       	rjmp	.+12     	; 0x2c50 <vfprintf+0x314>
    2c44:	b2 14       	cp	r11, r2
    2c46:	88 f4       	brcc	.+34     	; 0x2c6a <vfprintf+0x32e>
    2c48:	28 0c       	add	r2, r8
    2c4a:	92 2c       	mov	r9, r2
    2c4c:	9b 18       	sub	r9, r11
    2c4e:	0e c0       	rjmp	.+28     	; 0x2c6c <vfprintf+0x330>
    2c50:	b2 14       	cp	r11, r2
    2c52:	60 f4       	brcc	.+24     	; 0x2c6c <vfprintf+0x330>
    2c54:	b6 01       	movw	r22, r12
    2c56:	80 e2       	ldi	r24, 0x20	; 32
    2c58:	90 e0       	ldi	r25, 0x00	; 0
    2c5a:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <fputc>
    2c5e:	b3 94       	inc	r11
    2c60:	f7 cf       	rjmp	.-18     	; 0x2c50 <vfprintf+0x314>
    2c62:	b2 14       	cp	r11, r2
    2c64:	18 f4       	brcc	.+6      	; 0x2c6c <vfprintf+0x330>
    2c66:	2b 18       	sub	r2, r11
    2c68:	02 c0       	rjmp	.+4      	; 0x2c6e <vfprintf+0x332>
    2c6a:	98 2c       	mov	r9, r8
    2c6c:	21 2c       	mov	r2, r1
    2c6e:	a4 fe       	sbrs	r10, 4
    2c70:	10 c0       	rjmp	.+32     	; 0x2c92 <vfprintf+0x356>
    2c72:	b6 01       	movw	r22, r12
    2c74:	80 e3       	ldi	r24, 0x30	; 48
    2c76:	90 e0       	ldi	r25, 0x00	; 0
    2c78:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <fputc>
    2c7c:	a2 fe       	sbrs	r10, 2
    2c7e:	17 c0       	rjmp	.+46     	; 0x2cae <vfprintf+0x372>
    2c80:	a1 fc       	sbrc	r10, 1
    2c82:	03 c0       	rjmp	.+6      	; 0x2c8a <vfprintf+0x34e>
    2c84:	88 e7       	ldi	r24, 0x78	; 120
    2c86:	90 e0       	ldi	r25, 0x00	; 0
    2c88:	02 c0       	rjmp	.+4      	; 0x2c8e <vfprintf+0x352>
    2c8a:	88 e5       	ldi	r24, 0x58	; 88
    2c8c:	90 e0       	ldi	r25, 0x00	; 0
    2c8e:	b6 01       	movw	r22, r12
    2c90:	0c c0       	rjmp	.+24     	; 0x2caa <vfprintf+0x36e>
    2c92:	8a 2d       	mov	r24, r10
    2c94:	86 78       	andi	r24, 0x86	; 134
    2c96:	59 f0       	breq	.+22     	; 0x2cae <vfprintf+0x372>
    2c98:	a1 fe       	sbrs	r10, 1
    2c9a:	02 c0       	rjmp	.+4      	; 0x2ca0 <vfprintf+0x364>
    2c9c:	8b e2       	ldi	r24, 0x2B	; 43
    2c9e:	01 c0       	rjmp	.+2      	; 0x2ca2 <vfprintf+0x366>
    2ca0:	80 e2       	ldi	r24, 0x20	; 32
    2ca2:	a7 fc       	sbrc	r10, 7
    2ca4:	8d e2       	ldi	r24, 0x2D	; 45
    2ca6:	b6 01       	movw	r22, r12
    2ca8:	90 e0       	ldi	r25, 0x00	; 0
    2caa:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <fputc>
    2cae:	89 14       	cp	r8, r9
    2cb0:	38 f4       	brcc	.+14     	; 0x2cc0 <vfprintf+0x384>
    2cb2:	b6 01       	movw	r22, r12
    2cb4:	80 e3       	ldi	r24, 0x30	; 48
    2cb6:	90 e0       	ldi	r25, 0x00	; 0
    2cb8:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <fputc>
    2cbc:	9a 94       	dec	r9
    2cbe:	f7 cf       	rjmp	.-18     	; 0x2cae <vfprintf+0x372>
    2cc0:	8a 94       	dec	r8
    2cc2:	f3 01       	movw	r30, r6
    2cc4:	e8 0d       	add	r30, r8
    2cc6:	f1 1d       	adc	r31, r1
    2cc8:	80 81       	ld	r24, Z
    2cca:	b6 01       	movw	r22, r12
    2ccc:	90 e0       	ldi	r25, 0x00	; 0
    2cce:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <fputc>
    2cd2:	81 10       	cpse	r8, r1
    2cd4:	f5 cf       	rjmp	.-22     	; 0x2cc0 <vfprintf+0x384>
    2cd6:	22 20       	and	r2, r2
    2cd8:	09 f4       	brne	.+2      	; 0x2cdc <vfprintf+0x3a0>
    2cda:	42 ce       	rjmp	.-892    	; 0x2960 <vfprintf+0x24>
    2cdc:	b6 01       	movw	r22, r12
    2cde:	80 e2       	ldi	r24, 0x20	; 32
    2ce0:	90 e0       	ldi	r25, 0x00	; 0
    2ce2:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <fputc>
    2ce6:	2a 94       	dec	r2
    2ce8:	f6 cf       	rjmp	.-20     	; 0x2cd6 <vfprintf+0x39a>
    2cea:	f6 01       	movw	r30, r12
    2cec:	86 81       	ldd	r24, Z+6	; 0x06
    2cee:	97 81       	ldd	r25, Z+7	; 0x07
    2cf0:	02 c0       	rjmp	.+4      	; 0x2cf6 <vfprintf+0x3ba>
    2cf2:	8f ef       	ldi	r24, 0xFF	; 255
    2cf4:	9f ef       	ldi	r25, 0xFF	; 255
    2cf6:	2b 96       	adiw	r28, 0x0b	; 11
    2cf8:	e2 e1       	ldi	r30, 0x12	; 18
    2cfa:	0c 94 4b 17 	jmp	0x2e96	; 0x2e96 <__epilogue_restores__>

00002cfe <strnlen_P>:
    2cfe:	fc 01       	movw	r30, r24
    2d00:	05 90       	lpm	r0, Z+
    2d02:	61 50       	subi	r22, 0x01	; 1
    2d04:	70 40       	sbci	r23, 0x00	; 0
    2d06:	01 10       	cpse	r0, r1
    2d08:	d8 f7       	brcc	.-10     	; 0x2d00 <strnlen_P+0x2>
    2d0a:	80 95       	com	r24
    2d0c:	90 95       	com	r25
    2d0e:	8e 0f       	add	r24, r30
    2d10:	9f 1f       	adc	r25, r31
    2d12:	08 95       	ret

00002d14 <strnlen>:
    2d14:	fc 01       	movw	r30, r24
    2d16:	61 50       	subi	r22, 0x01	; 1
    2d18:	70 40       	sbci	r23, 0x00	; 0
    2d1a:	01 90       	ld	r0, Z+
    2d1c:	01 10       	cpse	r0, r1
    2d1e:	d8 f7       	brcc	.-10     	; 0x2d16 <strnlen+0x2>
    2d20:	80 95       	com	r24
    2d22:	90 95       	com	r25
    2d24:	8e 0f       	add	r24, r30
    2d26:	9f 1f       	adc	r25, r31
    2d28:	08 95       	ret

00002d2a <fputc>:
    2d2a:	0f 93       	push	r16
    2d2c:	1f 93       	push	r17
    2d2e:	cf 93       	push	r28
    2d30:	df 93       	push	r29
    2d32:	fb 01       	movw	r30, r22
    2d34:	23 81       	ldd	r18, Z+3	; 0x03
    2d36:	21 fd       	sbrc	r18, 1
    2d38:	03 c0       	rjmp	.+6      	; 0x2d40 <fputc+0x16>
    2d3a:	8f ef       	ldi	r24, 0xFF	; 255
    2d3c:	9f ef       	ldi	r25, 0xFF	; 255
    2d3e:	2c c0       	rjmp	.+88     	; 0x2d98 <fputc+0x6e>
    2d40:	22 ff       	sbrs	r18, 2
    2d42:	16 c0       	rjmp	.+44     	; 0x2d70 <fputc+0x46>
    2d44:	46 81       	ldd	r20, Z+6	; 0x06
    2d46:	57 81       	ldd	r21, Z+7	; 0x07
    2d48:	24 81       	ldd	r18, Z+4	; 0x04
    2d4a:	35 81       	ldd	r19, Z+5	; 0x05
    2d4c:	42 17       	cp	r20, r18
    2d4e:	53 07       	cpc	r21, r19
    2d50:	44 f4       	brge	.+16     	; 0x2d62 <fputc+0x38>
    2d52:	a0 81       	ld	r26, Z
    2d54:	b1 81       	ldd	r27, Z+1	; 0x01
    2d56:	9d 01       	movw	r18, r26
    2d58:	2f 5f       	subi	r18, 0xFF	; 255
    2d5a:	3f 4f       	sbci	r19, 0xFF	; 255
    2d5c:	31 83       	std	Z+1, r19	; 0x01
    2d5e:	20 83       	st	Z, r18
    2d60:	8c 93       	st	X, r24
    2d62:	26 81       	ldd	r18, Z+6	; 0x06
    2d64:	37 81       	ldd	r19, Z+7	; 0x07
    2d66:	2f 5f       	subi	r18, 0xFF	; 255
    2d68:	3f 4f       	sbci	r19, 0xFF	; 255
    2d6a:	37 83       	std	Z+7, r19	; 0x07
    2d6c:	26 83       	std	Z+6, r18	; 0x06
    2d6e:	14 c0       	rjmp	.+40     	; 0x2d98 <fputc+0x6e>
    2d70:	8b 01       	movw	r16, r22
    2d72:	ec 01       	movw	r28, r24
    2d74:	fb 01       	movw	r30, r22
    2d76:	00 84       	ldd	r0, Z+8	; 0x08
    2d78:	f1 85       	ldd	r31, Z+9	; 0x09
    2d7a:	e0 2d       	mov	r30, r0
    2d7c:	09 95       	icall
    2d7e:	89 2b       	or	r24, r25
    2d80:	e1 f6       	brne	.-72     	; 0x2d3a <fputc+0x10>
    2d82:	d8 01       	movw	r26, r16
    2d84:	16 96       	adiw	r26, 0x06	; 6
    2d86:	8d 91       	ld	r24, X+
    2d88:	9c 91       	ld	r25, X
    2d8a:	17 97       	sbiw	r26, 0x07	; 7
    2d8c:	01 96       	adiw	r24, 0x01	; 1
    2d8e:	17 96       	adiw	r26, 0x07	; 7
    2d90:	9c 93       	st	X, r25
    2d92:	8e 93       	st	-X, r24
    2d94:	16 97       	sbiw	r26, 0x06	; 6
    2d96:	ce 01       	movw	r24, r28
    2d98:	df 91       	pop	r29
    2d9a:	cf 91       	pop	r28
    2d9c:	1f 91       	pop	r17
    2d9e:	0f 91       	pop	r16
    2da0:	08 95       	ret

00002da2 <__ultoa_invert>:
    2da2:	fa 01       	movw	r30, r20
    2da4:	aa 27       	eor	r26, r26
    2da6:	28 30       	cpi	r18, 0x08	; 8
    2da8:	51 f1       	breq	.+84     	; 0x2dfe <__ultoa_invert+0x5c>
    2daa:	20 31       	cpi	r18, 0x10	; 16
    2dac:	81 f1       	breq	.+96     	; 0x2e0e <__ultoa_invert+0x6c>
    2dae:	e8 94       	clt
    2db0:	6f 93       	push	r22
    2db2:	6e 7f       	andi	r22, 0xFE	; 254
    2db4:	6e 5f       	subi	r22, 0xFE	; 254
    2db6:	7f 4f       	sbci	r23, 0xFF	; 255
    2db8:	8f 4f       	sbci	r24, 0xFF	; 255
    2dba:	9f 4f       	sbci	r25, 0xFF	; 255
    2dbc:	af 4f       	sbci	r26, 0xFF	; 255
    2dbe:	b1 e0       	ldi	r27, 0x01	; 1
    2dc0:	3e d0       	rcall	.+124    	; 0x2e3e <__ultoa_invert+0x9c>
    2dc2:	b4 e0       	ldi	r27, 0x04	; 4
    2dc4:	3c d0       	rcall	.+120    	; 0x2e3e <__ultoa_invert+0x9c>
    2dc6:	67 0f       	add	r22, r23
    2dc8:	78 1f       	adc	r23, r24
    2dca:	89 1f       	adc	r24, r25
    2dcc:	9a 1f       	adc	r25, r26
    2dce:	a1 1d       	adc	r26, r1
    2dd0:	68 0f       	add	r22, r24
    2dd2:	79 1f       	adc	r23, r25
    2dd4:	8a 1f       	adc	r24, r26
    2dd6:	91 1d       	adc	r25, r1
    2dd8:	a1 1d       	adc	r26, r1
    2dda:	6a 0f       	add	r22, r26
    2ddc:	71 1d       	adc	r23, r1
    2dde:	81 1d       	adc	r24, r1
    2de0:	91 1d       	adc	r25, r1
    2de2:	a1 1d       	adc	r26, r1
    2de4:	20 d0       	rcall	.+64     	; 0x2e26 <__ultoa_invert+0x84>
    2de6:	09 f4       	brne	.+2      	; 0x2dea <__ultoa_invert+0x48>
    2de8:	68 94       	set
    2dea:	3f 91       	pop	r19
    2dec:	2a e0       	ldi	r18, 0x0A	; 10
    2dee:	26 9f       	mul	r18, r22
    2df0:	11 24       	eor	r1, r1
    2df2:	30 19       	sub	r19, r0
    2df4:	30 5d       	subi	r19, 0xD0	; 208
    2df6:	31 93       	st	Z+, r19
    2df8:	de f6       	brtc	.-74     	; 0x2db0 <__ultoa_invert+0xe>
    2dfa:	cf 01       	movw	r24, r30
    2dfc:	08 95       	ret
    2dfe:	46 2f       	mov	r20, r22
    2e00:	47 70       	andi	r20, 0x07	; 7
    2e02:	40 5d       	subi	r20, 0xD0	; 208
    2e04:	41 93       	st	Z+, r20
    2e06:	b3 e0       	ldi	r27, 0x03	; 3
    2e08:	0f d0       	rcall	.+30     	; 0x2e28 <__ultoa_invert+0x86>
    2e0a:	c9 f7       	brne	.-14     	; 0x2dfe <__ultoa_invert+0x5c>
    2e0c:	f6 cf       	rjmp	.-20     	; 0x2dfa <__ultoa_invert+0x58>
    2e0e:	46 2f       	mov	r20, r22
    2e10:	4f 70       	andi	r20, 0x0F	; 15
    2e12:	40 5d       	subi	r20, 0xD0	; 208
    2e14:	4a 33       	cpi	r20, 0x3A	; 58
    2e16:	18 f0       	brcs	.+6      	; 0x2e1e <__ultoa_invert+0x7c>
    2e18:	49 5d       	subi	r20, 0xD9	; 217
    2e1a:	31 fd       	sbrc	r19, 1
    2e1c:	40 52       	subi	r20, 0x20	; 32
    2e1e:	41 93       	st	Z+, r20
    2e20:	02 d0       	rcall	.+4      	; 0x2e26 <__ultoa_invert+0x84>
    2e22:	a9 f7       	brne	.-22     	; 0x2e0e <__ultoa_invert+0x6c>
    2e24:	ea cf       	rjmp	.-44     	; 0x2dfa <__ultoa_invert+0x58>
    2e26:	b4 e0       	ldi	r27, 0x04	; 4
    2e28:	a6 95       	lsr	r26
    2e2a:	97 95       	ror	r25
    2e2c:	87 95       	ror	r24
    2e2e:	77 95       	ror	r23
    2e30:	67 95       	ror	r22
    2e32:	ba 95       	dec	r27
    2e34:	c9 f7       	brne	.-14     	; 0x2e28 <__ultoa_invert+0x86>
    2e36:	00 97       	sbiw	r24, 0x00	; 0
    2e38:	61 05       	cpc	r22, r1
    2e3a:	71 05       	cpc	r23, r1
    2e3c:	08 95       	ret
    2e3e:	9b 01       	movw	r18, r22
    2e40:	ac 01       	movw	r20, r24
    2e42:	0a 2e       	mov	r0, r26
    2e44:	06 94       	lsr	r0
    2e46:	57 95       	ror	r21
    2e48:	47 95       	ror	r20
    2e4a:	37 95       	ror	r19
    2e4c:	27 95       	ror	r18
    2e4e:	ba 95       	dec	r27
    2e50:	c9 f7       	brne	.-14     	; 0x2e44 <__ultoa_invert+0xa2>
    2e52:	62 0f       	add	r22, r18
    2e54:	73 1f       	adc	r23, r19
    2e56:	84 1f       	adc	r24, r20
    2e58:	95 1f       	adc	r25, r21
    2e5a:	a0 1d       	adc	r26, r0
    2e5c:	08 95       	ret

00002e5e <__prologue_saves__>:
    2e5e:	2f 92       	push	r2
    2e60:	3f 92       	push	r3
    2e62:	4f 92       	push	r4
    2e64:	5f 92       	push	r5
    2e66:	6f 92       	push	r6
    2e68:	7f 92       	push	r7
    2e6a:	8f 92       	push	r8
    2e6c:	9f 92       	push	r9
    2e6e:	af 92       	push	r10
    2e70:	bf 92       	push	r11
    2e72:	cf 92       	push	r12
    2e74:	df 92       	push	r13
    2e76:	ef 92       	push	r14
    2e78:	ff 92       	push	r15
    2e7a:	0f 93       	push	r16
    2e7c:	1f 93       	push	r17
    2e7e:	cf 93       	push	r28
    2e80:	df 93       	push	r29
    2e82:	cd b7       	in	r28, 0x3d	; 61
    2e84:	de b7       	in	r29, 0x3e	; 62
    2e86:	ca 1b       	sub	r28, r26
    2e88:	db 0b       	sbc	r29, r27
    2e8a:	0f b6       	in	r0, 0x3f	; 63
    2e8c:	f8 94       	cli
    2e8e:	de bf       	out	0x3e, r29	; 62
    2e90:	0f be       	out	0x3f, r0	; 63
    2e92:	cd bf       	out	0x3d, r28	; 61
    2e94:	09 94       	ijmp

00002e96 <__epilogue_restores__>:
    2e96:	2a 88       	ldd	r2, Y+18	; 0x12
    2e98:	39 88       	ldd	r3, Y+17	; 0x11
    2e9a:	48 88       	ldd	r4, Y+16	; 0x10
    2e9c:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e9e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ea0:	7d 84       	ldd	r7, Y+13	; 0x0d
    2ea2:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ea4:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ea6:	aa 84       	ldd	r10, Y+10	; 0x0a
    2ea8:	b9 84       	ldd	r11, Y+9	; 0x09
    2eaa:	c8 84       	ldd	r12, Y+8	; 0x08
    2eac:	df 80       	ldd	r13, Y+7	; 0x07
    2eae:	ee 80       	ldd	r14, Y+6	; 0x06
    2eb0:	fd 80       	ldd	r15, Y+5	; 0x05
    2eb2:	0c 81       	ldd	r16, Y+4	; 0x04
    2eb4:	1b 81       	ldd	r17, Y+3	; 0x03
    2eb6:	aa 81       	ldd	r26, Y+2	; 0x02
    2eb8:	b9 81       	ldd	r27, Y+1	; 0x01
    2eba:	ce 0f       	add	r28, r30
    2ebc:	d1 1d       	adc	r29, r1
    2ebe:	0f b6       	in	r0, 0x3f	; 63
    2ec0:	f8 94       	cli
    2ec2:	de bf       	out	0x3e, r29	; 62
    2ec4:	0f be       	out	0x3f, r0	; 63
    2ec6:	cd bf       	out	0x3d, r28	; 61
    2ec8:	ed 01       	movw	r28, r26
    2eca:	08 95       	ret

00002ecc <_exit>:
    2ecc:	f8 94       	cli

00002ece <__stop_program>:
    2ece:	ff cf       	rjmp	.-2      	; 0x2ece <__stop_program>
